This is sphinx.info, produced by makeinfo version 4.13 from sphinx.texi.

Generated by Sphinx 1.2pre/9902d52d73b1.
INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Sphinx: (sphinx.info). The Sphinx documentation builder.
END-INFO-DIR-ENTRY

     Sphinx 1.2 (hg), February 06, 2013

     Georg Brandl

     Copyright (C) 2007-2013, Georg Brandl


File: sphinx.info,  Node: Top,  Next: Introduction,  Up: (dir)

Sphinx Documentation
********************

     Sphinx 1.2 (hg), February 06, 2013

     Georg Brandl

     Copyright (C) 2007-2013, Georg Brandl

* Menu:

* Introduction::
* First Steps with Sphinx::
* Invocation of sphinx-build::
* Invocation of sphinx-apidoc::
* reStructuredText Primer::
* Sphinx Markup Constructs::
* Sphinx Domains::
* Available builders::
* The build configuration file::
* Internationalization::
* HTML theming support::
* Templating: Templating<2>.
* Sphinx Extensions::
* Sphinx Web Support::
* Sphinx FAQ::
* Glossary: Glossary<2>.
* Sphinx Developer's Guide::
* Changes in Sphinx::
* Projects using Sphinx::
* Python Module Index::
* Index::

 --- The Detailed Node Listing ---

Introduction

* Conversion from other systems::
* Use with other systems::
* Prerequisites::
* Usage::

First Steps with Sphinx

* Setting up the documentation sources::
* Defining document structure::
* Adding content::
* Running the build::
* Documenting objects::
* Basic configuration::
* Autodoc::
* More topics to be covered::

Invocation of sphinx-build

* Makefile options::

reStructuredText Primer

* Paragraphs::
* Inline markup::
* Lists and Quote-like blocks::
* Source Code::
* Tables::
* Hyperlinks::
* Sections::
* Explicit Markup::
* Directives::
* Images::
* Footnotes::
* Citations::
* Substitutions::
* Comments::
* Source encoding::
* Gotchas::

Hyperlinks

* External links::
* Internal links::

Sphinx Markup Constructs

* The TOC tree::
* Paragraph-level markup::
* Table-of-contents markup::
* Glossary::
* Grammar production displays::
* Showing code examples::
* Inline markup: Inline markup<2>.
* Miscellaneous markup::

The TOC tree

* Special names::

Showing code examples

* Line numbers::
* Includes::

Inline markup

* Cross-referencing syntax::
* Other semantic markup::
* Substitutions: Substitutions<2>.

Cross-referencing syntax

* Cross-referencing objects::
* Cross-referencing arbitrary locations::
* Cross-referencing documents::
* Referencing downloadable files::
* Cross-referencing other items of interest::

Miscellaneous markup

* File-wide metadata::
* Meta-information markup::
* Index-generating markup::
* Including content based on tags::
* Tables: Tables<2>.

Sphinx Domains

* What is a Domain?::
* Basic Markup::
* The Python Domain::
* The C Domain::
* The C++ Domain::
* The Standard Domain::
* The JavaScript Domain::
* The reStructuredText domain::
* More domains::

Basic Markup

* Cross-referencing syntax: Cross-referencing syntax<2>.

The Python Domain

* Python Signatures::
* Info field lists::
* Cross-referencing Python objects::

The C Domain

* Cross-referencing C constructs::

Available builders

* Serialization builder details::

The build configuration file

* General configuration::
* Project information::
* Options for internationalization::
* Options for HTML output::
* Options for epub output::
* Options for LaTeX output::
* Options for text output::
* Options for manual page output::
* Options for Texinfo output::
* Options for the linkcheck builder::
* Options for the XML builder::

HTML theming support

* Using a theme::
* Builtin themes::
* Creating themes::

Creating themes

* Templating::
* Static templates::

Templating

* Do I need to use Sphinx' templates to produce HTML?::
* Jinja/Sphinx Templating Primer::
* Working with the builtin templates::

Working with the builtin templates

* Blocks::
* Configuration Variables::
* Helper Functions::
* Global Variables::

Sphinx Extensions

* Tutorial; Writing a simple extension: Tutorial Writing a simple extension.
* Extension API::
* Writing new builders::
* Builtin Sphinx extensions::
* Third-party extensions::

Tutorial: Writing a simple extension

* Build Phases::
* Extension Design::
* The Setup Function::
* The Node Classes::
* The Directive Classes::
* The Event Handlers::

Extension API

* Sphinx core events::
* The template bridge::
* Domain API::

Builtin Sphinx extensions

* sphinx.ext.autodoc: sphinx ext autodoc -- Include documentation from docstrings. Include documentation from docstrings
* sphinx.ext.autosummary: sphinx ext autosummary -- Generate autodoc summaries. Generate autodoc summaries
* sphinx.ext.doctest: sphinx ext doctest -- Test snippets in the documentation. Test snippets in the documentation
* sphinx.ext.intersphinx: sphinx ext intersphinx -- Link to other projects' documentation. Link to other projects' documentation
* Math support in Sphinx::
* sphinx.ext.graphviz: sphinx ext graphviz -- Add Graphviz graphs. Add Graphviz graphs
* sphinx.ext.inheritance_diagram: sphinx ext inheritance_diagram -- Include inheritance diagrams. Include inheritance diagrams
* sphinx.ext.refcounting: sphinx ext refcounting -- Keep track of reference counting behavior. Keep track of reference counting behavior
* sphinx.ext.ifconfig: sphinx ext ifconfig -- Include content based on configuration. Include content based on configuration
* sphinx.ext.coverage: sphinx ext coverage -- Collect doc coverage stats. Collect doc coverage stats
* sphinx.ext.todo: sphinx ext todo -- Support for todo items. Support for todo items
* sphinx.ext.extlinks: sphinx ext extlinks -- Markup to shorten external links. Markup to shorten external links
* sphinx.ext.viewcode: sphinx ext viewcode -- Add links to highlighted source code. Add links to highlighted source code
* sphinx.ext.linkcode: sphinx ext linkcode -- Add external links to source code. Add external links to source code
* sphinx.ext.oldcmarkup: sphinx ext oldcmarkup -- Compatibility extension for old C markup. Compatibility extension for old C markup

sphinx.ext.autodoc -- Include documentation from docstrings

* Docstring preprocessing::
* Skipping members::

sphinx.ext.autosummary -- Generate autodoc summaries

* sphinx-autogen: sphinx-autogen -- generate autodoc stub pages. generate autodoc stub pages
* Generating stub pages automatically::
* Customizing templates::

Math support in Sphinx

* sphinx.ext.pngmath: sphinx ext pngmath -- Render math as PNG images. Render math as PNG images
* sphinx.ext.mathjax: sphinx ext mathjax -- Render math via JavaScript. Render math via JavaScript
* sphinx.ext.jsmath: sphinx ext jsmath -- Render math via JavaScript. Render math via JavaScript

Third-party extensions

* Where to put your own extensions?::

Sphinx Web Support

* Web Support Quick Start::
* The WebSupport Class::
* Search Adapters::
* Storage Backends::

Web Support Quick Start

* Building Documentation Data::
* Integrating Sphinx Documents Into Your Webapp::
* Performing Searches::
* Comments & Proposals::
* Comment Moderation::

Integrating Sphinx Documents Into Your Webapp

* Authentication::

The WebSupport Class

* Methods::

Search Adapters

* BaseSearch Methods::

Storage Backends

* StorageBackend Methods::

Sphinx FAQ

* How do I...: How do I.
* Using Sphinx with...: Using Sphinx with.
* Epub info::
* Texinfo info::

Texinfo info

* Displaying Links::
* Notes::

Sphinx Developer's Guide

* Bug Reports and Feature Requests::
* Contributing to Sphinx::
* Coding Guide::

Contributing to Sphinx

* Getting Started::
* Core Developers::

Coding Guide

* Debugging Tips::

Changes in Sphinx

* Release 1.2 (in development): Release 1 2 in development.
* Release 1.1.3 (Mar 10, 2012): Release 1 1 3 Mar 10 2012.
* Release 1.1.2 (Nov 1, 2011): Release 1 1 2 Nov 1 2011 -- 1 1 1 is a silly version number anyway!. 1.1.1 is a silly version number anyway!
* Release 1.1.1 (Nov 1, 2011): Release 1 1 1 Nov 1 2011.
* Release 1.1 (Oct 9, 2011): Release 1 1 Oct 9 2011.
* Release 1.0.8 (Sep 23, 2011): Release 1 0 8 Sep 23 2011.
* Release 1.0.7 (Jan 15, 2011): Release 1 0 7 Jan 15 2011.
* Release 1.0.6 (Jan 04, 2011): Release 1 0 6 Jan 04 2011.
* Release 1.0.5 (Nov 12, 2010): Release 1 0 5 Nov 12 2010.
* Release 1.0.4 (Sep 17, 2010): Release 1 0 4 Sep 17 2010.
* Release 1.0.3 (Aug 23, 2010): Release 1 0 3 Aug 23 2010.
* Release 1.0.2 (Aug 14, 2010): Release 1 0 2 Aug 14 2010.
* Release 1.0.1 (Jul 27, 2010): Release 1 0 1 Jul 27 2010.
* Release 1.0 (Jul 23, 2010): Release 1 0 Jul 23 2010.
* Release 0.6.7 (Jun 05, 2010): Release 0 6 7 Jun 05 2010.
* Release 0.6.6 (May 25, 2010): Release 0 6 6 May 25 2010.
* Release 0.6.5 (Mar 01, 2010): Release 0 6 5 Mar 01 2010.
* Release 0.6.4 (Jan 12, 2010): Release 0 6 4 Jan 12 2010.
* Release 0.6.3 (Sep 03, 2009): Release 0 6 3 Sep 03 2009.
* Release 0.6.2 (Jun 16, 2009): Release 0 6 2 Jun 16 2009.
* Release 0.6.1 (Mar 26, 2009): Release 0 6 1 Mar 26 2009.
* Release 0.6 (Mar 24, 2009): Release 0 6 Mar 24 2009.
* Release 0.5.2 (Mar 24, 2009): Release 0 5 2 Mar 24 2009.
* Release 0.5.1 (Dec 15, 2008): Release 0 5 1 Dec 15 2008.
* Release 0.5 (Nov 23, 2008): Release 0 5 Nov 23 2008 -- Birthday release!. Birthday release!
* Release 0.4.3 (Oct 8, 2008): Release 0 4 3 Oct 8 2008.
* Release 0.4.2 (Jul 29, 2008): Release 0 4 2 Jul 29 2008.
* Release 0.4.1 (Jul 5, 2008): Release 0 4 1 Jul 5 2008.
* Release 0.4 (Jun 23, 2008): Release 0 4 Jun 23 2008.
* Release 0.3 (May 6, 2008): Release 0 3 May 6 2008.
* Release 0.2 (Apr 27, 2008): Release 0 2 Apr 27 2008.
* Release 0.1.61950 (Mar 26, 2008): Release 0 1 61950 Mar 26 2008.
* Release 0.1.61945 (Mar 26, 2008): Release 0 1 61945 Mar 26 2008.
* Release 0.1.61843 (Mar 24, 2008): Release 0 1 61843 Mar 24 2008.
* Release 0.1.61798 (Mar 23, 2008): Release 0 1 61798 Mar 23 2008.
* Release 0.1.61611 (Mar 21, 2008): Release 0 1 61611 Mar 21 2008.

Release 1.1 (Oct 9, 2011)

* Incompatible changes::
* Features added::

Release 1.0 (Jul 23, 2010)

* Incompatible changes: Incompatible changes<2>.
* Features added: Features added<2>.

Release 0.6 (Mar 24, 2009)

* New features added::

Release 0.5 (Nov 23, 2008) -- Birthday release!

* New features added: New features added<2>.
* Bugs fixed::

Release 0.4 (Jun 23, 2008)

* New features added: New features added<3>.
* Bugs fixed: Bugs fixed<2>.

Release 0.3 (May 6, 2008)

* New features added: New features added<4>.
* Bugs fixed: Bugs fixed<3>.

Release 0.2 (Apr 27, 2008)

* Incompatible changes: Incompatible changes<3>.
* New features added: New features added<5>.
* Bugs fixed: Bugs fixed<4>.

Projects using Sphinx

* Documentation using the default theme::
* Documentation using a customized version of the default theme::
* Documentation using the sphinxdoc theme::
* Documentation using another builtin theme::
* Documentation using a custom theme/integrated in a site::
* Homepages and other non-documentation sites::
* Books produced using Sphinx::


File: sphinx.info,  Node: Introduction,  Next: First Steps with Sphinx,  Prev: Top,  Up: Top

1 Introduction
**************

This is the documentation for the Sphinx documentation builder.  Sphinx
is a tool that translates a set of reStructuredText(1) source files
into various output formats, automatically producing cross-references,
indices etc.  That is, if you have a directory containing a bunch of
reST-formatted documents (and possibly subdirectories of docs in there
as well), Sphinx can generate a nicely-organized arrangement of HTML
files (in some other directory) for easy browsing and navigation.  But
from the same source, it can also generate a LaTeX file that you can
compile into a PDF version of the documents, or a PDF file directly
using rst2pdf(2).

  The focus is on hand-written documentation, rather than
auto-generated API docs.  Though there is support for that kind of docs
as well (which is intended to be freely mixed with hand-written
content), if you need pure API docs have a look at Epydoc(3), which
also understands reST.

* Menu:

* Conversion from other systems::
* Use with other systems::
* Prerequisites::
* Usage::

  ---------- Footnotes ----------

  (1) http://docutils.sf.net/rst.html

  (2) http://rst2pdf.googlecode.com

  (3) http://epydoc.sf.net/


File: sphinx.info,  Node: Conversion from other systems,  Next: Use with other systems,  Up: Introduction

1.1 Conversion from other systems
=================================

This section is intended to collect helpful hints for those wanting to
migrate to reStructuredText/Sphinx from other documentation systems.

   * Gerard Flanagan has written a script to convert pure HTML to reST;
     it can be found at the Python Package Index(1).

   * For converting the old Python docs to Sphinx, a converter was
     written which can be found at the Python SVN repository(2).  It
     contains generic code to convert Python-doc-style LaTeX markup to
     Sphinx reST.

   * Marcin Wojdyr has written a script to convert Docbook to reST with
     Sphinx markup; it is at Google Code(3).

   * Christophe de Vienne wrote a tool to convert from Open/LibreOffice
     documents to Sphinx: odt2sphinx(4).

   * To convert different markups, Pandoc(5) is a very helpful tool.

  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi/html2rest

  (2) http://svn.python.org/projects/doctools/converter

  (3) http://code.google.com/p/db2rst/

  (4) http://pypi.python.org/pypi/odt2sphinx/

  (5) http://johnmacfarlane.net/pandoc/


File: sphinx.info,  Node: Use with other systems,  Next: Prerequisites,  Prev: Conversion from other systems,  Up: Introduction

1.2 Use with other systems
==========================

See the *note pertinent section in the FAQ list: 28.


File: sphinx.info,  Node: Prerequisites,  Next: Usage,  Prev: Use with other systems,  Up: Introduction

1.3 Prerequisites
=================

Sphinx needs at least *Python 2.5* or *Python 3.1* to run, as well as
the docutils(1) and Jinja2(2) libraries.  Sphinx should work with
docutils version 0.7 or some (not broken) SVN trunk snapshot.  If you
like to have source code highlighting support, you must also install
the Pygments(3) library.

  ---------- Footnotes ----------

  (1) http://docutils.sf.net/

  (2) http://jinja.pocoo.org/

  (3) http://pygments.org/


File: sphinx.info,  Node: Usage,  Prev: Prerequisites,  Up: Introduction

1.4 Usage
=========

See *note First Steps with Sphinx: 2c. for an introduction.  It also
contains links to more advanced sections in this manual for the topics
it discusses.


File: sphinx.info,  Node: First Steps with Sphinx,  Next: Invocation of sphinx-build,  Prev: Introduction,  Up: Top

2 First Steps with Sphinx
*************************

This document is meant to give a tutorial-like overview of all common
tasks while using Sphinx.

  The green arrows designate "more info" links leading to advanced
sections about the described task.

* Menu:

* Setting up the documentation sources::
* Defining document structure::
* Adding content::
* Running the build::
* Documenting objects::
* Basic configuration::
* Autodoc::
* More topics to be covered::


File: sphinx.info,  Node: Setting up the documentation sources,  Next: Defining document structure,  Up: First Steps with Sphinx

2.1 Setting up the documentation sources
========================================

The root directory of a Sphinx collection of reStructuredText document
sources is called the *note source directory: 2f.  This directory also
contains the Sphinx configuration file `conf.py', where you can
configure all aspects of how Sphinx reads your sources and builds your
documentation.  (1)

  Sphinx comes with a script called *sphinx-quickstart* that sets up a
source directory and creates a default `conf.py' with the most useful
configuration values from a few questions it asks you.  Just run

    $ sphinx-quickstart

and answer its questions.  (Be sure to say yes to the "autodoc"
extension.)

  There is also an automatic "API documentation" generator called
*sphinx-apidoc*; see *note Invocation of sphinx-apidoc: 32. for details.

  ---------- Footnotes ----------

  (1) This is the usual lay-out.  However, `conf.py' can also live in
another directory, the *note configuration directory: 30.  See *note
Invocation of sphinx-build: 31.


File: sphinx.info,  Node: Defining document structure,  Next: Adding content,  Prev: Setting up the documentation sources,  Up: First Steps with Sphinx

2.2 Defining document structure
===============================

Let's assume you've run *sphinx-quickstart*.  It created a source
directory with `conf.py' and a master document, `index.rst' (if you
accepted the defaults).  The main function of the *note master
document: 34. is to serve as a welcome page, and to contain the root of
the "table of contents tree" (or _toctree_).  This is one of the main
things that Sphinx adds to reStructuredText, a way to connect multiple
files to a single hierarchy of documents.

reStructuredText directives
...........................

`toctree' is a reStructuredText _directive_, a very versatile piece of
markup.  Directives can have arguments, options and content.

  _Arguments_ are given directly after the double colon following the
directive's name.  Each directive decides whether it can have
arguments, and how many.

  _Options_ are given after the arguments, in form of a "field list".
The `maxdepth' is such an option for the `toctree' directive.

  _Content_ follows the options or arguments after a blank line.  Each
directive decides whether to allow content, and what to do with it.

  A common gotcha with directives is that *the first line of the
content must be indented to the same level as the options are*.

  The toctree directive initially is empty, and looks like this:

    .. toctree::
       :maxdepth: 2

You add documents listing them in the _content_ of the directive:

    .. toctree::
       :maxdepth: 2

       intro
       tutorial
       ...

This is exactly how the toctree for this documentation looks.  The
documents to include are given as *note document name: 35.s, which in
short means that you leave off the file name extension and use slashes
as directory separators.

 [image src="more.png" alt="more info" ]  Read more about *note
the toctree directive: 36.

  You can now create the files you listed in the toctree and add
content, and their section titles will be inserted (up to the
"maxdepth" level) at the place where the toctree directive is placed.
Also, Sphinx now knows about the order and hierarchy of your documents.
(They may contain `toctree' directives themselves, which means you can
create deeply nested hierarchies if necessary.)


File: sphinx.info,  Node: Adding content,  Next: Running the build,  Prev: Defining document structure,  Up: First Steps with Sphinx

2.3 Adding content
==================

In Sphinx source files, you can use most features of standard
reStructuredText.  There are also several features added by Sphinx.
For example, you can add cross-file references in a portable way (which
works for all output types) using the *note ref: 38. role.

  For an example, if you are viewing the HTML version you can look at
the source for this document - use the "Show Source" link in the
sidebar.

 [image src="more.png" alt="more info" ]  See *note
reStructuredText Primer: 39. for a more in-depth introduction to
reStructuredText and *note Sphinx Markup Constructs: 3a. for a full
list of markup added by Sphinx.


File: sphinx.info,  Node: Running the build,  Next: Documenting objects,  Prev: Adding content,  Up: First Steps with Sphinx

2.4 Running the build
=====================

Now that you have added some files and content, let's make a first
build of the docs.  A build is started with the *sphinx-build* program,
called like this:

    $ sphinx-build -b html sourcedir builddir

where _sourcedir_ is the *note source directory: 2f, and _builddir_ is
the directory in which you want to place the built documentation.  The
`-b' option selects a builder; in this example Sphinx will build HTML
files.

 [image src="more.png" alt="more info" ]  See *note Invocation of
sphinx-build: 31. for all options that *sphinx-build* supports.

  However, *sphinx-quickstart* script creates a `Makefile' and a
`make.bat' which make life even easier for you:  with them you only need
to run

    $ make html

to build HTML docs in the build directory you chose.  Execute `make'
without an argument to see which targets are available.

     How do I generate PDF documents?: `make latexpdf' runs the *note
     LaTeX builder: 3c. and readily invokes the pdfTeX toolchain for
     you.


File: sphinx.info,  Node: Documenting objects,  Next: Basic configuration,  Prev: Running the build,  Up: First Steps with Sphinx

2.5 Documenting objects
=======================

One of Sphinx' main objectives is easy documentation of _objects_ (in a
very general sense) in any _domain_.  A domain is a collection of object
types that belong together, complete with markup to create and reference
descriptions of these objects.

  The most prominent domain is the Python domain.  To e.g. document the
Python built-in function `enumerate()', you would add this to one of
your source files:

    .. py:function:: enumerate(sequence[, start=0])

       Return an iterator that yields tuples of an index and an item of the
       *sequence*. (And so on.)

This is rendered like this:

 -- Function: enumerate (sequence[, start=0])
     Return an iterator that yields tuples of an index and an item of
     the _sequence_. (And so on.)

  The argument of the directive is the _signature_ of the object you
describe, the content is the documentation for it.  Multiple signatures
can be given, each in its own line.

  The Python domain also happens to be the default domain, so you don't
need to prefix the markup with the domain name:

    .. function:: enumerate(sequence[, start=0])

       ...

does the same job if you keep the default setting for the default
domain.

  There are several more directives for documenting other types of
Python objects, for example *note py;class: 3f. or *note py;method: 40.
There is also a cross-referencing _role_ for each of these object
types.  This markup will create a link to the documentation of
`enumerate()':

    The :py:func:`enumerate` function can be used for ...

And here is the proof: A link to *note enumerate(): 3e.

  Again, the `py:' can be left out if the Python domain is the default
one.  It doesn't matter which file contains the actual documentation
for `enumerate()'; Sphinx will find it and create a link to it.

  Each domain will have special rules for how the signatures can look
like, and make the formatted output look pretty, or add specific
features like links to parameter types, e.g. in the C/C++ domains.

 [image src="more.png" alt="more info" ]  See *note Sphinx
Domains: 41. for all the available domains and their directives/roles.


File: sphinx.info,  Node: Basic configuration,  Next: Autodoc,  Prev: Documenting objects,  Up: First Steps with Sphinx

2.6 Basic configuration
=======================

Earlier we mentioned that the `conf.py' file controls how Sphinx
processes your documents.  In that file, which is executed as a Python
source file, you assign configuration values.  For advanced users:
since it is executed by Sphinx, you can do non-trivial tasks in it,
like extending `sys.path' or importing a module to find out the version
your are documenting.

  The config values that you probably want to change are already put
into the `conf.py' by *sphinx-quickstart* and initially commented out
(with standard Python syntax: a `#' comments the rest of the line).  To
change the default value, remove the hash sign and modify the value.
To customize a config value that is not automatically added by
*sphinx-quickstart*, just add an additional assignment.

  Keep in mind that the file uses Python syntax for strings, numbers,
lists and so on.  The file is saved in UTF-8 by default, as indicated
by the encoding declaration in the first line.  If you use non-ASCII
characters in any string value, you need to use Python Unicode strings
(like `project = u'Exposé'').

 [image src="more.png" alt="more info" ]  See *note The build
configuration file: 43. for documentation of all available config
values.


File: sphinx.info,  Node: Autodoc,  Next: More topics to be covered,  Prev: Basic configuration,  Up: First Steps with Sphinx

2.7 Autodoc
===========

When documenting Python code, it is common to put a lot of
documentation in the source files, in documentation strings.  Sphinx
supports the inclusion of docstrings from your modules with an
_extension_ (an extension is a Python module that provides additional
features for Sphinx projects) called "autodoc".

  In order to use autodoc, you need to activate it in `conf.py' by
putting the string `'sphinx.ext.autodoc'' into the list assigned to the
*note extensions: 45. config value.  Then, you have a few additional
directives at your disposal.

  For example, to document the function `io.open()', reading its
signature and docstring from the source file, you'd write this:

    .. autofunction:: io.open

You can also document whole classes or even modules automatically,
using member options for the auto directives, like

    .. automodule:: io
       :members:

autodoc needs to import your modules in order to extract the docstrings.
Therefore, you must add the appropriate path to `sys.path' in your
`conf.py'.

 [image src="more.png" alt="more info" ]  See *note
sphinx.ext.autodoc: 11. for the complete description of the features of
autodoc.


File: sphinx.info,  Node: More topics to be covered,  Prev: Autodoc,  Up: First Steps with Sphinx

2.8 More topics to be covered
=============================

   - Other extensions (math, intersphinx, viewcode, doctest)

   - Static files

   - Selecting a theme

   - Templating

   - Using extensions

   - Writing extensions


File: sphinx.info,  Node: Invocation of sphinx-build,  Next: Invocation of sphinx-apidoc,  Prev: First Steps with Sphinx,  Up: Top

3 Invocation of sphinx-build
****************************

The *sphinx-build* script builds a Sphinx documentation set.  It is
called like this:

    $ sphinx-build [options] sourcedir builddir [filenames]

where _sourcedir_ is the *note source directory: 2f, and _builddir_ is
the directory in which you want to place the built documentation.  Most
of the time, you don't need to specify any _filenames_.

  The *sphinx-build* script has several options:

 -- Option: -b buildername
     The most important option: it selects a builder.  The most common
     builders are:

    *html*
          Build HTML pages.  This is the default builder.

    *dirhtml*
          Build HTML pages, but with a single directory per document.
          Makes for prettier URLs (no `.html') if served from a
          webserver.

    *singlehtml*
          Build a single HTML with the whole content.

    *htmlhelp*, *qthelp*, *devhelp*, *epub*
          Build HTML files with additional information for building a
          documentation collection in one of these formats.

    *latex*
          Build LaTeX sources that can be compiled to a PDF document
          using *pdflatex*.

    *man*
          Build manual pages in groff format for UNIX systems.

    *texinfo*
          Build Texinfo files that can be processed into Info files
          using *makeinfo*.

    *text*
          Build plain text files.

    *gettext*
          Build gettext-style message catalogs (`.pot' files).

    *doctest*
          Run all doctests in the documentation, if the *note doctest:
          14.  extension is enabled.

    *linkcheck*
          Check the integrity of all external links.

    *xml*
          Build Docutils-native XML files.

    *pseudoxml*
          Build compact pretty-printed "pseudo-XML" files displaying the
          internal structure of the intermediate document trees.

     See *note Available builders: 4a. for a list of all builders
     shipped with Sphinx.  Extensions can add their own builders.

 -- Option: -a
     If given, always write all output files.  The default is to only
     write output files for new and changed source files.  (This may
     not apply to all builders.)

 -- Option: -E
     Don't use a saved *note environment: 4d. (the structure caching all
     cross-references), but rebuild it completely.  The default is to
     only read and parse source files that are new or have changed
     since the last run.

 -- Option: -t tag
     Define the tag _tag_.  This is relevant for *note only: 4f.
     directives that only include their content if this tag is set.

     New in version 0.6.

 -- Option: -d path
     Since Sphinx has to read and parse all source files before it can
     write an output file, the parsed source files are cached as
     "doctree pickles".  Normally, these files are put in a directory
     called `.doctrees' under the build directory; with this option you
     can select a different cache directory (the doctrees can be shared
     between all builders).

 -- Option: -c path
     Don't look for the `conf.py' in the source directory, but use the
     given configuration directory instead.  Note that various other
     files and paths given by configuration values are expected to be
     relative to the configuration directory, so they will have to be
     present at this location too.

     New in version 0.3.

 -- Option: -C
     Don't look for a configuration file; only take options via the
     `-D' option.

     New in version 0.5.

 -- Option: -D setting=value
     Override a configuration value set in the `conf.py' file.  The
     value must be a string or dictionary value.  For the latter,
     supply the setting name and key like this: `-D
     latex_elements.docclass=scrartcl'.  For boolean values, use `0' or
     `1' as the value.

     Changed in version 0.6: The value can now be a dictionary value.

 -- Option: -A name=value
     Make the _name_ assigned to _value_ in the HTML templates.

     New in version 0.5.

 -- Option: -n
     Run in nit-picky mode.  Currently, this generates warnings for all
     missing references.

 -- Option: -N
     Do not emit colored output.  (On Windows, colored output is
     disabled in any case.)

 -- Option: -v
     Increase verbosity.  This option can be given up to three times to
     get more debug output.  It implies *note -T: 58.

     New in version 1.2.

 -- Option: -q
     Do not output anything on standard output, only write warnings and
     errors to standard error.

 -- Option: -Q
     Do not output anything on standard output, also suppress warnings.
     Only errors are written to standard error.

 -- Option: -w file
     Write warnings (and errors) to the given file, in addition to
     standard error.

 -- Option: -W
     Turn warnings into errors.  This means that the build stops at the
     first warning and `sphinx-build' exits with exit status 1.

 -- Option: -T
     Display the full traceback when an unhandled exception occurs.
     Otherwise, only a summary is displayed and the traceback
     information is saved to a file for further analysis.

     New in version 1.2.

 -- Option: -P
     (Useful for debugging only.)  Run the Python debugger, `pdb', if an
     unhandled exception occurs while building.

 -- Option: -h, -help, -version
     Display usage summary or Sphinx version.

     New in version 1.2.

  You can also give one or more filenames on the command line after the
source and build directories.  Sphinx will then try to build only these
output files (and their dependencies).

* Menu:

* Makefile options::


File: sphinx.info,  Node: Makefile options,  Up: Invocation of sphinx-build

3.1 Makefile options
====================

The `Makefile' and `make.bat' files created by *sphinx-quickstart*
usually run *sphinx-build* only with the *note -b: 49. and *note -d:
50. options.  However, they support the following variables to
customize behavior:

 -- Describe: PAPER
     The value for *note latex_paper_size: 60.

 -- Describe: SPHINXBUILD
     The command to use instead of `sphinx-build'.

 -- Describe: BUILDDIR
     The build directory to use instead of the one chosen in
     *sphinx-quickstart*.

 -- Describe: SPHINXOPTS
     Additional options for *sphinx-build*.


File: sphinx.info,  Node: Invocation of sphinx-apidoc,  Next: reStructuredText Primer,  Prev: Invocation of sphinx-build,  Up: Top

4 Invocation of sphinx-apidoc
*****************************

The *sphinx-apidoc* generates completely automatic API documentation
for a Python package.  It is called like this:

    $ sphinx-apidoc [options] -o outputdir packagedir [pathnames]

where _packagedir_ is the path to the package to document, and
_outputdir_ is the directory where the generated sources are placed.
Any _pathnames_ given are paths to be excluded ignored during
generation.

  The *sphinx-apidoc* script has several options:

 -- Option: -o outputdir
     Gives the directory in which to place the generated output.

 -- Option: -f, -force
     Normally, sphinx-apidoc does not overwrite any files.  Use this
     option to force the overwrite of all files that it generates.

 -- Option: -n, -dry-run
     With this option given, no files will be written at all.

 -- Option: -s suffix
     This option selects the file name suffix of output files.  By
     default, this is `rst'.

 -- Option: -d maxdepth
     This sets the maximum depth of the table of contents, if one is
     generated.

 -- Option: -l, -follow-links
     This option makes sphinx-apidoc follow symbolic links when
     recursing the filesystem to discover packages and modules. You may
     need it if you want to generate documentation from a source
     directory managed by collective.recipe.omelette(1).  By default,
     symbolic links are skipped.

     New in version 1.2.

 -- Option: -T, -no-toc
     This prevents the generation of a table-of-contents file
     `modules.rst'.  This has no effect when `--full' is given.

 -- Option: -F, -full
     This option makes sphinx-apidoc create a full Sphinx project,
     using the same mechanism as *sphinx-quickstart*.  Most
     configuration values are set to default values, but you can
     influence the most important ones using the following options.

 -- Option: -H project
     Sets the project name to put in generated files (see *note
     project: 6b.).

 -- Option: -A author
     Sets the author name(s) to put in generated files (see *note
     copyright: 6d.).

 -- Option: -V version
     Sets the project version to put in generated files (see *note
     version: 6f.).

 -- Option: -R release
     Sets the project release to put in generated files (see *note
     release: 71.).

  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi/collective.recipe.omelette/


File: sphinx.info,  Node: reStructuredText Primer,  Next: Sphinx Markup Constructs,  Prev: Invocation of sphinx-apidoc,  Up: Top

5 reStructuredText Primer
*************************

This section is a brief introduction to reStructuredText (reST)
concepts and syntax, intended to provide authors with enough
information to author documents productively.  Since reST was designed
to be a simple, unobtrusive markup language, this will not take too
long.

The authoritative reStructuredText User Documentation.  The "ref" links in this
-------------------------------------------------------------------------------

document link to the description of the individual constructs in the
reST reference.

  The authoritative reStructuredText User Documentation(1).  The "ref"
links in this document link to the description of the individual
constructs in the reST reference.

* Menu:

* Paragraphs::
* Inline markup::
* Lists and Quote-like blocks::
* Source Code::
* Tables::
* Hyperlinks::
* Sections::
* Explicit Markup::
* Directives::
* Images::
* Footnotes::
* Citations::
* Substitutions::
* Comments::
* Source encoding::
* Gotchas::

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/rst.html


File: sphinx.info,  Node: Paragraphs,  Next: Inline markup,  Up: reStructuredText Primer

5.1 Paragraphs
==============

The paragraph (ref(1)) is the most basic block in a reST document.
Paragraphs are simply chunks of text separated by one or more blank
lines.  As in Python, indentation is significant in reST, so all lines
of the same paragraph must be left-aligned to the same level of
indentation.

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#paragraphs


File: sphinx.info,  Node: Inline markup,  Next: Lists and Quote-like blocks,  Prev: Paragraphs,  Up: reStructuredText Primer

5.2 Inline markup
=================

The standard reST inline markup is quite simple: use

   * one asterisk: `*text*' for emphasis (italics),

   * two asterisks: `**text**' for strong emphasis (boldface), and

   * backquotes: ```text``' for code samples.

  If asterisks or backquotes appear in running text and could be
confused with inline markup delimiters, they have to be escaped with a
backslash.

  Be aware of some restrictions of this markup:

   * it may not be nested,

   * content may not start or end with whitespace: `* text*' is wrong,

   * it must be separated from surrounding text by non-word characters.
     Use a backslash escaped space to work around that: `thisis\ *one*\
     word'.

  These restrictions may be lifted in future versions of the docutils.

  reST also allows for custom "interpreted text roles"', which signify
that the enclosed text should be interpreted in a specific way.  Sphinx
uses this to provide semantic markup and cross-referencing of
identifiers, as described in the appropriate section.  The general
syntax is `:rolename:`content`'.

  Standard reST provides the following roles:

   * emphasis(1) - alternate spelling for `*emphasis*'

   * strong(2) - alternate spelling for `**strong**'

   * literal(3) - alternate spelling for ```literal``'

   * subscript(4) - subscript text

   * superscript(5) - superscript text

   * title-reference(6) - for titles of books, periodicals, and other
     materials

  See *note Inline markup: 77. for roles added by Sphinx.

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/docs/ref/rst/roles.html#emphasis

  (2) http://docutils.sourceforge.net/docs/ref/rst/roles.html#strong

  (3) http://docutils.sourceforge.net/docs/ref/rst/roles.html#literal

  (4) http://docutils.sourceforge.net/docs/ref/rst/roles.html#subscript

  (5)
http://docutils.sourceforge.net/docs/ref/rst/roles.html#superscript

  (6)
http://docutils.sourceforge.net/docs/ref/rst/roles.html#title-reference


File: sphinx.info,  Node: Lists and Quote-like blocks,  Next: Source Code,  Prev: Inline markup,  Up: reStructuredText Primer

5.3 Lists and Quote-like blocks
===============================

List markup (ref(1)) is natural: just place an asterisk at the start of
a paragraph and indent properly.  The same goes for numbered lists;
they can also be autonumbered using a `#' sign:

    * This is a bulleted list.
    * It has two items, the second
      item uses two lines.

    1. This is a numbered list.
    2. It has two items too.

    #. This is a numbered list.
    #. It has two items too.

Nested lists are possible, but be aware that they must be separated
from the parent list items by blank lines:

    * this is
    * a list

      * with a nested list
      * and some subitems

    * and here the parent list continues

Definition lists (ref(2)) are created as follows:

    term (up to a line of text)
       Definition of the term, which must be indented

       and can even consist of multiple paragraphs

    next term
       Description.

Note that the term cannot have more than one line of text.

  Quoted paragraphs (ref(3)) are created by just indenting them more
than the surrounding paragraphs.

  Line blocks (ref(4)) are a way of preserving line breaks:

    | These lines are
    | broken exactly like in
    | the source file.

There are also several more special blocks available:

   * field lists (ref(5))

   * option lists (ref(6))

   * quoted literal blocks (ref(7))

   * doctest blocks (ref(8))

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#bullet-lists

  (2)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#definition-lists

  (3)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#block-quotes

  (4)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#line-blocks

  (5)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists

  (6)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#option-lists

  (7)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#quoted-literal-blocks

  (8)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#doctest-blocks


File: sphinx.info,  Node: Source Code,  Next: Tables,  Prev: Lists and Quote-like blocks,  Up: reStructuredText Primer

5.4 Source Code
===============

Literal code blocks (ref(1)) are introduced by ending a paragraph with
the special marker `::'.  The literal block must be indented (and, like
all paragraphs, separated from the surrounding ones by blank lines):

    This is a normal text paragraph. The next paragraph is a code sample::

       It is not processed in any way, except
       that the indentation is removed.

       It can span multiple lines.

    This is a normal text paragraph again.

The handling of the `::' marker is smart:

   * If it occurs as a paragraph of its own, that paragraph is
     completely left out of the document.

   * If it is preceded by whitespace, the marker is removed.

   * If it is preceded by non-whitespace, the marker is replaced by a
     single colon.

  That way, the second sentence in the above example's first paragraph
would be rendered as "The next paragraph is a code sample:".

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#literal-blocks


File: sphinx.info,  Node: Tables,  Next: Hyperlinks,  Prev: Source Code,  Up: reStructuredText Primer

5.5 Tables
==========

Two forms of tables are supported.  For _grid tables_ (ref(1)), you
have to "paint" the cell grid yourself.  They look like this:

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | ...        | ...      |          |
    +------------------------+------------+----------+----------+

_Simple tables_ (ref(2)) are easier to write, but limited: they must
contain more than one row, and the first column cannot contain multiple
lines.  They look like this:

    =====  =====  =======
    A      B      A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======


  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables

  (2)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables


File: sphinx.info,  Node: Hyperlinks,  Next: Sections,  Prev: Tables,  Up: reStructuredText Primer

5.6 Hyperlinks
==============

* Menu:

* External links::
* Internal links::


File: sphinx.info,  Node: External links,  Next: Internal links,  Up: Hyperlinks

5.6.1 External links
--------------------

Use ``Link text <http://example.com/>`_' for inline web links.  If the
link text should be the web address, you don't need special markup at
all, the parser finds links and mail addresses in ordinary text.

  You can also separate the link and the target definition (ref(1)),
like this:

    This is a paragraph that contains `a link`_.

    .. _a link: http://example.com/


  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-targets


File: sphinx.info,  Node: Internal links,  Prev: External links,  Up: Hyperlinks

5.6.2 Internal links
--------------------

Internal linking is done via a special reST role provided by Sphinx,
see the section on specific markup, *note Cross-referencing arbitrary
locations: 7f.


File: sphinx.info,  Node: Sections,  Next: Explicit Markup,  Prev: Hyperlinks,  Up: reStructuredText Primer

5.7 Sections
============

Section headers (ref(1)) are created by underlining (and optionally
overlining) the section title with a punctuation character, at least as
long as the text:

    =================
    This is a heading
    =================

Normally, there are no heading levels assigned to certain characters as
the structure is determined from the succession of headings.  However,
for the Python documentation, this convention is used which you may
follow:

   * `#' with overline, for parts

   * `*' with overline, for chapters

   * `=', for sections

   * `-', for subsections

   * `^', for subsubsections

   * `"', for paragraphs

  Of course, you are free to use your own marker characters (see the
reST documentation), and use a deeper nesting level, but keep in mind
that most target formats (HTML, LaTeX) have a limited supported nesting
depth.

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#sections


File: sphinx.info,  Node: Explicit Markup,  Next: Directives,  Prev: Sections,  Up: reStructuredText Primer

5.8 Explicit Markup
===================

"Explicit markup" (ref(1)) is used in reST for most constructs that
need special handling, such as footnotes, specially-highlighted
paragraphs, comments, and generic directives.

  An explicit markup block begins with a line starting with `..'
followed by whitespace and is terminated by the next paragraph at the
same level of indentation.  (There needs to be a blank line between
explicit markup and normal paragraphs.  This may all sound a bit
complicated, but it is intuitive enough when you write it.)

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#explicit-markup-blocks


File: sphinx.info,  Node: Directives,  Next: Images,  Prev: Explicit Markup,  Up: reStructuredText Primer

5.9 Directives
==============

A directive (ref(1)) is a generic block of explicit markup.  Besides
roles, it is one of the extension mechanisms of reST, and Sphinx makes
heavy use of it.

  Docutils supports the following directives:

   * Admonitions: attention(2), caution(3), danger(4), error(5),
     hint(6), important(7), note(8), tip(9), warning(10) and the generic
     admonition(11).  (Most themes style only "note" and "warning"
     specially.)

   * Images:

        - image(12) (see also *note Images: 84. below)

        - figure(13) (an image with caption and optional legend)

   * Additional body elements:

        - contents(14) (a local, i.e. for the current file only, table
          of contents)

        - container(15) (a container with a custom class, useful to
          generate an outer `<div>' in HTML)

        - rubric(16) (a heading without relation to the document
          sectioning)

        - topic(17), sidebar(18) (special highlighted body elements)

        - parsed-literal(19) (literal block that supports inline markup)

        - epigraph(20) (a block quote with optional attribution line)

        - highlights(21), pull-quote(22) (block quotes with their own
          class attribute)

        - compound(23) (a compound paragraph)

   * Special tables:

        - table(24) (a table with title)

        - csv-table(25) (a table generated from comma-separated values)

        - list-table(26) (a table generated from a list of lists)

   * Special directives:

        - raw(27) (include raw target-format markup)

        - include(28) (include reStructuredText from another file) - in
          Sphinx, when given an absolute include file path, this
          directive takes it as relative to the source directory

        - class(29) (assign a class attribute to the next element) (30)

   * HTML specifics:

        - meta(31) (generation of HTML `<meta>' tags)

        - title(32) (override document title)

   * Influencing markup:

        - default-role(33) (set a new default role)

        - role(34) (create a new role)

     Since these are only per-file, better use Sphinx' facilities for
     setting the *note default_role: 85.

  Do _not_ use the directives sectnum(35), header(36) and footer(37).

  Directives added by Sphinx are described in *note Sphinx Markup
Constructs: 3a.

  Basically, a directive consists of a name, arguments, options and
content. (Keep this terminology in mind, it is used in the next chapter
describing custom directives.)  Looking at this example,

    .. function:: foo(x)
                  foo(y, z)
       :module: some.module.name

       Return a line of text input from the user.

`function' is the directive name.  It is given two arguments here, the
remainder of the first line and the second line, as well as one option
`module' (as you can see, options are given in the lines immediately
following the arguments and indicated by the colons).  Options must be
indented to the same level as the directive content.

  The directive content follows after a blank line and is indented
relative to the directive start.

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#directives

  (2)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#attention

  (3)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#caution

  (4)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#danger

  (5) http://docutils.sourceforge.net/docs/ref/rst/directives.html#error

  (6) http://docutils.sourceforge.net/docs/ref/rst/directives.html#hint

  (7)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#important

  (8) http://docutils.sourceforge.net/docs/ref/rst/directives.html#note

  (9) http://docutils.sourceforge.net/docs/ref/rst/directives.html#tip

  (10)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#warning

  (11)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#admonitions

  (12)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#image

  (13)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure

  (14)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table-of-contents

  (15)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#container

  (16)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#rubric

  (17)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#topic

  (18)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#sidebar

  (19)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#parsed-literal

  (20)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#epigraph

  (21)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#highlights

  (22)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#pull-quote

  (23)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#compound-paragraph

  (24)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table

  (25)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table

  (26)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#list-table

  (27)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#raw-data-pass-through

  (28)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#include

  (29)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#class

  (30) When the default domain contains a `class' directive, this
directive will be shadowed.  Therefore, Sphinx re-exports it as
`rst-class'.

  (31) http://docutils.sourceforge.net/docs/ref/rst/directives.html#meta

  (32)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#metadata-document-title

  (33)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#default-role

  (34) http://docutils.sourceforge.net/docs/ref/rst/directives.html#role

  (35)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#sectnum

  (36)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#header

  (37)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#footer


File: sphinx.info,  Node: Images,  Next: Footnotes,  Prev: Directives,  Up: reStructuredText Primer

5.10 Images
===========

reST supports an image directive (ref(1)), used like so:

    .. image:: gnu.png
       (options)

When used within Sphinx, the file name given (here `gnu.png') must
either be relative to the source file, or absolute which means that
they are relative to the top source directory.  For example, the file
`sketch/spam.rst' could refer to the image `images/spam.png' as
`../images/spam.png' or `/images/spam.png'.

  Sphinx will automatically copy image files over to a subdirectory of
the output directory on building (e.g. the `_static' directory for HTML
output.)

  Interpretation of image size options (`width' and `height') is as
follows: if the size has no unit or the unit is pixels, the given size
will only be respected for output channels that support pixels (i.e.
not in LaTeX output).  Other units (like `pt' for points) will be used
for HTML and LaTeX output.

  Sphinx extends the standard docutils behavior by allowing an asterisk
for the extension:

    .. image:: gnu.*

Sphinx then searches for all images matching the provided pattern and
determines their type.  Each builder then chooses the best image out of
these candidates.  For instance, if the file name `gnu.*' was given and
two files `gnu.pdf' and `gnu.png' existed in the source tree, the LaTeX
builder would choose the former, while the HTML builder would prefer
the latter.

  Changed in version 0.4: Added the support for file names ending in an
asterisk.

  Changed in version 0.6: Image paths can now be absolute.

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/docs/ref/rst/directives.html#image


File: sphinx.info,  Node: Footnotes,  Next: Citations,  Prev: Images,  Up: reStructuredText Primer

5.11 Footnotes
==============

For footnotes (ref(1)), use `[#name]_' to mark the footnote location,
and add the footnote body at the bottom of the document after a
"Footnotes" rubric heading, like so:

    Lorem ipsum [#f1]_ dolor sit amet ... [#f2]_

    .. rubric:: Footnotes

    .. [#f1] Text of the first footnote.
    .. [#f2] Text of the second footnote.

You can also explicitly number the footnotes (`[1]_') or use
auto-numbered footnotes without names (`[#]_').

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#footnotes


File: sphinx.info,  Node: Citations,  Next: Substitutions,  Prev: Footnotes,  Up: reStructuredText Primer

5.12 Citations
==============

Standard reST citations (ref(1)) are supported, with the additional
feature that they are "global", i.e. all citations can be referenced
from all files.  Use them like so:

    Lorem ipsum [Ref]_ dolor sit amet.

    .. [Ref] Book or article reference, URL or whatever.

Citation usage is similar to footnote usage, but with a label that is
not numeric or begins with `#'.

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#citations


File: sphinx.info,  Node: Substitutions,  Next: Comments,  Prev: Citations,  Up: reStructuredText Primer

5.13 Substitutions
==================

reST supports "substitutions" (ref(1)), which are pieces of text and/or
markup referred to in the text by `|name|'.  They are defined like
footnotes with explicit markup blocks, like this:

    .. |name| replace:: replacement *text*

or this:

    .. |caution| image:: warning.png
                 :alt: Warning!

See the reST reference for substitutions(2) for details.

  If you want to use some substitutions for all documents, put them into
*note rst_prolog: 89. or put them into a separate file and include it
into all documents you want to use them in, using the `include'
directive.  (Be sure to give the include file a file name extension
differing from that of other source files, to avoid Sphinx finding it
as a standalone document.)

  Sphinx defines some default substitutions, see *note Substitutions:
8a.

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions

  (2)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions


File: sphinx.info,  Node: Comments,  Next: Source encoding,  Prev: Substitutions,  Up: reStructuredText Primer

5.14 Comments
=============

Every explicit markup block which isn't a valid markup construct (like
the footnotes above) is regarded as a comment (ref(1)).  For example:

    .. This is a comment.

You can indent text after a comment start to form multiline comments:

    ..
       This whole indented block
       is a comment.

       Still in the comment.


  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#comments


File: sphinx.info,  Node: Source encoding,  Next: Gotchas,  Prev: Comments,  Up: reStructuredText Primer

5.15 Source encoding
====================

Since the easiest way to include special characters like em dashes or
copyright signs in reST is to directly write them as Unicode
characters, one has to specify an encoding.  Sphinx assumes source
files to be encoded in UTF-8 by default; you can change this with the
*note source_encoding: 8d. config value.


File: sphinx.info,  Node: Gotchas,  Prev: Source encoding,  Up: reStructuredText Primer

5.16 Gotchas
============

There are some problems one commonly runs into while authoring reST
documents:

   * *Separation of inline markup:* As said above, inline markup spans
     must be separated from the surrounding text by non-word
     characters, you have to use a backslash-escaped space to get
     around that.  See the reference(1) for the details.

   * *No nested inline markup:* Something like `*see :func:`foo`*' is
     not possible.

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions


File: sphinx.info,  Node: Sphinx Markup Constructs,  Next: Sphinx Domains,  Prev: reStructuredText Primer,  Up: Top

6 Sphinx Markup Constructs
**************************

Sphinx adds a lot of new directives and interpreted text roles to
standard reST markup(1).  This section contains the reference material
for these facilities.

* Menu:

* The TOC tree::
* Paragraph-level markup::
* Table-of-contents markup::
* Glossary::
* Grammar production displays::
* Showing code examples::
* Inline markup: Inline markup<2>.
* Miscellaneous markup::

The TOC tree

* Special names::

Showing code examples

* Line numbers::
* Includes::

Inline markup

* Cross-referencing syntax::
* Other semantic markup::
* Substitutions: Substitutions<2>.

Cross-referencing syntax

* Cross-referencing objects::
* Cross-referencing arbitrary locations::
* Cross-referencing documents::
* Referencing downloadable files::
* Cross-referencing other items of interest::

Miscellaneous markup

* File-wide metadata::
* Meta-information markup::
* Index-generating markup::
* Including content based on tags::
* Tables: Tables<2>.

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html


File: sphinx.info,  Node: The TOC tree,  Next: Paragraph-level markup,  Up: Sphinx Markup Constructs

6.1 The TOC tree
================

Since reST does not have facilities to interconnect several documents,
or split documents into multiple output files, Sphinx uses a custom
directive to add relations between the single files the documentation
is made of, as well as tables of contents.  The `toctree' directive is
the central element.

     Note: Simple "inclusion" of one file in another can be done with
     the include(1) directive.

 -- Restructuredtext Directive: .. toctree::
     This directive inserts a "TOC tree" at the current location, using
     the individual TOCs (including "sub-TOC trees") of the documents
     given in the directive body.  Relative document names (not
     beginning with a slash) are relative to the document the directive
     occurs in, absolute names are relative to the source directory.  A
     numeric `maxdepth' option may be given to indicate the depth of
     the tree; by default, all levels are included. (2)

     Consider this example (taken from the Python docs' library
     reference index):

         .. toctree::
            :maxdepth: 2

            intro
            strings
            datatypes
            numeric
            (many more documents listed here)

     This accomplishes two things:

        * Tables of contents from all those documents are inserted,
          with a maximum depth of two, that means one nested heading.
          `toctree' directives in those documents are also taken into
          account.

        * Sphinx knows that the relative order of the documents `intro',
          `strings' and so forth, and it knows that they are children
          of the shown document, the library index.  From this
          information it generates "next chapter", "previous chapter"
          and "parent chapter" links.

     *Entries*

     Document titles in the *note toctree: 93. will be automatically
     read from the title of the referenced document. If that isn't what
     you want, you can specify an explicit title and target using a
     similar syntax to reST hyperlinks (and Sphinx's *note
     cross-referencing syntax: 95.). This looks like:

         .. toctree::

            intro
            All about strings <strings>
            datatypes

     The second line above will link to the `strings' document, but
     will use the title "All about strings" instead of the title of the
     `strings' document.

     You can also add external links, by giving an HTTP URL instead of
     a document name.

     *Section numbering*

     If you want to have section numbers even in HTML output, give the
     toctree a `numbered' option.  For example:

         .. toctree::
            :numbered:

            foo
            bar

     Numbering then starts at the heading of `foo'.  Sub-toctrees are
     automatically numbered (don't give the `numbered' flag to those).

     Numbering up to a specific depth is also possible, by giving the
     depth as a numeric argument to `numbered'.

     *Additional options*

     If you want only the titles of documents in the tree to show up,
     not other headings of the same level, you can use the `titlesonly'
     option:

         .. toctree::
            :titlesonly:

            foo
            bar

     You can use "globbing" in toctree directives, by giving the `glob'
     flag option.  All entries are then matched against the list of
     available documents, and matches are inserted into the list
     alphabetically.  Example:

         .. toctree::
            :glob:

            intro*
            recipe/*
            *

     This includes first all documents whose names start with `intro',
     then all documents in the `recipe' folder, then all remaining
     documents (except the one containing the directive, of course.) (3)

     The special entry name `self' stands for the document containing
     the toctree directive.  This is useful if you want to generate a
     "sitemap" from the toctree.

     You can also give a "hidden" option to the directive, like this:

         .. toctree::
            :hidden:

            doc_1
            doc_2

     This will still notify Sphinx of the document hierarchy, but not
     insert links into the document at the location of the directive -
     this makes sense if you intend to insert these links yourself, in
     a different style, or in the HTML sidebar.

     In cases where you want to have only one top-level toctree and
     hide all other lower level toctrees you can add the
     "includehidden" option to the top-level toctree entry:

         .. toctree::
            :includehidden:

            doc_1
            doc_2

     All other toctree entries can then be eliminated by the "hidden"
     option.

     In the end, all documents in the *note source directory: 2f. (or
     subdirectories) must occur in some `toctree' directive; Sphinx
     will emit a warning if it finds a file that is not included,
     because that means that this file will not be reachable through
     standard navigation.  Use *note unused_docs: 96. to explicitly
     exclude documents from building, and *note exclude_trees: 97. to
     exclude whole directories.

     The "master document" (selected by *note master_doc: 98.) is the
     "root" of the TOC tree hierarchy.  It can be used as the
     documentation's main page, or as a "full table of contents" if you
     don't give a `maxdepth' option.

     Changed in version 0.3: Added "globbing" option.

     Changed in version 0.6: Added "numbered" and "hidden" options as
     well as external links and support for "self" references.

     Changed in version 1.0: Added "titlesonly" option.

     Changed in version 1.1: Added numeric argument to "numbered".

     Changed in version 1.2: Added "includehidden" option.

* Menu:

* Special names::

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#include

  (2) The `maxdepth' option does not apply to the LaTeX writer, where
the whole table of contents will always be presented at the begin of the
document, and its depth is controlled by the `tocdepth' counter, which
you can reset in your *note latex_preamble: 94. config value using e.g.
`\setcounter{tocdepth}{2}'.

  (3) A note on available globbing syntax: you can use the standard
shell constructs `*', `?', `[...]' and `[!...]' with the feature that
these all don't match slashes.  A double star `**' can be used to match
any sequence of characters _including_ slashes.


File: sphinx.info,  Node: Special names,  Up: The TOC tree

6.1.1 Special names
-------------------

Sphinx reserves some document names for its own use; you should not try
to create documents with these names - it will cause problems.

  The special document names (and pages generated for them) are:

   * `genindex', `modindex', `search'

     These are used for the general index, the Python module index, and
     the search page, respectively.

     The general index is populated with entries from modules, all
     index-generating *note object descriptions: 9a, and from *note
     index: 9b.  directives.

     The Python module index contains one entry per *note py;module:
     9c. directive.

     The search page contains a form that uses the generated JSON
     search index and JavaScript to full-text search the generated
     documents for search words; it should work on every major browser
     that supports modern JavaScript.

   * every name beginning with `_'

     Though only few such names are currently used by Sphinx, you
     should not create documents or document-containing directories
     with such names.  (Using `_' as a prefix for a custom template
     directory is fine.)


File: sphinx.info,  Node: Paragraph-level markup,  Next: Table-of-contents markup,  Prev: The TOC tree,  Up: Sphinx Markup Constructs

6.2 Paragraph-level markup
==========================

These directives create short paragraphs and can be used inside
information units as well as normal text:

 -- Restructuredtext Directive: .. note::
     An especially important bit of information about an API that a
     user should be aware of when using whatever bit of API the note
     pertains to.  The content of the directive should be written in
     complete sentences and include all appropriate punctuation.

     Example:

         .. note::

            This function is not suitable for sending spam e-mails.



 -- Restructuredtext Directive: .. warning::
     An important bit of information about an API that a user should be
     very aware of when using whatever bit of API the warning pertains
     to.  The content of the directive should be written in complete
     sentences and include all appropriate punctuation. This differs
     from *note note: 9f. in that it is recommended over *note note:
     9f. for information regarding security.

 -- Restructuredtext Directive: .. versionadded:: version
     This directive documents the version of the project which added
     the described feature to the library or C API. When this applies
     to an entire module, it should be placed at the top of the module
     section before any prose.

     The first argument must be given and is the version in question;
     you can add a second argument consisting of a _brief_ explanation
     of the change.

     Example:

         .. versionadded:: 2.5
            The *spam* parameter.

     Note that there must be no blank line between the directive head
     and the explanation; this is to make these blocks visually
     continuous in the markup.

 -- Restructuredtext Directive: .. versionchanged:: version
     Similar to *note versionadded: a1, but describes when and what
     changed in the named feature in some way (new parameters, changed
     side effects, etc.).

 -- Restructuredtext Directive: .. deprecated:: version
     Similar to *note versionchanged: a2, but describes when the
     feature was deprecated.  An explanation can also be given, for
     example to inform the reader what should be used instead.  Example:

         .. deprecated:: 3.1
            Use :func:`spam` instead.



      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


 -- Restructuredtext Directive: .. seealso::
     Many sections include a list of references to module documentation
     or external documents.  These lists are created using the *note
     seealso: a4.  directive.

     The *note seealso: a4. directive is typically placed in a section
     just before any sub-sections.  For the HTML output, it is shown
     boxed off from the main flow of the text.

     The content of the *note seealso: a4. directive should be a reST
     definition list.  Example:

         .. seealso::

            Module :py:mod:`zipfile`
               Documentation of the :py:mod:`zipfile` standard module.

            `GNU tar manual, Basic Tar Format <http://link>`_
               Documentation for tar archive files, including GNU tar extensions.

     There's also a "short form" allowed that looks like this:

         .. seealso:: modules :py:mod:`zipfile`, :py:mod:`tarfile`

     New in version 0.5: The short form.

 -- Restructuredtext Directive: .. rubric:: title
     This directive creates a paragraph heading that is not used to
     create a table of contents node.

          Note: If the _title_ of the rubric is "Footnotes" (or the
          selected language's equivalent), this rubric is ignored by
          the LaTeX writer, since it is assumed to only contain
          footnote definitions and therefore would create an empty
          heading.

 -- Restructuredtext Directive: .. centered::
     This directive creates a centered boldfaced line of text.  Use it
     as follows:

         .. centered:: LICENSE AGREEMENT

     Deprecated since version 1.1: This presentation-only directive is
     a legacy from older versions.  Use a `rst-class' directive instead
     and add an appropriate style.

 -- Restructuredtext Directive: .. hlist::
     This directive must contain a bullet list.  It will transform it
     into a more compact list by either distributing more than one item
     horizontally, or reducing spacing between items, depending on the
     builder.

     For builders that support the horizontal distribution, there is a
     `columns' option that specifies the number of columns; it defaults
     to 2.  Example:

         .. hlist::
            :columns: 3

            * A list of
            * short items
            * that should be
            * displayed
            * horizontally

     New in version 0.6.


File: sphinx.info,  Node: Table-of-contents markup,  Next: Glossary,  Prev: Paragraph-level markup,  Up: Sphinx Markup Constructs

6.3 Table-of-contents markup
============================

The *note toctree: 93. directive, which generates tables of contents of
subdocuments, is described in *note The TOC tree: 36.

  For local tables of contents, use the standard reST contents
directive(1).

  ---------- Footnotes ----------

  (1)
http://docutils.sourceforge.net/docs/ref/rst/directives.html#table-of-contents


File: sphinx.info,  Node: Glossary,  Next: Grammar production displays,  Prev: Table-of-contents markup,  Up: Sphinx Markup Constructs

6.4 Glossary
============

 -- Restructuredtext Directive: .. glossary::
     This directive must contain a reST definition-list-like markup
     with terms and definitions.  The definitions will then be
     referencable with the *note term: ab. role.  Example:

         .. glossary::

            environment
               A structure where information about all documents under the root is
               saved, and used for cross-referencing.  The environment is pickled
               after the parsing stage, so that successive runs only need to read
               and parse new and changed documents.

            source directory
               The directory which, including its subdirectories, contains all
               source files for one Sphinx project.

     In contrast to regular definition lists, _multiple_ terms per
     entry are allowed, and inline markup is allowed in terms.  You can
     link to all of the terms.  For example:

         .. glossary::

            term 1
            term 2
               Definition of both terms.

     (When the glossary is sorted, the first term determines the sort
     order.)

     New in version 0.6: You can now give the glossary directive a
     `:sorted:' flag that will automatically sort the entries
     alphabetically.

     Changed in version 1.1: Now supports multiple terms and inline
     markup in terms.


File: sphinx.info,  Node: Grammar production displays,  Next: Showing code examples,  Prev: Glossary,  Up: Sphinx Markup Constructs

6.5 Grammar production displays
===============================

Special markup is available for displaying the productions of a formal
grammar.  The markup is simple and does not attempt to model all
aspects of BNF (or any derived forms), but provides enough to allow
context-free grammars to be displayed in a way that causes uses of a
symbol to be rendered as hyperlinks to the definition of the symbol.
There is this directive:

 -- Restructuredtext Directive: .. productionlist:: [name]
     This directive is used to enclose a group of productions.  Each
     production is given on a single line and consists of a name,
     separated by a colon from the following definition.  If the
     definition spans multiple lines, each continuation line must begin
     with a colon placed at the same column as in the first line.

     The argument to *note productionlist: ad. serves to distinguish
     different sets of production lists that belong to different
     grammars.

     Blank lines are not allowed within `productionlist' directive
     arguments.

     The definition can contain token names which are marked as
     interpreted text (e.g. `sum ::= `integer` "+" `integer`') - this
     generates cross-references to the productions of these tokens.
     Outside of the production list, you can reference to token
     productions using *note token: ae.

     Note that no further reST parsing is done in the production, so
     that you don't have to escape `*' or `|' characters.

  The following is an example taken from the Python Reference Manual:

    .. productionlist::
       try_stmt: try1_stmt | try2_stmt
       try1_stmt: "try" ":" `suite`
                : ("except" [`expression` ["," `target`]] ":" `suite`)+
                : ["else" ":" `suite`]
                : ["finally" ":" `suite`]
       try2_stmt: "try" ":" `suite`
                : "finally" ":" `suite`



File: sphinx.info,  Node: Showing code examples,  Next: Inline markup<2>,  Prev: Grammar production displays,  Up: Sphinx Markup Constructs

6.6 Showing code examples
=========================

Examples of Python source code or interactive sessions are represented
using standard reST literal blocks.  They are started by a `::' at the
end of the preceding paragraph and delimited by indentation.

  Representing an interactive session requires including the prompts
and output along with the Python code.  No special markup is required
for interactive sessions.  After the last line of input or output
presented, there should not be an "unused" primary prompt; this is an
example of what _not_ to do:

    >>> 1 + 1
    2
    >>>

Syntax highlighting is done with Pygments(1) (if it's installed) and
handled in a smart way:

   * There is a "highlighting language" for each source file.  Per
     default, this is `'python'' as the majority of files will have to
     highlight Python snippets, but the doc-wide default can be set
     with the *note highlight_language: b2.  config value.

   * Within Python highlighting mode, interactive sessions are
     recognized automatically and highlighted appropriately.  Normal
     Python code is only highlighted if it is parseable (so you can use
     Python as the default, but interspersed snippets of shell commands
     or other code blocks will not be highlighted as Python).

   * The highlighting language can be changed using the `highlight'
     directive, used as follows:

         .. highlight:: c

     This language is used until the next `highlight' directive is
     encountered.

   * For documents that have to show snippets in different languages,
     there's also a `code-block' directive that is given the
     highlighting language directly:

         .. code-block:: ruby

            Some Ruby code.

     The directive's alias name `sourcecode' works as well.

   * The valid values for the highlighting language are:

        * `none' (no highlighting)

        * `python' (the default when *note highlight_language: b2.
          isn't set)

        * `guess' (let Pygments guess the lexer based on contents, only
          works with certain well-recognizable languages)

        * `rest'

        * `c'

        * ... and any other lexer name that Pygments supports.

   * If highlighting with the selected language fails, the block is not
     highlighted in any way.

* Menu:

* Line numbers::
* Includes::

  ---------- Footnotes ----------

  (1) http://pygments.org


File: sphinx.info,  Node: Line numbers,  Next: Includes,  Up: Showing code examples

6.6.1 Line numbers
------------------

If installed, Pygments can generate line numbers for code blocks.  For
automatically-highlighted blocks (those started by `::'), line numbers
must be switched on in a `highlight' directive, with the
`linenothreshold' option:

    .. highlight:: python
       :linenothreshold: 5

This will produce line numbers for all code blocks longer than five
lines.

  For `code-block' blocks, a `linenos' flag option can be given to
switch on line numbers for the individual block:

    .. code-block:: ruby
       :linenos:

       Some more Ruby code.

Additionally, an `emphasize-lines' option can be given to have Pygments
emphasize particular lines:

    .. code-block:: python
       :emphasize-lines: 3,5

       def some_function():
           interesting = False
           print 'This line is highlighted.'
           print 'This one is not...'
           print '...but this one is.'

Changed in version 1.1: `emphasize-lines' has been added.


File: sphinx.info,  Node: Includes,  Prev: Line numbers,  Up: Showing code examples

6.6.2 Includes
--------------

 -- Restructuredtext Directive: .. literalinclude:: filename
     Longer displays of verbatim text may be included by storing the
     example text in an external file containing only plain text.  The
     file may be included using the `literalinclude' directive. (1) For
     example, to include the Python source file `example.py', use:

         .. literalinclude:: example.py

     The file name is usually relative to the current file's path.
     However, if it is absolute (starting with `/'), it is relative to
     the top source directory.

     Tabs in the input are expanded if you give a `tab-width' option
     with the desired tab width.

     The directive also supports the `linenos' flag option to switch on
     line numbers, the `emphasize-lines' option to emphasize particular
     lines, and a `language' option to select a language different from
     the current file's standard language.  Example with options:

         .. literalinclude:: example.rb
            :language: ruby
            :emphasize-lines: 12,15-18
            :linenos:

     Include files are assumed to be encoded in the *note
     source_encoding: 8d.  If the file has a different encoding, you
     can specify it with the `encoding' option:

         .. literalinclude:: example.py
            :encoding: latin-1

     The directive also supports including only parts of the file.  If
     it is a Python module, you can select a class, function or method
     to include using the `pyobject' option:

         .. literalinclude:: example.py
            :pyobject: Timer.start

     This would only include the code lines belonging to the `start()'
     method in the `Timer' class within the file.

     Alternately, you can specify exactly which lines to include by
     giving a `lines' option:

         .. literalinclude:: example.py
            :lines: 1,3,5-10,20-

     This includes the lines 1, 3, 5 to 10 and lines 20 to the last
     line.

     Another way to control which part of the file is included is to
     use the `start-after' and `end-before' options (or only one of
     them).  If `start-after' is given as a string option, only lines
     that follow the first line containing that string are included.
     If `end-before' is given as a string option, only lines that
     precede the first lines containing that string are included.

     You can prepend and/or append a line to the included code, using
     the `prepend' and `append' option, respectively.  This is useful
     e.g. for highlighting PHP code that doesn't include the
     `<?php'/`?>' markers.

     New in version 0.4.3: The `encoding' option.

     New in version 0.6: The `pyobject', `lines', `start-after' and
     `end-before' options, as well as support for absolute filenames.

     New in version 1.0: The `prepend' and `append' options, as well as
     `tab-width'.

  ---------- Footnotes ----------

  (1) There is a standard `.. include' directive, but it raises errors
if the file is not found.  This one only emits a warning.


File: sphinx.info,  Node: Inline markup<2>,  Next: Miscellaneous markup,  Prev: Showing code examples,  Up: Sphinx Markup Constructs

6.7 Inline markup
=================

Sphinx uses interpreted text roles to insert semantic markup into
documents.  They are written as `:rolename:`content`'.

     Note: The default role (``content`') has no special meaning by
     default.  You are free to use it for anything you like, e.g.
     variable names; use the *note default_role: 85. config value to
     set it to a known role.

  See *note Sphinx Domains: 41. for roles added by domains.

* Menu:

* Cross-referencing syntax::
* Other semantic markup::
* Substitutions: Substitutions<2>.

Cross-referencing syntax

* Cross-referencing objects::
* Cross-referencing arbitrary locations::
* Cross-referencing documents::
* Referencing downloadable files::
* Cross-referencing other items of interest::


File: sphinx.info,  Node: Cross-referencing syntax,  Next: Other semantic markup,  Up: Inline markup<2>

6.7.1 Cross-referencing syntax
------------------------------

Cross-references are generated by many semantic interpreted text roles.
Basically, you only need to write `:role:`target`', and a link will be
created to the item named _target_ of the type indicated by _role_.
The links's text will be the same as _target_.

  There are some additional facilities, however, that make
cross-referencing roles more versatile:

   * You may supply an explicit title and reference target, like in
     reST direct hyperlinks: `:role:`title <target>`' will refer to
     _target_, but the link text will be _title_.

   * If you prefix the content with `!', no reference/hyperlink will be
     created.

   * If you prefix the content with `~', the link text will only be the
     last component of the target.  For example,
     `:py:meth:`~Queue.Queue.get`' will refer to `Queue.Queue.get' but
     only display `get' as the link text.

     In HTML output, the link's `title' attribute (that is e.g. shown
     as a tool-tip on mouse-hover) will always be the full target name.

* Menu:

* Cross-referencing objects::
* Cross-referencing arbitrary locations::
* Cross-referencing documents::
* Referencing downloadable files::
* Cross-referencing other items of interest::


File: sphinx.info,  Node: Cross-referencing objects,  Next: Cross-referencing arbitrary locations,  Up: Cross-referencing syntax

6.7.1.1 Cross-referencing objects
.................................

These roles are described with their respective domains:

   * *note Python: ba.

   * *note C: bb.

   * *note C++: bc.

   * *note JavaScript: bd.

   * *note ReST: be.


File: sphinx.info,  Node: Cross-referencing arbitrary locations,  Next: Cross-referencing documents,  Prev: Cross-referencing objects,  Up: Cross-referencing syntax

6.7.1.2 Cross-referencing arbitrary locations
.............................................

 -- Restructuredtext Role: :ref:
     To support cross-referencing to arbitrary locations in any
     document, the standard reST labels are used.  For this to work
     label names must be unique throughout the entire documentation.
     There are two ways in which you can refer to labels:

        * If you place a label directly before a section title, you can
          reference to it with `:ref:`label-name`'.  Example:

              .. _my-reference-label:

              Section to cross-reference
              --------------------------

              This is the text of the section.

              It refers to the section itself, see :ref:`my-reference-label`.

          The `:ref:' role would then generate a link to the section,
          with the link title being "Section to cross-reference".  This
          works just as well when section and reference are in
          different source files.

          Automatic labels also work with figures: given

              .. _my-figure:

              .. figure:: whatever

                 Figure caption

          a reference `:ref:`my-figure`' would insert a reference to
          the figure with link text "Figure caption".

          The same works for tables that are given an explicit caption
          using the table(1) directive.

        * Labels that aren't placed before a section title can still be
          referenced to, but you must give the link an explicit title,
          using this syntax: `:ref:`Link title <label-name>`'.

     Using *note ref: 38. is advised over standard reStructuredText
     links to sections (like ``Section title`_') because it works
     across files, when section headings are changed, and for all
     builders that support cross-references.

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/docs/ref/rst/directives.html#table


File: sphinx.info,  Node: Cross-referencing documents,  Next: Referencing downloadable files,  Prev: Cross-referencing arbitrary locations,  Up: Cross-referencing syntax

6.7.1.3 Cross-referencing documents
...................................

New in version 0.6.

  There is also a way to directly link to documents:

 -- Restructuredtext Role: :doc:
     Link to the specified document; the document name can be specified
     in absolute or relative fashion.  For example, if the reference
     `:doc:`parrot`' occurs in the document `sketches/index', then the
     link refers to `sketches/parrot'.  If the reference is
     `:doc:`/people`' or `:doc:`../people`', the link refers to
     `people'.

     If no explicit link text is given (like usual: `:doc:`Monty Python
     members </people>`'), the link caption will be the title of the
     given document.


File: sphinx.info,  Node: Referencing downloadable files,  Next: Cross-referencing other items of interest,  Prev: Cross-referencing documents,  Up: Cross-referencing syntax

6.7.1.4 Referencing downloadable files
......................................

New in version 0.6.

 -- Restructuredtext Role: :download:
     This role lets you link to files within your source tree that are
     not reST documents that can be viewed, but files that can be
     downloaded.

     When you use this role, the referenced file is automatically
     marked for inclusion in the output when building (obviously, for
     HTML output only).  All downloadable files are put into the
     `_downloads' subdirectory of the output directory; duplicate
     filenames are handled.

     An example:

         See :download:`this example script <../example.py>`.

     The given filename is usually relative to the directory the
     current source file is contained in, but if it absolute (starting
     with `/'), it is taken as relative to the top source directory.

     The `example.py' file will be copied to the output directory, and a
     suitable link generated to it.


File: sphinx.info,  Node: Cross-referencing other items of interest,  Prev: Referencing downloadable files,  Up: Cross-referencing syntax

6.7.1.5 Cross-referencing other items of interest
.................................................

The following roles do possibly create a cross-reference, but do not
refer to objects:

 -- Restructuredtext Role: :envvar:
     An environment variable.  Index entries are generated.  Also
     generates a link to the matching *note envvar: c6. directive, if
     it exists.

 -- Restructuredtext Role: :token:
     The name of a grammar token (used to create links between *note
     productionlist: ad. directives).

 -- Restructuredtext Role: :keyword:
     The name of a keyword in Python.  This creates a link to a
     reference label with that name, if it exists.

 -- Restructuredtext Role: :option:
     A command-line option to an executable program.  The leading
     hyphen(s) must be included.  This generates a link to a *note
     option: c9. directive, if it exists.

  The following role creates a cross-reference to the term in the
glossary:

 -- Restructuredtext Role: :term:
     Reference to a term in the glossary.  The glossary is created
     using the `glossary' directive containing a definition list with
     terms and definitions.  It does not have to be in the same file as
     the `term' markup, for example the Python docs have one global
     glossary in the `glossary.rst' file.

     If you use a term that's not explained in a glossary, you'll get a
     warning during build.


File: sphinx.info,  Node: Other semantic markup,  Next: Substitutions<2>,  Prev: Cross-referencing syntax,  Up: Inline markup<2>

6.7.2 Other semantic markup
---------------------------

The following roles don't do anything special except formatting the text
in a different style:

 -- Restructuredtext Role: :abbr:
     An abbreviation.  If the role content contains a parenthesized
     explanation, it will be treated specially: it will be shown in a
     tool-tip in HTML, and output only once in LaTeX.

     Example: `:abbr:`LIFO (last-in, first-out)`'.

     New in version 0.6.

 -- Restructuredtext Role: :command:
     The name of an OS-level command, such as `rm'.

 -- Restructuredtext Role: :dfn:
     Mark the defining instance of a term in the text.  (No index
     entries are generated.)

 -- Restructuredtext Role: :file:
     The name of a file or directory.  Within the contents, you can use
     curly braces to indicate a "variable" part, for example:

         ... is installed in :file:`/usr/lib/python2.{x}/site-packages` ...

     In the built documentation, the `x' will be displayed differently
     to indicate that it is to be replaced by the Python minor version.

 -- Restructuredtext Role: :guilabel:
     Labels presented as part of an interactive user interface should
     be marked using `guilabel'.  This includes labels from text-based
     interfaces such as those created using `curses' or other
     text-based libraries.  Any label used in the interface should be
     marked with this role, including button labels, window titles,
     field names, menu and menu selection names, and even values in
     selection lists.

     Changed in version 1.0: An accelerator key for the GUI label can
     be included using an ampersand; this will be stripped and
     displayed underlined in the output (example:
     `:guilabel:`&Cancel`').  To include a literal ampersand, double it.

 -- Restructuredtext Role: :kbd:
     Mark a sequence of keystrokes.  What form the key sequence takes
     may depend on platform- or application-specific conventions.  When
     there are no relevant conventions, the names of modifier keys
     should be spelled out, to improve accessibility for new users and
     non-native speakers.  For example, an _xemacs_ key sequence may be
     marked like `:kbd:`C-x C-f`', but without reference to a specific
     application or platform, the same sequence should be marked as
     `:kbd:`Control-x Control-f`'.

 -- Restructuredtext Role: :mailheader:
     The name of an RFC 822-style mail header.  This markup does not
     imply that the header is being used in an email message, but can
     be used to refer to any header of the same "style."  This is also
     used for headers defined by the various MIME specifications.  The
     header name should be entered in the same way it would normally be
     found in practice, with the camel-casing conventions being
     preferred where there is more than one common usage. For example:
     `:mailheader:`Content-Type`'.

 -- Restructuredtext Role: :makevar:
     The name of a *make* variable.

 -- Restructuredtext Role: :manpage:
     A reference to a Unix manual page including the section, e.g.
     `:manpage:`ls(1)`'.

 -- Restructuredtext Role: :menuselection:
     Menu selections should be marked using the `menuselection' role.
     This is used to mark a complete sequence of menu selections,
     including selecting submenus and choosing a specific operation, or
     any subsequence of such a sequence.  The names of individual
     selections should be separated by `-->'.

     For example, to mark the selection "Start > Programs", use this
     markup:

         :menuselection:`Start --> Programs`

     When including a selection that includes some trailing indicator,
     such as the ellipsis some operating systems use to indicate that
     the command opens a dialog, the indicator should be omitted from
     the selection name.

     `menuselection' also supports ampersand accelerators just like
     *note guilabel: cf.

 -- Restructuredtext Role: :mimetype:
     The name of a MIME type, or a component of a MIME type (the major
     or minor portion, taken alone).

 -- Restructuredtext Role: :newsgroup:
     The name of a Usenet newsgroup.

 -- Restructuredtext Role: :program:
     The name of an executable program.  This may differ from the file
     name for the executable for some platforms.  In particular, the
     `.exe' (or other) extension should be omitted for Windows programs.

 -- Restructuredtext Role: :regexp:
     A regular expression. Quotes should not be included.

 -- Restructuredtext Role: :samp:
     A piece of literal text, such as code.  Within the contents, you
     can use curly braces to indicate a "variable" part, as in *note
     file: ce.  For example, in `:samp:`print 1+{variable}`', the part
     `variable' would be emphasized.

     If you don't need the "variable part" indication, use the standard
     ```code``' instead.

  There is also an *note index: da. role to generate index entries.

  The following roles generate external links:

 -- Restructuredtext Role: :pep:
     A reference to a Python Enhancement Proposal.  This generates
     appropriate index entries. The text "PEP _number_" is generated;
     in the HTML output, this text is a hyperlink to an online copy of
     the specified PEP.  You can link to a specific section by saying
     `:pep:`number#anchor`'.

 -- Restructuredtext Role: :rfc:
     A reference to an Internet Request for Comments.  This generates
     appropriate index entries. The text "RFC _number_" is generated;
     in the HTML output, this text is a hyperlink to an online copy of
     the specified RFC.  You can link to a specific section by saying
     `:rfc:`number#anchor`'.

  Note that there are no special roles for including hyperlinks as you
can use the standard reST markup for that purpose.


File: sphinx.info,  Node: Substitutions<2>,  Prev: Other semantic markup,  Up: Inline markup<2>

6.7.3 Substitutions
-------------------

The documentation system provides three substitutions that are defined
by default.  They are set in the build configuration file.

 -- Describe: |release|
     Replaced by the project release the documentation refers to.  This
     is meant to be the full version string including
     alpha/beta/release candidate tags, e.g. `2.5.2b3'.  Set by *note
     release: 71.

 -- Describe: |version|
     Replaced by the project version the documentation refers to. This
     is meant to consist only of the major and minor version parts,
     e.g. `2.5', even for version 2.5.1.  Set by *note version: 6f.

 -- Describe: |today|
     Replaced by either today's date (the date on which the document is
     read), or the date set in the build configuration file.  Normally
     has the format `April 14, 2007'.  Set by *note today_fmt: de. and
     *note today: df.


File: sphinx.info,  Node: Miscellaneous markup,  Prev: Inline markup<2>,  Up: Sphinx Markup Constructs

6.8 Miscellaneous markup
========================

* Menu:

* File-wide metadata::
* Meta-information markup::
* Index-generating markup::
* Including content based on tags::
* Tables: Tables<2>.


File: sphinx.info,  Node: File-wide metadata,  Next: Meta-information markup,  Up: Miscellaneous markup

6.8.1 File-wide metadata
------------------------

reST has the concept of "field lists"; these are a sequence of fields
marked up like this:

    :fieldname: Field content

A field list near the top of a file is parsed by docutils as the
"docinfo" which is normally used to record the author, date of
publication and other metadata.  _In Sphinx_, a field list preceding
any other markup is moved from the docinfo to the Sphinx environment as
document metadata and is not displayed in the output; a field list
appearing after the document title will be part of the docinfo as
normal and will be displayed in the output.

  At the moment, these metadata fields are recognized:

`tocdepth'
     The maximum depth for a table of contents of this file.

     New in version 0.4.

`nocomments'
     If set, the web application won't display a comment form for a
     page generated from this source file.

`orphan'
     If set, warnings about this file not being included in any toctree
     will be suppressed.

     New in version 1.0.


File: sphinx.info,  Node: Meta-information markup,  Next: Index-generating markup,  Prev: File-wide metadata,  Up: Miscellaneous markup

6.8.2 Meta-information markup
-----------------------------

 -- Restructuredtext Directive: .. sectionauthor:: name <email>
     Identifies the author of the current section.  The argument should
     include the author's name such that it can be used for
     presentation and email address.  The domain name portion of the
     address should be lower case.  Example:

         .. sectionauthor:: Guido van Rossum <guido@python.org>

     By default, this markup isn't reflected in the output in any way
     (it helps keep track of contributions), but you can set the
     configuration value *note show_authors: e6. to True to make them
     produce a paragraph in the output.

 -- Restructuredtext Directive: .. codeauthor:: name <email>
     The *note codeauthor: e7. directive, which can appear multiple
     times, names the authors of the described code, just like *note
     sectionauthor: e5. names the author(s) of a piece of
     documentation.  It too only produces output if the *note
     show_authors: e6. configuration value is True.


File: sphinx.info,  Node: Index-generating markup,  Next: Including content based on tags,  Prev: Meta-information markup,  Up: Miscellaneous markup

6.8.3 Index-generating markup
-----------------------------

Sphinx automatically creates index entries from all object descriptions
(like functions, classes or attributes) like discussed in *note Sphinx
Domains: 41.

  However, there is also explicit markup available, to make the index
more comprehensive and enable index entries in documents where
information is not mainly contained in information units, such as the
language reference.

 -- Restructuredtext Directive: .. index:: <entries>
     This directive contains one or more index entries.  Each entry
     consists of a type and a value, separated by a colon.

     For example:

         .. index::
            single: execution; context
            module: __main__
            module: sys
            triple: module; search; path

         The execution context
         ---------------------

         ...

     This directive contains five entries, which will be converted to
     entries in the generated index which link to the exact location of
     the index statement (or, in case of offline media, the
     corresponding page number).

     Since index directives generate cross-reference targets at their
     location in the source, it makes sense to put them _before_ the
     thing they refer to - e.g. a heading, as in the example above.

     The possible entry types are:

    single
          Creates a single index entry.  Can be made a subentry by
          separating the subentry text with a semicolon (this notation
          is also used below to describe what entries are created).

    pair
          `pair: loop; statement' is a shortcut that creates two index
          entries, namely `loop; statement' and `statement; loop'.

    triple
          Likewise, `triple: module; search; path' is a shortcut that
          creates three index entries, which are `module; search path',
          `search; path, module' and `path; module search'.

    see
          `see: entry; other' creates an index entry that refers from
          `entry' to `other'.

    seealso
          Like `see', but inserts "see also" instead of "see".

    module, keyword, operator, object, exception, statement, builtin
          These all create two index entries.  For example, `module:
          hashlib' creates the entries `module; hashlib' and `hashlib;
          module'.  (These are Python-specific and therefore
          deprecated.)

     You can mark up "main" index entries by prefixing them with an
     exclamation mark.  The references to "main" entries are emphasized
     in the generated index.  For example, if two pages contain

         .. index:: Python

     and one page contains

         .. index:: ! Python

     then the backlink to the latter page is emphasized among the three
     backlinks.

     For index directives containing only "single" entries, there is a
     shorthand notation:

         .. index:: BNF, grammar, syntax, notation

     This creates four index entries.

     Changed in version 1.1: Added `see' and `seealso' types, as well
     as marking main entries.

 -- Restructuredtext Role: :index:
     While the *note index: 9b. directive is a block-level markup and
     links to the beginning of the next paragraph, there is also a
     corresponding role that sets the link target directly where it is
     used.

     The content of the role can be a simple phrase, which is then kept
     in the text and used as an index entry.  It can also be a
     combination of text and index entry, styled like with explicit
     targets of cross-references.  In that case, the "target" part can
     be a full entry as described for the directive above.  For example:

         This is a normal reST :index:`paragraph` that contains several
         :index:`index entries <pair: index; entry>`.

     New in version 1.1.


File: sphinx.info,  Node: Including content based on tags,  Next: Tables<2>,  Prev: Index-generating markup,  Up: Miscellaneous markup

6.8.4 Including content based on tags
-------------------------------------

 -- Restructuredtext Directive: .. only:: <expression>
     Include the content of the directive only if the _expression_ is
     true.  The expression should consist of tags, like this:

         .. only:: html and draft

     Undefined tags are false, defined tags (via the `-t' command-line
     option or within `conf.py') are true.  Boolean expressions, also
     using parentheses (like `html and (latex or draft)') are supported.

     The format of the current builder (`html', `latex' or `text') is
     always set as a tag.

     New in version 0.6.


File: sphinx.info,  Node: Tables<2>,  Prev: Including content based on tags,  Up: Miscellaneous markup

6.8.5 Tables
------------

Use *note standard reStructuredText tables: 7a.  They work fine in HTML
output, however there are some gotchas when using tables in LaTeX: the
column width is hard to determine correctly automatically.  For this
reason, the following directive exists:

 -- Restructuredtext Directive: .. tabularcolumns:: column spec
     This directive gives a "column spec" for the next table occurring
     in the source file.  The spec is the second argument to the LaTeX
     `tabulary' package's environment (which Sphinx uses to translate
     tables).  It can have values like

         |l|l|l|

     which means three left-adjusted, nonbreaking columns.  For columns
     with longer text that should automatically be broken, use either
     the standard `p{width}' construct, or tabulary's automatic
     specifiers:

     `L'       ragged-left column with automatic width
     `R'       ragged-right column with automatic width
     `C'       centered column with automatic width
     `J'       justified column with automatic width

     The automatic width is determined by rendering the content in the
     table, and scaling them according to their share of the total
     width.

     By default, Sphinx uses a table layout with `L' for every column.

     New in version 0.3.

     Warning: Tables that contain list-like elements such as object
     descriptions, blockquotes or any kind of lists cannot be set out
     of the box with `tabulary'.  They are therefore set with the
     standard LaTeX `tabular' environment if you don't give a
     `tabularcolumns' directive.  If you do, the table will be set with
     `tabulary', but you must use the `p{width}' construct for the
     columns that contain these elements.

     Literal blocks do not work with `tabulary' at all, so tables
     containing a literal block are always set with `tabular'.  Also,
     the verbatim environment used for literal blocks only works in
     `p{width}' columns, which means that by default, Sphinx generates
     such column specs for such tables.  Use the *note tabularcolumns:
     eb. directive to get finer control over such tables.

  More markup is added by *note Sphinx Domains: 41.


File: sphinx.info,  Node: Sphinx Domains,  Next: Available builders,  Prev: Sphinx Markup Constructs,  Up: Top

7 Sphinx Domains
****************

New in version 1.0.

* Menu:

* What is a Domain?::
* Basic Markup::
* The Python Domain::
* The C Domain::
* The C++ Domain::
* The Standard Domain::
* The JavaScript Domain::
* The reStructuredText domain::
* More domains::


File: sphinx.info,  Node: What is a Domain?,  Next: Basic Markup,  Up: Sphinx Domains

7.1 What is a Domain?
=====================

Originally, Sphinx was conceived for a single project, the
documentation of the Python language.  Shortly afterwards, it was made
available for everyone as a documentation tool, but the documentation
of Python modules remained deeply built in - the most fundamental
directives, like `function', were designed for Python objects.  Since
Sphinx has become somewhat popular, interest developed in using it for
many different purposes: C/C++ projects, JavaScript, or even
reStructuredText markup (like in this documentation).

  While this was always possible, it is now much easier to easily
support documentation of projects using different programming languages
or even ones not supported by the main Sphinx distribution, by
providing a *domain* for every such purpose.

  A domain is a collection of markup (reStructuredText *note directive:
f0.s and *note role: f1.s) to describe and link to *note object: f2.s
belonging together, e.g. elements of a programming language.  Directive
and role names in a domain have names like `domain:name', e.g.
`py:function'.  Domains can also provide custom indices (like the
Python Module Index).

  Having domains means that there are no naming problems when one set of
documentation wants to refer to e.g. C++ and Python classes.  It also
means that extensions that support the documentation of whole new
languages are much easier to write.

  This section describes what the domains that come with Sphinx
provide.  The domain API is documented as well, in the section *note
Domain API: f3.


File: sphinx.info,  Node: Basic Markup,  Next: The Python Domain,  Prev: What is a Domain?,  Up: Sphinx Domains

7.2 Basic Markup
================

Most domains provide a number of _object description directives_, used
to describe specific objects provided by modules.  Each directive
requires one or more signatures to provide basic information about what
is being described, and the content should be the description.  The
basic version makes entries in the general index; if no index entry is
desired, you can give the directive option flag `:noindex:'.  An
example using a Python domain directive:

    .. py:function:: spam(eggs)
                     ham(eggs)

       Spam or ham the foo.

This describes the two Python functions `spam' and `ham'.  (Note that
when signatures become too long, you can break them if you add a
backslash to lines that are continued in the next line.  Example:

    .. py:function:: filterwarnings(action, message='', category=Warning, \
                                    module='', lineno=0, append=False)
       :noindex:

(This example also shows how to use the `:noindex:' flag.)

  The domains also provide roles that link back to these object
descriptions.  For example, to link to one of the functions described
in the example above, you could say

    The function :py:func:`spam` does a similar thing.

As you can see, both directive and role names contain the domain name
and the directive name.

Default Domain
..............

To avoid having to writing the domain name all the time when you e.g.
only describe Python objects, a default domain can be selected with
either the config value *note primary_domain: f5. or this directive:

 -- Restructuredtext Directive: .. default-domain:: name
     Select a new default domain.  While the *note primary_domain: f5.
     selects a global default, this only has an effect within the same
     file.

  If no other default is selected, the Python domain (named `py') is
the default one, mostly for compatibility with documentation written
for older versions of Sphinx.

  Directives and roles that belong to the default domain can be
mentioned without giving the domain name, i.e.

    .. function:: pyfunc()

       Describes a Python function.

    Reference to :func:`pyfunc`.


* Menu:

* Cross-referencing syntax: Cross-referencing syntax<2>.


File: sphinx.info,  Node: Cross-referencing syntax<2>,  Up: Basic Markup

7.2.1 Cross-referencing syntax
------------------------------

For cross-reference roles provided by domains, the same facilities
exist as for general cross-references.  See *note Cross-referencing
syntax: 95.

  In short:

   * You may supply an explicit title and reference target:
     `:role:`title <target>`' will refer to _target_, but the link text
     will be _title_.

   * If you prefix the content with `!', no reference/hyperlink will be
     created.

   * If you prefix the content with `~', the link text will only be the
     last component of the target.  For example,
     `:py:meth:`~Queue.Queue.get`' will refer to `Queue.Queue.get' but
     only display `get' as the link text.


File: sphinx.info,  Node: The Python Domain,  Next: The C Domain,  Prev: Basic Markup,  Up: Sphinx Domains

7.3 The Python Domain
=====================

The Python domain (name *py*) provides the following directives for
module declarations:

 -- Restructuredtext Directive: .. py:module:: name
     This directive marks the beginning of the description of a module
     (or package submodule, in which case the name should be fully
     qualified, including the package name).  It does not create
     content (like e.g. *note py;class: 3f. does).

     This directive will also cause an entry in the global module index.

     The `platform' option, if present, is a comma-separated list of the
     platforms on which the module is available (if it is available on
     all platforms, the option should be omitted).  The keys are short
     identifiers; examples that are in use include "IRIX", "Mac",
     "Windows", and "Unix".  It is important to use a key which has
     already been used when applicable.

     The `synopsis' option should consist of one sentence describing the
     module's purpose - it is currently only used in the Global Module
     Index.

     The `deprecated' option can be given (with no value) to mark a
     module as deprecated; it will be designated as such in various
     locations then.

 -- Restructuredtext Directive: .. py:currentmodule:: name
     This directive tells Sphinx that the classes, functions etc.
     documented from here are in the given module (like *note
     py;module: 9c.), but it will not create index entries, an entry in
     the Global Module Index, or a link target for *note py;mod: fa.
     This is helpful in situations where documentation for things in a
     module is spread over multiple files or sections - one location
     has the *note py;module: 9c. directive, the others only *note
     py;currentmodule: f9.

  The following directives are provided for module and class contents:

 -- Restructuredtext Directive: .. py:data:: name
     Describes global data in a module, including both variables and
     values used as "defined constants."  Class and object attributes
     are not documented using this environment.

 -- Restructuredtext Directive: .. py:exception:: name
     Describes an exception class.  The signature can, but need not
     include parentheses with constructor arguments.

 -- Restructuredtext Directive: .. py:function:: name(signature)
     Describes a module-level function.  The signature should include
     the parameters, enclosing optional parameters in brackets.
     Default values can be given if it enhances clarity; see *note
     Python Signatures: fe.  For example:

         .. py:function:: Timer.repeat([repeat=3[, number=1000000]])

     Object methods are not documented using this directive. Bound
     object methods placed in the module namespace as part of the
     public interface of the module are documented using this, as they
     are equivalent to normal functions for most purposes.

     The description should include information about the parameters
     required and how they are used (especially whether mutable objects
     passed as parameters are modified), side effects, and possible
     exceptions.  A small example may be provided.

 -- Restructuredtext Directive: .. py:class:: name[(signature)]
     Describes a class.  The signature can include parentheses with
     parameters which will be shown as the constructor arguments.  See
     also *note Python Signatures: fe.

     Methods and attributes belonging to the class should be placed in
     this directive's body.  If they are placed outside, the supplied
     name should contain the class name so that cross-references still
     work.  Example:

         .. py:class:: Foo
            .. py:method:: quux()

         -- or --

         .. py:class:: Bar

         .. py:method:: Bar.quux()

     The first way is the preferred one.

 -- Restructuredtext Directive: .. py:attribute:: name
     Describes an object data attribute.  The description should include
     information about the type of the data to be expected and whether
     it may be changed directly.

 -- Restructuredtext Directive: .. py:method:: name(signature)
     Describes an object method.  The parameters should not include the
     `self' parameter.  The description should include similar
     information to that described for `function'.  See also *note
     Python Signatures: fe.

 -- Restructuredtext Directive: .. py:staticmethod:: name(signature)
     Like *note py;method: 40, but indicates that the method is a
     static method.

     New in version 0.4.

 -- Restructuredtext Directive: .. py:classmethod:: name(signature)
     Like *note py;method: 40, but indicates that the method is a class
     method.

     New in version 0.6.

 -- Restructuredtext Directive: .. py:decorator:: name
 -- Restructuredtext Directive: .. py:decorator:: name(signature)
     Describes a decorator function.  The signature should _not_
     represent the signature of the actual function, but the usage as a
     decorator.  For example, given the functions

         def removename(func):
             func.__name__ = ''
             return func

         def setnewname(name):
             def decorator(func):
                 func.__name__ = name
                 return func
             return decorator

     the descriptions should look like this:

         .. py:decorator:: removename

            Remove name of the decorated function.

         .. py:decorator:: setnewname(name)

            Set name of the decorated function to *name*.

     There is no `py:deco' role to link to a decorator that is marked
     up with this directive; rather, use the *note py;func: 103. role.

 -- Restructuredtext Directive: .. py:decoratormethod:: name
 -- Restructuredtext Directive: .. py:decoratormethod:: name(signature)
     Same as *note py;decorator: 102, but for decorators that are
     methods.

     Refer to a decorator method using the *note py;meth: 105. role.

* Menu:

* Python Signatures::
* Info field lists::
* Cross-referencing Python objects::


File: sphinx.info,  Node: Python Signatures,  Next: Info field lists,  Up: The Python Domain

7.3.1 Python Signatures
-----------------------

Signatures of functions, methods and class constructors can be given
like they would be written in Python, with the exception that optional
parameters can be indicated by brackets:

    .. py:function:: compile(source[, filename[, symbol]])

It is customary to put the opening bracket before the comma.  In
addition to this "nested" bracket style, a "flat" style can also be
used, due to the fact that most optional parameters can be given
independently:

    .. py:function:: compile(source[, filename, symbol])

Default values for optional arguments can be given (but if they contain
commas, they will confuse the signature parser).  Python 3-style
argument annotations can also be given as well as return type
annotations:

    .. py:function:: compile(source : string[, filename, symbol]) -> ast object



File: sphinx.info,  Node: Info field lists,  Next: Cross-referencing Python objects,  Prev: Python Signatures,  Up: The Python Domain

7.3.2 Info field lists
----------------------

New in version 0.4.

  Inside Python object description directives, reST field lists with
these fields are recognized and formatted nicely:

   * `param', `parameter', `arg', `argument', `key', `keyword':
     Description of a parameter.

   * `type': Type of a parameter.

   * `raises', `raise', `except', `exception': That (and when) a
     specific exception is raised.

   * `var', `ivar', `cvar': Description of a variable.

   * `returns', `return': Description of the return value.

   * `rtype': Return type.

  The field names must consist of one of these keywords and an argument
(except for `returns' and `rtype', which do not need an argument).
This is best explained by an example:

    .. py:function:: format_exception(etype, value, tb[, limit=None])

       Format the exception with a traceback.

       :param etype: exception type
       :param value: exception value
       :param tb: traceback object
       :param limit: maximum number of stack frames to show
       :type limit: integer or None
       :rtype: list of strings

This will render like this:

      -- Function: format_exception (etype, value, tb[, limit=None])
          Format the exception with a traceback.

               Parameters:

                  * *etype* - exception type

                  * *value* - exception value

                  * *tb* - traceback object

                  * *limit* (_integer or None_) - maximum number of
                    stack frames to show

               Return type: list of strings

  It is also possible to combine parameter type and description, if the
type is a single word, like this:

    :param integer limit: maximum number of stack frames to show



File: sphinx.info,  Node: Cross-referencing Python objects,  Prev: Info field lists,  Up: The Python Domain

7.3.3 Cross-referencing Python objects
--------------------------------------

The following roles refer to objects in modules and are possibly
hyperlinked if a matching identifier is found:

 -- Restructuredtext Role: :py:mod:
     Reference a module; a dotted name may be used.  This should also
     be used for package names.

 -- Restructuredtext Role: :py:func:
     Reference a Python function; dotted names may be used.  The role
     text needs not include trailing parentheses to enhance
     readability; they will be added automatically by Sphinx if the
     *note add_function_parentheses: 109. config value is true (the
     default).

 -- Restructuredtext Role: :py:data:
     Reference a module-level variable.

 -- Restructuredtext Role: :py:const:
     Reference a "defined" constant.  This may be a C-language
     `#define' or a Python variable that is not intended to be changed.

 -- Restructuredtext Role: :py:class:
     Reference a class; a dotted name may be used.

 -- Restructuredtext Role: :py:meth:
     Reference a method of an object.  The role text can include the
     type name and the method name; if it occurs within the description
     of a type, the type name can be omitted.  A dotted name may be
     used.

 -- Restructuredtext Role: :py:attr:
     Reference a data attribute of an object.

 -- Restructuredtext Role: :py:exc:
     Reference an exception.  A dotted name may be used.

 -- Restructuredtext Role: :py:obj:
     Reference an object of unspecified type.  Useful e.g. as the *note
     default_role: 85.

     New in version 0.4.

  The name enclosed in this markup can include a module name and/or a
class name.  For example, `:py:func:`filter`' could refer to a function
named `filter' in the current module, or the built-in function of that
name.  In contrast, `:py:func:`foo.filter`' clearly refers to the
`filter' function in the `foo' module.

  Normally, names in these roles are searched first without any further
qualification, then with the current module name prepended, then with
the current module and class name (if any) prepended.  If you prefix
the name with a dot, this order is reversed.  For example, in the
documentation of Python's `codecs' module, `:py:func:`open`' always
refers to the built-in function, while `:py:func:`.open`' refers to
`codecs.open()'.

  A similar heuristic is used to determine whether the name is an
attribute of the currently documented class.

  Also, if the name is prefixed with a dot, and no exact match is
found, the target is taken as a suffix and all object names with that
suffix are searched.  For example, `:py:meth:`.TarFile.close`'
references the `tarfile.TarFile.close()' function, even if the current
module is not `tarfile'.  Since this can get ambiguous, if there is
more than one possible match, you will get a warning from Sphinx.

  Note that you can combine the `~' and `.' prefixes:
`:py:meth:`~.TarFile.close`' will reference the
`tarfile.TarFile.close()' method, but the visible link caption will
only be `close()'.


File: sphinx.info,  Node: The C Domain,  Next: The C++ Domain,  Prev: The Python Domain,  Up: Sphinx Domains

7.4 The C Domain
================

The C domain (name *c*) is suited for documentation of C API.

 -- Restructuredtext Directive: .. c:function:: type name(signature)
     Describes a C function. The signature should be given as in C,
     e.g.:

         .. c:function:: PyObject* PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)

     This is also used to describe function-like preprocessor macros.
     The names of the arguments should be given so they may be used in
     the description.

     Note that you don't have to backslash-escape asterisks in the
     signature, as it is not parsed by the reST inliner.

 -- Restructuredtext Directive: .. c:member:: type name
     Describes a C struct member. Example signature:

         .. c:member:: PyObject* PyTypeObject.tp_bases

     The text of the description should include the range of values
     allowed, how the value should be interpreted, and whether the
     value can be changed.  References to structure members in text
     should use the `member' role.

 -- Restructuredtext Directive: .. c:macro:: name
     Describes a "simple" C macro.  Simple macros are macros which are
     used for code expansion, but which do not take arguments so cannot
     be described as functions.  This is not to be used for simple
     constant definitions.  Examples of its use in the Python
     documentation include `PyObject_HEAD' and `Py_BEGIN_ALLOW_THREADS'.

 -- Restructuredtext Directive: .. c:type:: name
     Describes a C type (whether defined by a typedef or struct). The
     signature should just be the type name.

 -- Restructuredtext Directive: .. c:var:: type name
     Describes a global C variable.  The signature should include the
     type, such as:

         .. c:var:: PyObject* PyClass_Type



* Menu:

* Cross-referencing C constructs::


File: sphinx.info,  Node: Cross-referencing C constructs,  Up: The C Domain

7.4.1 Cross-referencing C constructs
------------------------------------

The following roles create cross-references to C-language constructs if
they are defined in the documentation:

 -- Restructuredtext Role: :c:data:
     Reference a C-language variable.

 -- Restructuredtext Role: :c:func:
     Reference a C-language function. Should include trailing
     parentheses.

 -- Restructuredtext Role: :c:macro:
     Reference a "simple" C macro, as defined above.

 -- Restructuredtext Role: :c:type:
     Reference a C-language type.


File: sphinx.info,  Node: The C++ Domain,  Next: The Standard Domain,  Prev: The C Domain,  Up: Sphinx Domains

7.5 The C++ Domain
==================

The C++ domain (name *cpp*) supports documenting C++ projects.

  The following directives are available:

 -- Restructuredtext Directive: .. cpp:class:: signatures
 -- Restructuredtext Directive: .. cpp:function:: signatures
 -- Restructuredtext Directive: .. cpp:member:: signatures
 -- Restructuredtext Directive: .. cpp:type:: signatures
     Describe a C++ object.  Full signature specification is supported
     - give the signature as you would in the declaration.  Here some
     examples:

         .. cpp:function:: bool namespaced::theclass::method(int arg1, std::string arg2)

            Describes a method with parameters and types.

         .. cpp:function:: bool namespaced::theclass::method(arg1, arg2)

            Describes a method without types.

         .. cpp:function:: const T &array<T>::operator[]() const

            Describes the constant indexing operator of a templated array.

         .. cpp:function:: operator bool() const

            Describe a casting operator here.

         .. cpp:function:: constexpr void foo(std::string &bar[2]) noexcept

            Describe a constexpr function here.

         .. cpp:member:: std::string theclass::name

         .. cpp:member:: std::string theclass::name[N][M]

         .. cpp:type:: theclass::const_iterator

     Will be rendered like this:

           -- C++ Function: bool namespaced::theclass::method (int
                    arg1, std::string arg2)
               Describes a method with parameters and types.

           -- C++ Function: bool namespaced::theclass::method (arg1,
                    arg2)
               Describes a method without types.

           -- C++ Function: const T& array<T>::operator[] () const
               Describes the constant indexing operator of a templated
               array.

           -- C++ Function: operator bool () const
               Describe a casting operator here.

           -- C++ Function: void foo (std::string& bar[2]) noexcept
               Describe a constexpr function here.

           -- C++ Member: std::string theclass::name

           -- C++ Member: std::string theclass::name[N][M]

           -- C++ Type: theclass::const_iterator

 -- Restructuredtext Directive: .. cpp:namespace:: namespace
     Select the current C++ namespace for the following objects.
  These roles link to the given object types:

 -- Restructuredtext Role: :cpp:class:
 -- Restructuredtext Role: :cpp:func:
 -- Restructuredtext Role: :cpp:member:
 -- Restructuredtext Role: :cpp:type:
     Reference a C++ object.  You can give the full signature (and need
     to, for overloaded functions.)

          Note: Sphinx' syntax to give references a custom title can
          interfere with linking to template classes, if nothing
          follows the closing angle bracket, i.e. if the link looks
          like this: `:cpp:class:`MyClass<T>`'.  This is interpreted as
          a link to `T' with a title of `MyClass'.  In this case,
          please escape the opening angle bracket with a backslash,
          like this: `:cpp:class:`MyClass\<T>`'.

     Note on References: It is currently impossible to link to a
     specific version of an overloaded method.  Currently the C++
     domain is the first domain that has basic support for overloaded
     methods and until there is more data for comparison we don't want
     to select a bad syntax to reference a specific overload.
     Currently Sphinx will link to the first overloaded version of the
     method / function.


File: sphinx.info,  Node: The Standard Domain,  Next: The JavaScript Domain,  Prev: The C++ Domain,  Up: Sphinx Domains

7.6 The Standard Domain
=======================

The so-called "standard" domain collects all markup that doesn't
warrant a domain of its own.  Its directives and roles are not prefixed
with a domain name.

  The standard domain is also where custom object descriptions, added
using the *note add_object_type(): 12f. API, are placed.

  There is a set of directives allowing documenting command-line
programs:

 -- Restructuredtext Directive: .. option:: name args, name args, ...
     Describes a command line option or switch.  Option argument names
     should be enclosed in angle brackets.  Example:

         .. option:: -m <module>, --module <module>

            Run a module as a script.

     The directive will create a cross-reference target named after the
     _first_ option, referencable by *note option: c8. (in the example
     case, you'd use something like `:option:`-m`').

 -- Restructuredtext Directive: .. envvar:: name
     Describes an environment variable that the documented code or
     program uses or defines.  Referencable by *note envvar: c5.

 -- Restructuredtext Directive: .. program:: name
     Like *note py;currentmodule: f9, this directive produces no
     output.  Instead, it serves to notify Sphinx that all following
     *note option: c9. directives document options for the program
     called _name_.

     If you use *note program: 130, you have to qualify the references
     in your *note option: c8. roles by the program name, so if you
     have the following situation

         .. program:: rm

         .. option:: -r

            Work recursively.

         .. program:: svn

         .. option:: -r revision

            Specify the revision to work upon.

     then `:option:`rm -r`' would refer to the first option, while
     `:option:`svn -r`' would refer to the second one.

     The program name may contain spaces (in case you want to document
     subcommands like `svn add' and `svn commit' separately).

     New in version 0.5.

  There is also a very generic object description directive, which is
not tied to any domain:

 -- Restructuredtext Directive: .. describe:: text
 -- Restructuredtext Directive: .. object:: text
     This directive produces the same formatting as the specific ones
     provided by domains, but does not create index entries or
     cross-referencing targets.  Example:

         .. describe:: PAPER

            You can set this variable to select a paper size.




File: sphinx.info,  Node: The JavaScript Domain,  Next: The reStructuredText domain,  Prev: The Standard Domain,  Up: Sphinx Domains

7.7 The JavaScript Domain
=========================

The JavaScript domain (name *js*) provides the following directives:

 -- Restructuredtext Directive: .. js:function:: name(signature)
     Describes a JavaScript function or method.  If you want to describe
     arguments as optional use square brackets as *note documented: fe.
     for Python signatures.

     You can use fields to give more details about arguments and their
     expected types, errors which may be thrown by the function, and
     the value being returned:

         .. js:function:: $.getJSON(href, callback[, errback])

            :param string href: An URI to the location of the resource.
            :param callback: Get's called with the object.
            :param errback:
                Get's called in case the request fails. And a lot of other
                text so we need multiple lines
            :throws SomeError: For whatever reason in that case.
            :returns: Something

     This is rendered as:

           -- Javascript Function: $.getJSON (href, callback[, errback])
                    Arguments:

                       * *href* (_string_) - An URI to the location of
                         the resource.

                       * *callback* - Get's called with the object.

                       * *errback* - Get's called in case the request
                         fails. And a lot of other text so we need
                         multiple lines.

                    Throws SomeError: For whatever reason in that case.

                    Returns: Something

 -- Restructuredtext Directive: .. js:class:: name
     Describes a constructor that creates an object.  This is basically
     like a function but will show up with a `class' prefix:

         .. js:class:: MyAnimal(name[, age])

            :param string name: The name of the animal
            :param number age: an optional age for the animal

     This is rendered as:

           -- Javascript Class: MyAnimal (name[, age])
                    Arguments:

                       * *name* (_string_) - The name of the animal

                       * *age* (_number_) - an optional age for the
                         animal

 -- Restructuredtext Directive: .. js:data:: name
     Describes a global variable or constant.

 -- Restructuredtext Directive: .. js:attribute:: object.name
     Describes the attribute _name_ of _object_.
  These roles are provided to refer to the described objects:

 -- Restructuredtext Role: :js:func:
 -- Restructuredtext Role: :js:class:
 -- Restructuredtext Role: :js:data:
 -- Restructuredtext Role: :js:attr:


File: sphinx.info,  Node: The reStructuredText domain,  Next: More domains,  Prev: The JavaScript Domain,  Up: Sphinx Domains

7.8 The reStructuredText domain
===============================

The reStructuredText domain (name *rst*) provides the following
directives:

 -- Restructuredtext Directive: .. rst:directive:: name
     Describes a reST directive.  The _name_ can be a single directive
     name or actual directive syntax (`..' prefix and `::' suffix) with
     arguments that will be rendered differently.  For example:

         .. rst:directive:: foo

            Foo description.

         .. rst:directive:: .. bar:: baz

            Bar description.

     will be rendered as:

           -- Restructuredtext Directive: .. foo::
               Foo description.

           -- Restructuredtext Directive: .. bar:: baz
               Bar description.

 -- Restructuredtext Directive: .. rst:role:: name
     Describes a reST role.  For example:

         .. rst:role:: foo

            Foo description.

     will be rendered as:

           -- Restructuredtext Role: :foo:
               Foo description.
These roles are provided to refer to the described objects:

 -- Restructuredtext Role: :rst:dir:
 -- Restructuredtext Role: :rst:role:


File: sphinx.info,  Node: More domains,  Prev: The reStructuredText domain,  Up: Sphinx Domains

7.9 More domains
================

The sphinx-contrib(1) repository contains more domains available as
extensions; currently Ada, CoffeeScript(2), Erlang(3), HTTP(4),
Jinja(5), PHP(6), Ruby, and Scala(7) domains.

  ---------- Footnotes ----------

  (1) https://bitbucket.org/birkenfeld/sphinx-contrib/

  (2) http://pypi.python.org/pypi/sphinxcontrib-coffee

  (3) http://pypi.python.org/pypi/sphinxcontrib-erlangdomain

  (4) http://pypi.python.org/pypi/sphinxcontrib-httpdomain

  (5) http://pypi.python.org/pypi/sphinxcontrib-jinjadomain

  (6) http://pypi.python.org/pypi/sphinxcontrib-phpdomain

  (7) http://pypi.python.org/pypi/sphinxcontrib-scaladomain


File: sphinx.info,  Node: Available builders,  Next: The build configuration file,  Prev: Sphinx Domains,  Up: Top

8 Available builders
********************

These are the built-in Sphinx builders.  More builders can be added by
*note extensions: 14a.

  The builder's "name" must be given to the *-b* command-line option of
*sphinx-build* to select a builder.  

 -- Class: sphinx.builders.html.StandaloneHTMLBuilder
     This is the standard HTML builder.  Its output is a directory with
     HTML files, complete with style sheets and optionally the reST
     sources.  There are quite a few configuration values that
     customize the output of this builder, see the chapter *note
     Options for HTML output: 14c. for details.

     Its name is `html'.

 -- Class: sphinx.builders.html.DirectoryHTMLBuilder
     This is a subclass of the standard HTML builder.  Its output is a
     directory with HTML files, where each file is called `index.html'
     and placed in a subdirectory named like its page name.  For
     example, the document `markup/rest.rst' will not result in an
     output file `markup/rest.html', but `markup/rest/index.html'.
     When generating links between pages, the `index.html' is omitted,
     so that the URL would look like `markup/rest/'.

     Its name is `dirhtml'.

     New in version 0.6.

 -- Class: sphinx.builders.html.SingleFileHTMLBuilder
     This is an HTML builder that combines the whole project in one
     output file.  (Obviously this only works with smaller projects.)
     The file is named like the master document.  No indices will be
     generated.

     Its name is `singlehtml'.

     New in version 1.0.
  
 -- Class: sphinx.builders.htmlhelp.HTMLHelpBuilder
     This builder produces the same output as the standalone HTML
     builder, but also generates HTML Help support files that allow the
     Microsoft HTML Help Workshop to compile them into a CHM file.

     Its name is `htmlhelp'.
  
 -- Class: sphinx.builders.qthelp.QtHelpBuilder
     This builder produces the same output as the standalone HTML
     builder, but also generates Qt help(1) collection support files
     that allow the Qt collection generator to compile them.

     Its name is `qthelp'.
  
 -- Class: sphinx.builders.devhelp.DevhelpBuilder
     This builder produces the same output as the standalone HTML
     builder, but also generates GNOME Devhelp(2) support file that
     allows the GNOME Devhelp reader to view them.

     Its name is `devhelp'.
  
 -- Class: sphinx.builders.epub.EpubBuilder
     This builder produces the same output as the standalone HTML
     builder, but also generates an _epub_ file for ebook readers.  See
     *note Epub info: 153. for details about it.  For definition of the
     epub format, have a look at <http://idpf.org/epub> or
     <http://en.wikipedia.org/wiki/EPUB>.  The builder creates _EPUB 2_
     files.

     Some ebook readers do not show the link targets of references.
     Therefore this builder adds the targets after the link when
     necessary.  The display of the URLs can be customized by adding
     CSS rules for the class `link-target'.

     Its name is `epub'.
  
 -- Class: sphinx.builders.latex.LaTeXBuilder
     This builder produces a bunch of LaTeX files in the output
     directory.  You have to specify which documents are to be included
     in which LaTeX files via the *note latex_documents: 154.
     configuration value.  There are a few configuration values that
     customize the output of this builder, see the chapter *note
     Options for LaTeX output: 155. for details.

          Note: The produced LaTeX file uses several LaTeX packages
          that may not be present in a "minimal" TeX distribution
          installation.  For TeXLive, the following packages need to be
          installed:

             * latex-recommended

             * latex-extra

             * fonts-recommended

     Its name is `latex'.

  Note that a direct PDF builder using ReportLab is available in
rst2pdf(3) version 0.12 or greater.  You need to add
`'rst2pdf.pdfbuilder'' to your *note extensions: 45. to enable it, its
name is `pdf'.  Refer to the rst2pdf manual(4) for details.  

 -- Class: sphinx.builders.text.TextBuilder
     This builder produces a text file for each reST file - this is
     almost the same as the reST source, but with much of the markup
     stripped for better readability.

     Its name is `text'.

     New in version 0.4.
  
 -- Class: sphinx.builders.manpage.ManualPageBuilder
     This builder produces manual pages in the groff format.  You have
     to specify which documents are to be included in which manual
     pages via the *note man_pages: 158. configuration value.

     Its name is `man'.

          Note: This builder requires the docutils manual page writer,
          which is only available as of docutils 0.6.

     New in version 1.0.
  
 -- Class: sphinx.builders.texinfo.TexinfoBuilder
     This builder produces Texinfo files that can be processed into
     Info files by the *makeinfo* program.  You have to specify which
     documents are to be included in which Texinfo files via the *note
     texinfo_documents: 15a.  configuration value.

     The Info format is the basis of the on-line help system used by
     GNU Emacs and the terminal-based program *info*.  See *note
     Texinfo info: 15b. for more details.  The Texinfo format is the
     official documentation system used by the GNU project.  More
     information on Texinfo can be found at
     <http://www.gnu.org/software/texinfo/>.

     Its name is `texinfo'.

     New in version 1.1.

 -- Class: sphinx.builders.html.SerializingHTMLBuilder
     This builder uses a module that implements the Python
     serialization API (`pickle', `simplejson', `phpserialize', and
     others) to dump the generated HTML documentation.  The pickle
     builder is a subclass of it.

     A concrete subclass of this builder serializing to the PHP
     serialization(5) format could look like this:

         import phpserialize

         class PHPSerializedBuilder(SerializingHTMLBuilder):
             name = 'phpserialized'
             implementation = phpserialize
             out_suffix = '.file.phpdump'
             globalcontext_filename = 'globalcontext.phpdump'
             searchindex_filename = 'searchindex.phpdump'

     
      -- Attribute: implementation
          A module that implements `dump()', `load()', `dumps()' and
          `loads()' functions that conform to the functions with the
          same names from the pickle module.  Known modules
          implementing this interface are `simplejson' (or `json' in
          Python 2.6), `phpserialize', `plistlib', and others.

      -- Attribute: out_suffix
          The suffix for all regular files.

      -- Attribute: globalcontext_filename
          The filename for the file that contains the "global context".
          This is a dict with some general configuration values such as
          the name of the project.

      -- Attribute: searchindex_filename
          The filename for the search index Sphinx generates.

     See *note Serialization builder details: 161. for details about
     the output format.

     New in version 0.5.

 -- Class: sphinx.builders.html.PickleHTMLBuilder
     This builder produces a directory with pickle files containing
     mostly HTML fragments and TOC information, for use of a web
     application (or custom postprocessing tool) that doesn't use the
     standard HTML templates.

     See *note Serialization builder details: 161. for details about
     the output format.

     Its name is `pickle'.  (The old name `web' still works as well.)

     The file suffix is `.fpickle'.  The global context is called
     `globalcontext.pickle', the search index `searchindex.pickle'.

 -- Class: sphinx.builders.html.JSONHTMLBuilder
     This builder produces a directory with JSON files containing
     mostly HTML fragments and TOC information, for use of a web
     application (or custom postprocessing tool) that doesn't use the
     standard HTML templates.

     See *note Serialization builder details: 161. for details about
     the output format.

     Its name is `json'.

     The file suffix is `.fjson'.  The global context is called
     `globalcontext.json', the search index `searchindex.json'.

     New in version 0.5.
  
 -- Class: sphinx.builders.gettext.MessageCatalogBuilder
     This builder produces gettext-style message catalogs.  Each
     top-level file or subdirectory grows a single `.pot' catalog
     template.

     See the documentation on *note Internationalization: 165. for
     further reference.

     Its name is `gettext'.

     New in version 1.1.
  
 -- Class: sphinx.builders.changes.ChangesBuilder
     This builder produces an HTML overview of all *note versionadded:
     a1, *note versionchanged: a2. and *note deprecated: a3. directives
     for the current *note version: 6f.  This is useful to generate a
     ChangeLog file, for example.

     Its name is `changes'.
  
 -- Class: sphinx.builders.linkcheck.CheckExternalLinksBuilder
     This builder scans all documents for external links, tries to open
     them with `urllib2', and writes an overview which ones are broken
     and redirected to standard output and to `output.txt' in the
     output directory.

     Its name is `linkcheck'.
  
 -- Class: sphinx.builders.xml.XMLBuilder
     This builder produces Docutils-native XML files.  The output can be
     transformed with standard XML tools such as XSLT processors into
     arbitrary final forms.

     Its name is `xml'.

     New in version 1.2.

 -- Class: sphinx.builders.xml.PseudoXMLBuilder
     This builder is used for debugging the Sphinx/Docutils "Reader to
     Transform to Writer" pipeline. It produces compact pretty-printed
     "pseudo-XML", files where nesting is indicated by indentation (no
     end-tags). External attributes for all elements are output, and
     internal attributes for any leftover "pending" elements are also
     given.

     Its name is `pseudoxml'.

     New in version 1.2.

  Built-in Sphinx extensions that offer more builders are:

   * *note doctest: 14.

   * *note coverage: 13.

* Menu:

* Serialization builder details::

  ---------- Footnotes ----------

  (1) http://doc.trolltech.com/4.6/qthelp-framework.html

  (2) http://live.gnome.org/devhelp

  (3) http://rst2pdf.googlecode.com

  (4) http://lateral.netmanagers.com.ar/static/manual.pdf

  (5) http://pypi.python.org/pypi/phpserialize


File: sphinx.info,  Node: Serialization builder details,  Up: Available builders

8.1 Serialization builder details
=================================

All serialization builders outputs one file per source file and a few
special files.  They also copy the reST source files in the directory
`_sources' under the output directory.

  The *note PickleHTMLBuilder: 162. is a builtin subclass that
implements the pickle serialization interface.

  The files per source file have the extensions of *note out_suffix:
15e, and are arranged in directories just as the source files are.
They unserialize to a dictionary (or dictionary like structure) with
these keys:

`body'
     The HTML "body" (that is, the HTML rendering of the source file),
     as rendered by the HTML translator.

`title'
     The title of the document, as HTML (may contain markup).

`toc'
     The table of contents for the file, rendered as an HTML `<ul>'.

`display_toc'
     A boolean that is `True' if the `toc' contains more than one entry.

`current_page_name'
     The document name of the current file.

`parents', `prev' and `next'
     Information about related chapters in the TOC tree.  Each relation
     is a dictionary with the keys `link' (HREF for the relation) and
     `title' (title of the related document, as HTML).  `parents' is a
     list of relations, while `prev' and `next' are a single relation.

`sourcename'
     The name of the source file under `_sources'.

  The special files are located in the root output directory.  They are:

*note SerializingHTMLBuilder.globalcontext_filename: 15f.
     A pickled dict with these keys:

    `project', `copyright', `release', `version'
          The same values as given in the configuration file.

    `style'
          *note html_style: 16b.

    `last_updated'
          Date of last build.

    `builder'
          Name of the used builder, in the case of pickles this is
          always `'pickle''.

    `titles'
          A dictionary of all documents' titles, as HTML strings.

*note SerializingHTMLBuilder.searchindex_filename: 160.
     An index that can be used for searching the documentation.  It is
     a pickled list with these entries:

        * A list of indexed docnames.

        * A list of document titles, as HTML strings, in the same order
          as the first list.

        * A dict mapping word roots (processed by an English-language
          stemmer) to a list of integers, which are indices into the
          first list.

`environment.pickle'
     The build environment.  This is always a pickle file, independent
     of the builder and a copy of the environment that was used when
     the builder was started.

          Todo: Document common members.

     Unlike the other pickle files this pickle file requires that the
     `sphinx' package is available on unpickling.


File: sphinx.info,  Node: The build configuration file,  Next: Internationalization,  Prev: Available builders,  Up: Top

9 The build configuration file
******************************

The *note configuration directory: 30. must contain a file named
`conf.py'.  This file (containing Python code) is called the "build
configuration file" and contains all configuration needed to customize
Sphinx input and output behavior.

  The configuration file is executed as Python code at build time (using
`execfile()', and with the current directory set to its containing
directory), and therefore can execute arbitrarily complex code.  Sphinx
then reads simple names from the file's namespace as its configuration.

  Important points to note:

   * If not otherwise documented, values must be strings, and their
     default is the empty string.

   * The term "fully-qualified name" refers to a string that names an
     importable Python object inside a module; for example, the FQN
     `"sphinx.builders.Builder"' means the `Builder' class in the
     `sphinx.builders' module.

   * Remember that document names use `/' as the path separator and
     don't contain the file name extension.

   * Since `conf.py' is read as a Python file, the usual rules apply for
     encodings and Unicode support: declare the encoding using an
     encoding cookie (a comment like `# -*- coding: utf-8 -*-') and use
     Unicode string literals when you include non-ASCII characters in
     configuration values.

   * The contents of the config namespace are pickled (so that Sphinx
     can find out when configuration changes), so it may not contain
     unpickleable values - delete them from the namespace with `del' if
     appropriate.  Modules are removed automatically, so you don't need
     to `del' your imports after use.

   * There is a special object named `tags' available in the config
     file.  It can be used to query and change the tags (see *note
     Including content based on tags: e9.).  Use `tags.has('tag')' to
     query, `tags.add('tag')' and `tags.remove('tag')' to change.

* Menu:

* General configuration::
* Project information::
* Options for internationalization::
* Options for HTML output::
* Options for epub output::
* Options for LaTeX output::
* Options for text output::
* Options for manual page output::
* Options for Texinfo output::
* Options for the linkcheck builder::
* Options for the XML builder::


File: sphinx.info,  Node: General configuration,  Next: Project information,  Up: The build configuration file

9.1 General configuration
=========================

 -- Configuration Value: extensions
     A list of strings that are module names of Sphinx extensions.
     These can be extensions coming with Sphinx (named `sphinx.ext.*')
     or custom ones.

     Note that you can extend `sys.path' within the conf file if your
     extensions live in another directory - but make sure you use
     absolute paths.  If your extension path is relative to the *note
     configuration directory: 30, use `os.path.abspath()' like so:

         import sys, os

         sys.path.append(os.path.abspath('sphinxext'))

         extensions = ['extname']

     That way, you can load an extension called `extname' from the
     subdirectory `sphinxext'.

     The configuration file itself can be an extension; for that, you
     only need to provide a `setup()' function in it.

 -- Configuration Value: source_suffix
     The file name extension of source files.  Only files with this
     suffix will be read as sources.  Default is `'.rst''.

 -- Configuration Value: source_encoding
     The encoding of all reST source files.  The recommended encoding,
     and the default value, is `'utf-8-sig''.

     New in version 0.5: Previously, Sphinx accepted only UTF-8 encoded
     sources.

 -- Configuration Value: master_doc
     The document name of the "master" document, that is, the document
     that contains the root *note toctree: 93. directive.  Default is
     `'contents''.

 -- Configuration Value: exclude_patterns
     A list of glob-style patterns that should be excluded when looking
     for source files. (1) They are matched against the source file
     names relative to the source directory, using slashes as directory
     separators on all platforms.

     Example patterns:

        - `'library/xml.rst'' - ignores the `library/xml.rst' file
          (replaces entry in *note unused_docs: 96.)

        - `'library/xml'' - ignores the `library/xml' directory
          (replaces entry in *note exclude_trees: 97.)

        - `'library/xml*'' - ignores all files and directories starting
          with `library/xml'

        - `'**/.svn'' - ignores all `.svn' directories (replaces entry
          in *note exclude_dirnames: 171.)

     *note exclude_patterns: 170. is also consulted when looking for
     static files in *note html_static_path: 172.

     New in version 1.0.

 -- Configuration Value: unused_docs
     A list of document names that are present, but not currently
     included in the toctree.  Use this setting to suppress the warning
     that is normally emitted in that case.

     Deprecated since version 1.0: Use *note exclude_patterns: 170.
     instead.

 -- Configuration Value: exclude_trees
     A list of directory paths, relative to the source directory, that
     are to be recursively excluded from the search for source files,
     that is, their subdirectories won't be searched too.  The default
     is `[]'.

     New in version 0.4.

     Deprecated since version 1.0: Use *note exclude_patterns: 170.
     instead.

 -- Configuration Value: exclude_dirnames
     A list of directory names that are to be excluded from any
     recursive operation Sphinx performs (e.g. searching for source
     files or copying static files).  This is useful, for example, to
     exclude version-control-specific directories like `'CVS''.  The
     default is `[]'.

     New in version 0.5.

     Deprecated since version 1.0: Use *note exclude_patterns: 170.
     instead.

 -- Configuration Value: templates_path
     A list of paths that contain extra templates (or templates that
     overwrite builtin/theme-specific templates).  Relative paths are
     taken as relative to the configuration directory.

 -- Configuration Value: template_bridge
     A string with the fully-qualified name of a callable (or simply a
     class) that returns an instance of *note TemplateBridge: 175.  This
     instance is then used to render HTML documents, and possibly the
     output of other builders (currently the changes builder).  (Note
     that the template bridge must be made theme-aware if HTML themes
     are to be used.)

 -- Configuration Value: rst_epilog
     A string of reStructuredText that will be included at the end of
     every source file that is read.  This is the right place to add
     substitutions that should be available in every file.  An example:

         rst_epilog = """
         .. |psf| replace:: Python Software Foundation
         """

     New in version 0.6.

 -- Configuration Value: rst_prolog
     A string of reStructuredText that will be included at the
     beginning of every source file that is read.

     New in version 1.0.

 -- Configuration Value: primary_domain
     The name of the default *note domain: 41.  Can also be `None' to
     disable a default domain.  The default is `'py''.  Those objects
     in other domains (whether the domain name is given explicitly, or
     selected by a *note default-domain: f6. directive) will have the
     domain name explicitly prepended when named (e.g., when the
     default domain is C, Python functions will be named "Python
     function", not just "function").

     New in version 1.0.

 -- Configuration Value: default_role
     The name of a reST role (builtin or Sphinx extension) to use as
     the default role, that is, for text marked up ``like this`'.  This
     can be set to `'py:obj'' to make ``filter`' a cross-reference to
     the Python function "filter".  The default is `None', which
     doesn't reassign the default role.

     The default role can always be set within individual documents
     using the standard reST `default-role' directive.

     New in version 0.4.

 -- Configuration Value: keep_warnings
     If true, keep warnings as "system message" paragraphs in the built
     documents.  Regardless of this setting, warnings are always
     written to the standard error stream when `sphinx-build' is run.

     The default is `False', the pre-0.5 behavior was to always keep
     them.

     New in version 0.5.

 -- Configuration Value: needs_sphinx
     If set to a `major.minor' version string like `'1.1'', Sphinx will
     compare it with its version and refuse to build if it is too old.
     Default is no requirement.

     New in version 1.0.

 -- Configuration Value: nitpicky
     If true, Sphinx will warn about _all_ references where the target
     cannot be found.  Default is `False'.  You can activate this mode
     temporarily using the `-n' command-line switch.

     New in version 1.0.

 -- Configuration Value: nitpick_ignore
     A list of `(type, target)' tuples (by default empty) that should
     be ignored when generating warnings in "nitpicky mode".  Note that
     `type' should include the domain name.  An example entry would be
     `('py:func', 'int')'.

     New in version 1.1.

  ---------- Footnotes ----------

  (1) A note on available globbing syntax: you can use the standard
shell constructs `*', `?', `[...]' and `[!...]' with the feature that
these all don't match slashes.  A double star `**' can be used to match
any sequence of characters _including_ slashes.


File: sphinx.info,  Node: Project information,  Next: Options for internationalization,  Prev: General configuration,  Up: The build configuration file

9.2 Project information
=======================

 -- Configuration Value: project
     The documented project's name.

 -- Configuration Value: copyright
     A copyright statement in the style `'2008, Author Name''.

 -- Configuration Value: version
     The major project version, used as the replacement for
     `|version|'.  For example, for the Python documentation, this may
     be something like `2.6'.

 -- Configuration Value: release
     The full project version, used as the replacement for `|release|'
     and e.g. in the HTML templates.  For example, for the Python
     documentation, this may be something like `2.6.0rc1'.

     If you don't need the separation provided between *note version:
     6f. and *note release: 71, just set them both to the same value.

 -- Configuration Value: today
 -- Configuration Value: today_fmt
     These values determine how to format the current date, used as the
     replacement for `|today|'.

        * If you set *note today: df. to a non-empty value, it is used.

        * Otherwise, the current time is formatted using
          `time.strftime()' and the format given in *note today_fmt: de.

     The default is no *note today: df. and a *note today_fmt: de. of
     `'%B %d, %Y'' (or, if translation is enabled with *note language:
     17c, an equivalent %format for the selected locale).

 -- Configuration Value: highlight_language
     The default language to highlight source code in.  The default is
     `'python''.  The value should be a valid Pygments lexer name, see
     *note Showing code examples: af. for more details.

     New in version 0.5.

 -- Configuration Value: pygments_style
     The style name to use for Pygments highlighting of source code.
     The default style is selected by the theme for HTML output, and
     `'sphinx'' otherwise.

     Changed in version 0.3: If the value is a fully-qualified name of
     a custom Pygments style class, this is then used as custom style.

 -- Configuration Value: add_function_parentheses
     A boolean that decides whether parentheses are appended to
     function and method role text (e.g. the content of
     `:func:`input`') to signify that the name is callable.  Default is
     `True'.

 -- Configuration Value: add_module_names
     A boolean that decides whether module names are prepended to all
     *note object: f2. names (for object types where a "module" of some
     kind is defined), e.g. for *note py;function: fd. directives.
     Default is `True'.

 -- Configuration Value: show_authors
     A boolean that decides whether *note codeauthor: e7. and *note
     sectionauthor: e5. directives produce any output in the built
     files.

 -- Configuration Value: modindex_common_prefix
     A list of prefixes that are ignored for sorting the Python module
     index (e.g., if this is set to `['foo.']', then `foo.bar' is shown
     under `B', not `F'). This can be handy if you document a project
     that consists of a single package.  Works only for the HTML
     builder currently.  Default is `[]'.

     New in version 0.6.

 -- Configuration Value: trim_footnote_reference_space
     Trim spaces before footnote references that are necessary for the
     reST parser to recognize the footnote, but do not look too nice in
     the output.

     New in version 0.6.

 -- Configuration Value: trim_doctest_flags
     If true, doctest flags (comments looking like `# doctest: FLAG,
     ...') at the ends of lines and `<BLANKLINE>' markers are removed
     for all code blocks showing interactive Python sessions (i.e.
     doctests).  Default is true.  See the extension *note doctest: 14.
     for more possibilities of including doctests.

     New in version 1.0.

     Changed in version 1.1: Now also removes `<BLANKLINE>'.


File: sphinx.info,  Node: Options for internationalization,  Next: Options for HTML output,  Prev: Project information,  Up: The build configuration file

9.3 Options for internationalization
====================================

These options influence Sphinx' _Native Language Support_.  See the
documentation on *note Internationalization: 165. for details.

 -- Configuration Value: language
     The code for the language the docs are written in.  Any text
     automatically generated by Sphinx will be in that language.  Also,
     Sphinx will try to substitute individual paragraphs from your
     documents with the translation sets obtained from *note
     locale_dirs: 184.  In the LaTeX builder, a suitable language will
     be selected as an option for the _Babel_ package.  Default is
     `None', which means that no translation will be done.

     New in version 0.5.

     Currently supported languages by Sphinx are:

        * `bn' - Bengali

        * `ca' - Catalan

        * `cs' - Czech

        * `da' - Danish

        * `de' - German

        * `en' - English

        * `es' - Spanish

        * `et' - Estonian

        * `fa' - Iranian

        * `fi' - Finnish

        * `fr' - French

        * `hr' - Croatian

        * `hu' - Hungarian

        * `it' - Italian

        * `ja' - Japanese

        * `ko' - Korean

        * `lt' - Lithuanian

        * `lv' - Latvian

        * `nb_NO' - Norwegian Bokmal

        * `ne' - Nepali

        * `nl' - Dutch

        * `pl' - Polish

        * `pt_BR' - Brazilian Portuguese

        * `ru' - Russian

        * `sk' - Slovak

        * `sl' - Slovenian

        * `sv' - Swedish

        * `tr' - Turkish

        * `uk_UA' - Ukrainian

        * `zh_CN' - Simplified Chinese

        * `zh_TW' - Traditional Chinese

 -- Configuration Value: locale_dirs
     New in version 0.5.

     Directories in which to search for additional message catalogs (see
     *note language: 17c.), relative to the source directory.  The
     directories on this path are searched by the standard `gettext'
     module.

     Internal messages are fetched from a text domain of `sphinx'; so
     if you add the directory `./locale' to this settting, the message
     catalogs (compiled from `.po' format using *msgfmt*) must be in
     `./locale/_language_/LC_MESSAGES/sphinx.mo'.  The text domain of
     individual documents depends on *note gettext_compact: 185.

     The default is `[]'.

 -- Configuration Value: gettext_compact
     New in version 1.1.

     If true, a document's text domain is its docname if it is a
     top-level project file and its very base directory otherwise.

     By default, the document `markup/code.rst' ends up in the `markup'
     text domain.  With this option set to `False', it is `markup/code'.


File: sphinx.info,  Node: Options for HTML output,  Next: Options for epub output,  Prev: Options for internationalization,  Up: The build configuration file

9.4 Options for HTML output
===========================

These options influence HTML as well as HTML Help output, and other
builders that use Sphinx' HTMLWriter class.

 -- Configuration Value: html_theme
     The "theme" that the HTML output should use.  See the *note
     section about theming: 188.  The default is `'default''.

     New in version 0.6.

 -- Configuration Value: html_theme_options
     A dictionary of options that influence the look and feel of the
     selected theme.  These are theme-specific.  For the options
     understood by the builtin themes, see *note this section: 18a.

     New in version 0.6.

 -- Configuration Value: html_theme_path
     A list of paths that contain custom themes, either as
     subdirectories or as zip files.  Relative paths are taken as
     relative to the configuration directory.

     New in version 0.6.

 -- Configuration Value: html_style
     The style sheet to use for HTML pages.  A file of that name must
     exist either in Sphinx' `static/' path, or in one of the custom
     paths given in *note html_static_path: 172.  Default is the
     stylesheet given by the selected theme.  If you only want to add
     or override a few things compared to the theme's stylesheet, use
     CSS `@import' to import the theme's stylesheet.

 -- Configuration Value: html_title
     The "title" for HTML documentation generated with Sphinx' own
     templates.  This is appended to the `<title>' tag of individual
     pages, and used in the navigation bar as the "topmost" element.
     It defaults to `'_<project>_ v_<revision>_ documentation'', where
     the placeholders are replaced by the config values of the same
     name.

 -- Configuration Value: html_short_title
     A shorter "title" for the HTML docs.  This is used in for links in
     the header and in the HTML Help docs.  If not given, it defaults
     to the value of *note html_title: 18c.

     New in version 0.4.

 -- Configuration Value: html_context
     A dictionary of values to pass into the template engine's context
     for all pages.  Single values can also be put in this dictionary
     using the `-A' command-line option of `sphinx-build'.

     New in version 0.5.

 -- Configuration Value: html_logo
     If given, this must be the name of an image file that is the logo
     of the docs.  It is placed at the top of the sidebar; its width
     should therefore not exceed 200 pixels.  Default: `None'.

     New in version 0.4.1: The image file will be copied to the
     `_static' directory of the output HTML, so an already existing
     file with that name will be overwritten.

 -- Configuration Value: html_favicon
     If given, this must be the name of an image file (within the
     static path, see below) that is the favicon of the docs.  Modern
     browsers use this as icon for tabs, windows and bookmarks.  It
     should be a Windows-style icon file (`.ico'), which is 16x16 or
     32x32 pixels large.  Default: `None'.

     New in version 0.4.

 -- Configuration Value: html_static_path
     A list of paths that contain custom static files (such as style
     sheets or script files).  Relative paths are taken as relative to
     the configuration directory.  They are copied to the output
     directory after the theme's static files, so a file named
     `default.css' will overwrite the theme's `default.css'.

     Changed in version 0.4: The paths in *note html_static_path: 172.
     can now contain subdirectories.

     Changed in version 1.0: The entries in *note html_static_path:
     172. can now be single files.

 -- Configuration Value: html_last_updated_fmt
     If this is not the empty string, a 'Last updated on:' timestamp is
     inserted at every page bottom, using the given `strftime()'
     format.  Default is `'%b %d, %Y'' (or a locale-dependent
     equivalent).

 -- Configuration Value: html_use_smartypants
     If true, _SmartyPants_ will be used to convert quotes and dashes to
     typographically correct entities.  Default: `True'.

 -- Configuration Value: html_add_permalinks
     Sphinx will add "permalinks" for each heading and description
     environment as paragraph signs that become visible when the mouse
     hovers over them.

     This value determines the text for the permalink; it defaults to
     `"¶"'.  Set it to `None' or the empty string to disable permalinks.

     New in version 0.6: Previously, this was always activated.

     Changed in version 1.1: This can now be a string to select the
     actual text of the link.  Previously, only boolean values were
     accepted.

 -- Configuration Value: html_sidebars
     Custom sidebar templates, must be a dictionary that maps document
     names to template names.

     The keys can contain glob-style patterns (1), in which case all
     matching documents will get the specified sidebars.  (A warning is
     emitted when a more than one glob-style pattern matches for any
     document.)

     The values can be either lists or single strings.

        * If a value is a list, it specifies the complete list of
          sidebar templates to include.  If all or some of the default
          sidebars are to be included, they must be put into this list
          as well.

          The default sidebars (for documents that don't match any
          pattern) are: `['localtoc.html', 'relations.html',
          'sourcelink.html', 'searchbox.html']'.

        * If a value is a single string, it specifies a custom sidebar
          to be added between the `'sourcelink.html'' and
          `'searchbox.html'' entries.  This is for compatibility with
          Sphinx versions before 1.0.

     Builtin sidebar templates that can be rendered are:

        * *localtoc.html* - a fine-grained table of contents of the
          current document

        * *globaltoc.html* - a coarse-grained table of contents for the
          whole documentation set, collapsed

        * *relations.html* - two links to the previous and next
          documents

        * *sourcelink.html* - a link to the source of the current
          document, if enabled in *note html_show_sourcelink: 195.

        * *searchbox.html* - the "quick search" box

     Example:

         html_sidebars = {
            '**': ['globaltoc.html', 'sourcelink.html', 'searchbox.html'],
            'using/windows': ['windowssidebar.html', 'searchbox.html'],
         }

     This will render the custom template `windowssidebar.html' and the
     quick search box within the sidebar of the given document, and
     render the default sidebars for all other pages (except that the
     local TOC is replaced by the global TOC).

     New in version 1.0: The ability to use globbing keys and to
     specify multiple sidebars.

     Note that this value only has no effect if the chosen theme does
     not possess a sidebar, like the builtin *scrolls* and *haiku*
     themes.

 -- Configuration Value: html_additional_pages
     Additional templates that should be rendered to HTML pages, must
     be a dictionary that maps document names to template names.

     Example:

         html_additional_pages = {
             'download': 'customdownload.html',
         }

     This will render the template `customdownload.html' as the page
     `download.html'.

 -- Configuration Value: html_domain_indices
     If true, generate domain-specific indices in addition to the
     general index.  For e.g. the Python domain, this is the global
     module index.  Default is `True'.

     This value can be a bool or a list of index names that should be
     generated.  To find out the index name for a specific index, look
     at the HTML file name.  For example, the Python module index has
     the name `'py-modindex''.

     New in version 1.0.

 -- Configuration Value: html_use_modindex
     If true, add a module index to the HTML documents.   Default is
     `True'.

     Deprecated since version 1.0: Use *note html_domain_indices: 197.

 -- Configuration Value: html_use_index
     If true, add an index to the HTML documents.  Default is `True'.

     New in version 0.4.

 -- Configuration Value: html_split_index
     If true, the index is generated twice: once as a single page with
     all the entries, and once as one page per starting letter.
     Default is `False'.

     New in version 0.4.

 -- Configuration Value: html_copy_source
     If true, the reST sources are included in the HTML build as
     `_sources/_name_'.  The default is `True'.

          Warning: If this config value is set to `False', the
          JavaScript search function will only display the titles of
          matching documents, and no excerpt from the matching contents.

 -- Configuration Value: html_show_sourcelink
     If true (and *note html_copy_source: 19b. is true as well), links
     to the reST sources will be added to the sidebar.  The default is
     `True'.

     New in version 0.6.

 -- Configuration Value: html_use_opensearch
     If nonempty, an `OpenSearch <http://opensearch.org>' description
     file will be output, and all pages will contain a `<link>' tag
     referring to it.  Since OpenSearch doesn't support relative URLs
     for its search page location, the value of this option must be the
     base URL from which these documents are served (without trailing
     slash), e.g. `"http://docs.python.org"'.  The default is `'''.

 -- Configuration Value: html_file_suffix
     This is the file name suffix for generated HTML files.  The
     default is `".html"'.

     New in version 0.4.

 -- Configuration Value: html_link_suffix
     Suffix for generated links to HTML files.  The default is whatever
     *note html_file_suffix: 19d. is set to; it can be set differently
     (e.g. to support different web server setups).

     New in version 0.6.

 -- Configuration Value: html_translator_class
     A string with the fully-qualified name of a HTML Translator class,
     that is, a subclass of Sphinx' `HTMLTranslator', that is used to
     translate document trees to HTML.  Default is `None' (use the
     builtin translator).

 -- Configuration Value: html_show_copyright
     If true, "(C) Copyright ..." is shown in the HTML footer. Default
     is `True'.

     New in version 1.0.

 -- Configuration Value: html_show_sphinx
     If true, "Created using Sphinx" is shown in the HTML footer.
     Default is `True'.

     New in version 0.4.

 -- Configuration Value: html_output_encoding
     Encoding of HTML output files. Default is `'utf-8''.  Note that
     this encoding name must both be a valid Python encoding name and a
     valid HTML `charset' value.

     New in version 1.0.

 -- Configuration Value: html_compact_lists
     If true, list items containing only a single paragraph will not be
     rendered with a `<p>' element.  This is standard docutils
     behavior.  Default: `True'.

     New in version 1.0.

 -- Configuration Value: html_secnumber_suffix
     Suffix for section numbers.  Default: `". "'.  Set to `" "' to
     suppress the final dot on section numbers.

     New in version 1.0.

 -- Configuration Value: html_search_language
     Language to be used for generating the HTML full-text search
     index.  This defaults to the global language selected with *note
     language: 17c.  If there is no support for this language, `"en"'
     is used which selects the English language.

     Support is present for these languages:

        * `en' - English

        * `ja' - Japanese

     New in version 1.1.

 -- Configuration Value: html_search_options
     A dictionary with options for the search language support, empty
     by default.  The meaning of these options depends on the language
     selected.

     The English support has no options.

     The Japanese support has these options:

        * `type' - `'mecab'' or `'default'' (selects either MeCab or
          TinySegmenter word splitter algorithm)

        * `dic_enc' - the encoding for the MeCab algorithm

        * `dict' - the dictionary to use for the MeCab algorithm

        * `lib' - the library name for finding the MeCab library via
          ctypes if the Python binding is not installed

     New in version 1.1.

 -- Configuration Value: html_search_scorer
     The name of a javascript file (relative to the configuration
     directory) that implements a search results scorer.  If empty, the
     default will be used.

     New in version 1.2.

 -- Configuration Value: htmlhelp_basename
     Output file base name for HTML help builder.  Default is `'pydoc''.

  ---------- Footnotes ----------

  (1) A note on available globbing syntax: you can use the standard
shell constructs `*', `?', `[...]' and `[!...]' with the feature that
these all don't match slashes.  A double star `**' can be used to match
any sequence of characters _including_ slashes.


File: sphinx.info,  Node: Options for epub output,  Next: Options for LaTeX output,  Prev: Options for HTML output,  Up: The build configuration file

9.5 Options for epub output
===========================

These options influence the epub output.  As this builder derives from
the HTML builder, the HTML options also apply where appropriate.  The
actual values for some of the options is not really important, they
just have to be entered into the Dublin Core metadata(1).

 -- Configuration Value: epub_basename
     The basename for the epub file.  It defaults to the *note project:
     6b. name.

 -- Configuration Value: epub_theme
     The HTML theme for the epub output.  Since the default themes are
     not optimized for small screen space, using the same theme for
     HTML and epub output is usually not wise.  This defaults to
     `'epub'', a theme designed to save visual space.

 -- Configuration Value: epub_theme_options
     A dictionary of options that influence the look and feel of the
     selected theme.  These are theme-specific.  For the options
     understood by the builtin themes, see *note this section: 18a.

     New in version 1.2.

 -- Configuration Value: epub_title
     The title of the document.  It defaults to the *note html_title:
     18c. option but can be set independently for epub creation.

 -- Configuration Value: epub_author
     The author of the document.  This is put in the Dublin Core
     metadata.  The default value is `'unknown''.

 -- Configuration Value: epub_language
     The language of the document.  This is put in the Dublin Core
     metadata.  The default is the *note language: 17c. option or
     `'en'' if unset.

 -- Configuration Value: epub_publisher
     The publisher of the document.  This is put in the Dublin Core
     metadata.  You may use any sensible string, e.g. the project
     homepage.  The default value is `'unknown''.

 -- Configuration Value: epub_copyright
     The copyright of the document.  It defaults to the *note
     copyright: 6d.  option but can be set independently for epub
     creation.

 -- Configuration Value: epub_identifier
     An identifier for the document.  This is put in the Dublin Core
     metadata.  For published documents this is the ISBN number, but
     you can also use an alternative scheme, e.g. the project homepage.
     The default value is `'unknown''.

 -- Configuration Value: epub_scheme
     The publication scheme for the *note epub_identifier: 1b3.  This
     is put in the Dublin Core metadata.  For published books the
     scheme is `'ISBN''.  If you use the project homepage, `'URL''
     seems reasonable.  The default value is `'unknown''.

 -- Configuration Value: epub_uid
     A unique identifier for the document.  This is put in the Dublin
     Core metadata.  You may use a random string.  The default value is
     `'unknown''.

 -- Configuration Value: epub_cover
     The cover page information.  This is a tuple containing the
     filenames of the cover image and the html template.  The rendered
     html cover page is inserted as the first item in the spine in
     `content.opf'.  If the template filename is empty, no html cover
     page is created.  No cover at all is created if the tuple is
     empty.  Examples:

         epub_cover = ('_static/cover.png', 'epub-cover.html')
         epub_cover = ('_static/cover.png', '')
         epub_cover = ()

     The default value is `()'.

     New in version 1.1.

 -- Configuration Value: epub_guide
     Meta data for the guide element of `content.opf'. This is a
     sequence of tuples containing the _type_, the _uri_ and the
     _title_ of the optional guide information. See the OPF
     documentation at <http://idpf.org/epub> for details. If possible,
     default entries for the _cover_ and _toc_ types are automatically
     inserted. However, the types can be explicitely overwritten if the
     default entries are not appropriate. Example:

         epub_guide = (('cover', 'cover.html', u'Cover Page'),)

     The default value is `()'.

 -- Configuration Value: epub_pre_files
     Additional files that should be inserted before the text generated
     by Sphinx. It is a list of tuples containing the file name and the
     title.  If the title is empty, no entry is added to `toc.ncx'.
     Example:

         epub_pre_files = [
             ('index.html', 'Welcome'),
         ]

     The default value is `[]'.

 -- Configuration Value: epub_post_files
     Additional files that should be inserted after the text generated
     by Sphinx.  It is a list of tuples containing the file name and
     the title.  This option can be used to add an appendix.  If the
     title is empty, no entry is added to `toc.ncx'.  The default value
     is `[]'.

 -- Configuration Value: epub_exclude_files
     A list of files that are generated/copied in the build directory
     but should not be included in the epub file.  The default value is
     `[]'.

 -- Configuration Value: epub_tocdepth
     The depth of the table of contents in the file `toc.ncx'.  It
     should be an integer greater than zero.  The default value is 3.
     Note: A deeply nested table of contents may be difficult to
     navigate.

 -- Configuration Value: epub_tocdup
     This flag determines if a toc entry is inserted again at the
     beginning of it's nested toc listing.  This allows easier
     navitation to the top of a chapter, but can be confusing because
     it mixes entries of differnet depth in one list.  The default
     value is `True'.

 -- Configuration Value: epub_fix_images
     This flag determines if sphinx should try to fix image formats
     that are not supported by some epub readers.  At the moment
     palette images with a small color table are upgraded.  You need
     the Python Image Library (PIL) installed to use this option.  The
     default value is `False' because the automatic conversion may lose
     information.

     New in version 1.2.

 -- Configuration Value: epub_max_image_width
     This option specifies the maximum width of images.  If it is set
     to a value greater than zero, images with a width larger than the
     given value are scaled accordingly.  If it is zero, no scaling is
     performed. The default value is `0'.  You need the Python Image
     Library (PIL) installed to use this option.

     New in version 1.2.

  ---------- Footnotes ----------

  (1) http://dublincore.org/


File: sphinx.info,  Node: Options for LaTeX output,  Next: Options for text output,  Prev: Options for epub output,  Up: The build configuration file

9.6 Options for LaTeX output
============================

These options influence LaTeX output.

 -- Configuration Value: latex_documents
     This value determines how to group the document tree into LaTeX
     source files.  It must be a list of tuples `(startdocname,
     targetname, title, author, documentclass, toctree_only)', where
     the items are:

        * _startdocname_: document name that is the "root" of the LaTeX
          file.  All documents referenced by it in TOC trees will be
          included in the LaTeX file too.  (If you want only one LaTeX
          file, use your *note master_doc: 98.  here.)

        * _targetname_: file name of the LaTeX file in the output
          directory.

        * _title_: LaTeX document title.  Can be empty to use the title
          of the _startdoc_.  This is inserted as LaTeX markup, so
          special characters like a backslash or ampersand must be
          represented by the proper LaTeX commands if they are to be
          inserted literally.

        * _author_: Author for the LaTeX document.  The same LaTeX
          markup caveat as for _title_ applies.  Use `\and' to separate
          multiple authors, as in: `'John \and Sarah''.

        * _documentclass_: Normally, one of `'manual'' or `'howto''
          (provided by Sphinx).  Other document classes can be given,
          but they must include the "sphinx" package in order to define
          Sphinx' custom LaTeX commands.  "howto" documents will not
          get appendices.  Also, howtos will have a simpler title page.

        * _toctree_only_: Must be `True' or `False'.  If `True', the
          _startdoc_ document itself is not included in the output,
          only the documents referenced by it via TOC trees.  With this
          option, you can put extra stuff in the master document that
          shows up in the HTML, but not the LaTeX output.

     New in version 0.3: The 6th item `toctree_only'.  Tuples with 5
     items are still accepted.

 -- Configuration Value: latex_logo
     If given, this must be the name of an image file (relative to the
     configuration directory) that is the logo of the docs.  It is
     placed at the top of the title page.  Default: `None'.

 -- Configuration Value: latex_use_parts
     If true, the topmost sectioning unit is parts, else it is
     chapters.  Default: `False'.

     New in version 0.3.

 -- Configuration Value: latex_appendices
     A list of document names to append as an appendix to all manuals.

 -- Configuration Value: latex_domain_indices
     If true, generate domain-specific indices in addition to the
     general index.  For e.g. the Python domain, this is the global
     module index.  Default is `True'.

     This value can be a bool or a list of index names that should be
     generated, like for *note html_domain_indices: 197.

     New in version 1.0.

 -- Configuration Value: latex_use_modindex
     If true, add a module index to LaTeX documents.   Default is
     `True'.

     Deprecated since version 1.0: Use *note latex_domain_indices: 1c3.

 -- Configuration Value: latex_show_pagerefs
     If true, add page references after internal references.  This is
     very useful for printed copies of the manual.  Default is `False'.

     New in version 1.0.

 -- Configuration Value: latex_show_urls
     Control whether to display URL addresses.  This is very useful for
     printed copies of the manual.  The setting can have the following
     values:

        * `'no'' - do not display URLs (default)

        * `'footnote'' - display URLs in footnotes

        * `'inline'' - display URLs inline in parentheses

     New in version 1.0.

     Changed in version 1.1: This value is now a string; previously it
     was a boolean value, and a true value selected the `'inline''
     display.  For backwards compatibility, `True' is still accepted.

 -- Configuration Value: latex_elements
     New in version 0.5.

     A dictionary that contains LaTeX snippets that override those
     Sphinx usually puts into the generated `.tex' files.

     Keep in mind that backslashes must be doubled in Python string
     literals to avoid interpretation as escape sequences.

        * Keys that you may want to override include:

         `'papersize''
               Paper size option of the document class (`'a4paper'' or
               `'letterpaper''), default `'letterpaper''.

         `'pointsize''
               Point size option of the document class (`'10pt'',
               `'11pt'' or `'12pt''), default `'10pt''.

         `'babel''
               "babel" package inclusion, default
               `'\\usepackage{babel}''.

         `'fontpkg''
               Font package inclusion, default `'\\usepackage{times}''
               (which uses Times and Helvetica).  You can set this to
               `''' to use the Computer Modern fonts.

         `'fncychap''
               Inclusion of the "fncychap" package (which makes fancy
               chapter titles), default
               `'\\usepackage[Bjarne]{fncychap}'' for English
               documentation, `'\\usepackage[Sonny]{fncychap}'' for
               internationalized docs (because the "Bjarne" style uses
               numbers spelled out in English).  Other "fncychap"
               styles you can try include "Lenny", "Glenn", "Conny" and
               "Rejne".  You can also set this to `''' to disable
               fncychap.

         `'preamble''
               Additional preamble content, default empty.

         `'footer'`'
               Additional footer content (before the indices), default
               empty.

        * Keys that don't need be overridden unless in special cases
          are:

         `'inputenc''
               "inputenc" package inclusion, default
               `'\\usepackage[utf8]{inputenc}''.

         `'fontenc''
               "fontenc" package inclusion, default
               `'\\usepackage[T1]{fontenc}''.

         `'maketitle''
               "maketitle" call, default `'\\maketitle''.  Override if
               you want to generate a differently-styled title page.

         `'tableofcontents''
               "tableofcontents" call, default `'\\tableofcontents''.
               Override if you want to generate a different table of
               contents or put content between the title page and the
               TOC.

         `'printindex''
               "printindex" call, the last thing in the file, default
               `'\\printindex''.  Override if you want to generate the
               index differently or append some content after the index.

        * Keys that are set by other options and therefore should not
          be overridden are:

          `'docclass'' `'classoptions'' `'title'' `'date'' `'release''
          `'author'' `'logo'' `'releasename'' `'makeindex''
          `'shorthandoff''

 -- Configuration Value: latex_docclass
     A dictionary mapping `'howto'' and `'manual'' to names of real
     document classes that will be used as the base for the two Sphinx
     classes.  Default is to use `'article'' for `'howto'' and
     `'report'' for `'manual''.

     New in version 1.0.

 -- Configuration Value: latex_additional_files
     A list of file names, relative to the configuration directory, to
     copy to the build directory when building LaTeX output.  This is
     useful to copy files that Sphinx doesn't copy automatically, e.g.
     if they are referenced in custom LaTeX added in `latex_elements'.
     Image files that are referenced in source files (e.g. via `..
     image::') are copied automatically.

     You have to make sure yourself that the filenames don't collide
     with those of any automatically copied files.

     New in version 0.6.

 -- Configuration Value: latex_preamble
     Additional LaTeX markup for the preamble.

     Deprecated since version 0.5: Use the `'preamble'' key in the
     *note latex_elements: 1c7. value.

 -- Configuration Value: latex_paper_size
     The output paper size (`'letter'' or `'a4'').  Default is
     `'letter''.

     Deprecated since version 0.5: Use the `'papersize'' key in the
     *note latex_elements: 1c7. value.

 -- Configuration Value: latex_font_size
     The font size ('10pt', '11pt' or '12pt'). Default is `'10pt''.

     Deprecated since version 0.5: Use the `'pointsize'' key in the
     *note latex_elements: 1c7. value.


File: sphinx.info,  Node: Options for text output,  Next: Options for manual page output,  Prev: Options for LaTeX output,  Up: The build configuration file

9.7 Options for text output
===========================

These options influence text output.

 -- Configuration Value: text_newlines
     Determines which end-of-line character(s) are used in text output.

        * `'unix'': use Unix-style line endings (`\n')

        * `'windows'': use Windows-style line endings (`\r\n')

        * `'native'': use the line ending style of the platform the
          documentation is built on

     Default: `'unix''.

     New in version 1.1.

 -- Configuration Value: text_sectionchars
     A string of 7 characters that should be used for underlining
     sections.  The first character is used for first-level headings,
     the second for second-level headings and so on.

     The default is `'*=-~"+`''.

     New in version 1.1.


File: sphinx.info,  Node: Options for manual page output,  Next: Options for Texinfo output,  Prev: Options for text output,  Up: The build configuration file

9.8 Options for manual page output
==================================

These options influence manual page output.

 -- Configuration Value: man_pages
     This value determines how to group the document tree into manual
     pages.  It must be a list of tuples `(startdocname, name,
     description, authors, section)', where the items are:

        * _startdocname_: document name that is the "root" of the
          manual page.  All documents referenced by it in TOC trees
          will be included in the manual file too.  (If you want one
          master manual page, use your *note master_doc: 98.  here.)

        * _name_: name of the manual page.  This should be a short
          string without spaces or special characters.  It is used to
          determine the file name as well as the name of the manual
          page (in the NAME section).

        * _description_: description of the manual page.  This is used
          in the NAME section.

        * _authors_: A list of strings with authors, or a single
          string.  Can be an empty string or list if you do not want to
          automatically generate an AUTHORS section in the manual page.

        * _section_: The manual page section.  Used for the output file
          name as well as in the manual page header.

     New in version 1.0.

 -- Configuration Value: man_show_urls
     If true, add URL addresses after links.  Default is `False'.

     New in version 1.1.


File: sphinx.info,  Node: Options for Texinfo output,  Next: Options for the linkcheck builder,  Prev: Options for manual page output,  Up: The build configuration file

9.9 Options for Texinfo output
==============================

These options influence Texinfo output.

 -- Configuration Value: texinfo_documents
     This value determines how to group the document tree into Texinfo
     source files.  It must be a list of tuples `(startdocname,
     targetname, title, author, dir_entry, description, category,
     toctree_only)', where the items are:

        * _startdocname_: document name that is the "root" of the
          Texinfo file.  All documents referenced by it in TOC trees
          will be included in the Texinfo file too.  (If you want only
          one Texinfo file, use your *note master_doc: 98. here.)

        * _targetname_: file name (no extension) of the Texinfo file in
          the output directory.

        * _title_: Texinfo document title.  Can be empty to use the
          title of the _startdoc_.  Inserted as Texinfo markup, so
          special characters like @ and {} will need to be escaped to
          be inserted literally.

        * _author_: Author for the Texinfo document.  Inserted as
          Texinfo markup.  Use `@*' to separate multiple authors, as
          in: `'John@*Sarah''.

        * _dir_entry_: The name that will appear in the top-level `DIR'
          menu file.

        * _description_: Descriptive text to appear in the top-level
          `DIR' menu file.

        * _category_: Specifies the section which this entry will
          appear in the top-level `DIR' menu file.

        * _toctree_only_: Must be `True' or `False'.  If `True', the
          _startdoc_ document itself is not included in the output,
          only the documents referenced by it via TOC trees.  With this
          option, you can put extra stuff in the master document that
          shows up in the HTML, but not the Texinfo output.

     New in version 1.1.

 -- Configuration Value: texinfo_appendices
     A list of document names to append as an appendix to all manuals.

     New in version 1.1.

 -- Configuration Value: texinfo_domain_indices
     If true, generate domain-specific indices in addition to the
     general index.  For e.g. the Python domain, this is the global
     module index.  Default is `True'.

     This value can be a bool or a list of index names that should be
     generated, like for *note html_domain_indices: 197.

     New in version 1.1.

 -- Configuration Value: texinfo_show_urls
     Control how to display URL addresses.

        * `'footnote'' - display URLs in footnotes (default)

        * `'no'' - do not display URLs

        * `'inline'' - display URLs inline in parentheses

     New in version 1.1.

 -- Configuration Value: texinfo_elements
     A dictionary that contains Texinfo snippets that override those
     Sphinx usually puts into the generated `.texi' files.

        * Keys that you may want to override include:

         `'paragraphindent''
               Number of spaces to indent the first line of each
               paragraph, default `2'.  Specify `0' for no indentation.

         `'exampleindent''
               Number of spaces to indent the lines for examples or
               literal blocks, default `4'.  Specify `0' for no
               indentation.

         `'preamble''
               Texinfo markup inserted near the beginning of the file.

         `'copying''
               Texinfo markup inserted within the `@copying' block and
               displayed after the title.  The default value consists
               of a simple title page identifying the project.

        * Keys that are set by other options and therefore should not
          be overridden are:

          `'author'' `'body'' `'date'' `'direntry'' `'filename''
          `'project'' `'release'' `'title'' `'direntry''

     New in version 1.1.


File: sphinx.info,  Node: Options for the linkcheck builder,  Next: Options for the XML builder,  Prev: Options for Texinfo output,  Up: The build configuration file

9.10 Options for the linkcheck builder
======================================

 -- Configuration Value: linkcheck_ignore
     A list of regular expressions that match URIs that should not be
     checked when doing a `linkcheck' build.  Example:

         linkcheck_ignore = [r'http://localhost:\d+/']

     New in version 1.1.

 -- Configuration Value: linkcheck_timeout
     A timeout value, in seconds, for the linkcheck builder.  *Only
     works in Python 2.6 and higher.*  The default is to use Python's
     global socket timeout.

     New in version 1.1.

 -- Configuration Value: linkcheck_workers
     The number of worker threads to use when checking links.  Default
     is 5 threads.

     New in version 1.1.

 -- Configuration Value: linkcheck_anchors
     True or false, whether to check the validity of `#anchor's in
     links.  Since this requires downloading the whole document, it's
     considerably slower when enabled.  Default is `True'.

     New in version 1.2.


File: sphinx.info,  Node: Options for the XML builder,  Prev: Options for the linkcheck builder,  Up: The build configuration file

9.11 Options for the XML builder
================================

 -- Configuration Value: xml_pretty
     If True, pretty-print the XML.  Default is `True'.

     New in version 1.2.


File: sphinx.info,  Node: Internationalization,  Next: HTML theming support,  Prev: The build configuration file,  Up: Top

10 Internationalization
***********************

New in version 1.1.

  Complementary to translations provided for Sphinx-generated messages
such as navigation bars, Sphinx provides mechanisms facilitating
_document_ translations in itself.  See the *note Options for
internationalization: 182. for details on configuration.

 [image src="translation.png" ]

Figure: Workflow visualization of translations in Sphinx.  (The
stick-figure is taken from an XKCD comic(1).)

  *gettext* (2) is an established standard for internationalization and
localization.  It naïvely maps messages in a program to a translated
string.  Sphinx uses these facilities to translate whole documents.

  Initially project maintainers have to collect all translatable
strings (also referred to as _messages_) to make them known to
translators.  Sphinx extracts these through invocation of `sphinx-build
-b gettext'.

  Every single element in the doctree will end up in a single message
which results in lists being equally split into different chunks while
large paragraphs will remain as coarsely-grained as they were in the
original document.  This grants seamless document updates while still
providing a little bit of context for translators in free-text
passages.  It is the maintainer's task to split up paragraphs which are
too large as there is no sane automated way to do that.

  After Sphinx successfully ran the *note MessageCatalogBuilder: 164.
you will find a collection of `.pot' files in your output directory.
These are *catalog templates* and contain messages in your original
language _only_.

  They can be delivered to translators which will transform them to
`.po' files -- so called *message catalogs* -- containing a mapping
from the original messages to foreign-language strings.

  Gettext compiles them into a binary format known as *binary catalogs*
through *msgfmt* for efficiency reasons.  If you make these files
discoverable with *note locale_dirs: 184. for your *note language: 17c,
Sphinx will pick them up automatically.

  An example: you have a document `usage.rst' in your Sphinx project.
The gettext builder will put its messages into `usage.pot'.  Imagine
you have Spanish translations (3) on your hands in `usage.po' -- for
your builds to be translated you need to follow these instructions:

   * Compile your message catalog to a locale directory, say
     `translated', so it ends up in
     `./translated/es/LC_MESSAGES/usage.mo' in your source directory
     (where `es' is the language code for Spanish.)

         msgfmt "usage.po" -o "translated/es/LC_MESSAGES/usage.mo"


   * Set *note locale_dirs: 184. to `["translated/"]'.

   * Set *note language: 17c. to `es' (also possible via `-D').

   * Run your desired build.

  ---------- Footnotes ----------

  (1) http://xkcd.com/779/

  (2) See the GNU gettext utilites
(http://www.gnu.org/software/gettext/manual/gettext.html#Introduction)
for details on that software suite.

  (3) Because nobody expects the Spanish Inquisition!


File: sphinx.info,  Node: HTML theming support,  Next: Templating<2>,  Prev: Internationalization,  Up: Top

11 HTML theming support
***********************

New in version 0.6.

  Sphinx supports changing the appearance of its HTML output via
_themes_.  A theme is a collection of HTML templates, stylesheet(s) and
other static files.  Additionally, it has a configuration file which
specifies from which theme to inherit, which highlighting style to use,
and what options exist for customizing the theme's look and feel.

  Themes are meant to be project-unaware, so they can be used for
different projects without change.

* Menu:

* Using a theme::
* Builtin themes::
* Creating themes::


File: sphinx.info,  Node: Using a theme,  Next: Builtin themes,  Up: HTML theming support

11.1 Using a theme
==================

Using an existing theme is easy.  If the theme is builtin to Sphinx,
you only need to set the *note html_theme: 187. config value.  With the
*note html_theme_options: 189. config value you can set theme-specific
options that change the look and feel.  For example, you could have the
following in your `conf.py':

    html_theme = "default"
    html_theme_options = {
        "rightsidebar": "true",
        "relbarbgcolor": "black"
    }

That would give you the default theme, but with a sidebar on the right
side and a black background for the relation bar (the bar with the
navigation links at the page's top and bottom).

  If the theme does not come with Sphinx, it can be in two forms:
either a directory (containing `theme.conf' and other needed files), or
a zip file with the same contents.  Either of them must be put where
Sphinx can find it; for this there is the config value *note
html_theme_path: 18b.  It gives a list of directories, relative to the
directory containing `conf.py', that can contain theme directories or
zip files.  For example, if you have a theme in the file `blue.zip',
you can put it right in the directory containing `conf.py' and use this
configuration:

    html_theme = "blue"
    html_theme_path = ["."]



File: sphinx.info,  Node: Builtin themes,  Next: Creating themes,  Prev: Using a theme,  Up: HTML theming support

11.2 Builtin themes
===================

*Theme overview*         
 [image src="default.png" alt="default" ] [image src="sphinxdoc.png" alt="sphinxdoc" ]
                         
_default_                _sphinxdoc_
 [image src="scrolls.png" alt="scrolls" ] [image src="agogo.png" alt="agogo" ]
                         
_scrolls_                _agogo_
 [image src="traditional.png" alt="traditional" ] [image src="nature.png" alt="nature" ]
                         
_traditional_            _nature_
 [image src="haiku.png" alt="haiku" ] [image src="pyramid.png" alt="pyramid" ]
                         
_haiku_                  _pyramid_

  Sphinx comes with a selection of themes to choose from.

  These themes are:

   * *basic* - This is a basically unstyled layout used as the base for
     the other themes, and usable as the base for custom themes as
     well.  The HTML contains all important elements like sidebar and
     relation bar.  There are these options (which are inherited by the
     other themes):

        - *nosidebar* (true or false): Don't include the sidebar.
          Defaults to false.

        - *sidebarwidth* (an integer): Width of the sidebar in pixels.
          (Do not include `px' in the value.)  Defaults to 230 pixels.

   * *default* - This is the default theme, which looks like the Python
     documentation(1).  It can be customized via these options:

        - *rightsidebar* (true or false): Put the sidebar on the right
          side.  Defaults to false.

        - *stickysidebar* (true or false): Make the sidebar "fixed" so
          that it doesn't scroll out of view for long body content.
          This may not work well with all browsers.  Defaults to false.

        - *collapsiblesidebar* (true or false): Add an _experimental_
          JavaScript snippet that makes the sidebar collapsible via a
          button on its side.  _Doesn't work with "stickysidebar"._
          Defaults to false.

        - *externalrefs* (true or false): Display external links
          differently from internal links.  Defaults to false.

     There are also various color and font options that can change the
     color scheme without having to write a custom stylesheet:

        - *footerbgcolor* (CSS color): Background color for the footer
          line.

        - *footertextcolor* (CSS color): Text color for the footer line.

        - *sidebarbgcolor* (CSS color): Background color for the
          sidebar.

        - *sidebarbtncolor* (CSS color): Background color for the
          sidebar collapse button (used when _collapsiblesidebar_ is
          true).

        - *sidebartextcolor* (CSS color): Text color for the sidebar.

        - *sidebarlinkcolor* (CSS color): Link color for the sidebar.

        - *relbarbgcolor* (CSS color): Background color for the
          relation bar.

        - *relbartextcolor* (CSS color): Text color for the relation
          bar.

        - *relbarlinkcolor* (CSS color): Link color for the relation
          bar.

        - *bgcolor* (CSS color): Body background color.

        - *textcolor* (CSS color): Body text color.

        - *linkcolor* (CSS color): Body link color.

        - *visitedlinkcolor* (CSS color): Body color for visited links.

        - *headbgcolor* (CSS color): Background color for headings.

        - *headtextcolor* (CSS color): Text color for headings.

        - *headlinkcolor* (CSS color): Link color for headings.

        - *codebgcolor* (CSS color): Background color for code blocks.

        - *codetextcolor* (CSS color): Default text color for code
          blocks, if not set differently by the highlighting style.

        - *bodyfont* (CSS font-family): Font for normal text.

        - *headfont* (CSS font-family): Font for headings.

   * *sphinxdoc* - The theme used for this documentation.  It features
     a sidebar on the right side.  There are currently no options
     beyond _nosidebar_ and _sidebarwidth_.

   * *scrolls* - A more lightweight theme, based on the Jinja
     documentation(2).  The following color options are available:

        - *headerbordercolor*

        - *subheadlinecolor*

        - *linkcolor*

        - *visitedlinkcolor*

        - *admonitioncolor*

   * *agogo* - A theme created by Andi Albrecht.  The following options
     are supported:

        - *bodyfont* (CSS font family): Font for normal text.

        - *headerfont* (CSS font family): Font for headings.

        - *pagewidth* (CSS length): Width of the page content, default
          70em.

        - *documentwidth* (CSS length): Width of the document (without
          sidebar), default 50em.

        - *sidebarwidth* (CSS length): Width of the sidebar, default
          20em.

        - *bgcolor* (CSS color): Background color.

        - *headerbg* (CSS value for "background"): background for the
          header area, default a grayish gradient.

        - *footerbg* (CSS value for "background"): background for the
          footer area, default a light gray gradient.

        - *linkcolor* (CSS color): Body link color.

        - *headercolor1*, *headercolor2* (CSS color): colors for <h1>
          and <h2> headings.

        - *headerlinkcolor* (CSS color): Color for the backreference
          link in headings.

        - *textalign* (CSS _text-align_ value): Text alignment for the
          body, default is `justify'.

   * *nature* - A greenish theme.  There are currently no options beyond
     _nosidebar_ and _sidebarwidth_.

   * *pyramid* - A theme from the Pyramid web framework project,
     designed by Blaise Laflamme.  There are currently no options
     beyond _nosidebar_ and _sidebarwidth_.

   * *haiku* - A theme without sidebar inspired by the Haiku OS user
     guide(3).  The following options are supported:

        - *full_logo* (true or false, default false): If this is true,
          the header will only show the *note html_logo: 18f.  Use this
          for large logos.  If this is false, the logo (if present)
          will be shown floating right, and the documentation title
          will be put in the header.

        - *textcolor*, *headingcolor*, *linkcolor*, *visitedlinkcolor*,
          *hoverlinkcolor* (CSS colors): Colors for various body
          elements.

   * *traditional* - A theme resembling the old Python documentation.
     There are currently no options beyond _nosidebar_ and
     _sidebarwidth_.

   * *epub* - A theme for the epub builder.  This theme tries to save
     visual space which is a sparse resource on ebook readers.  The
     following options are supported:

        - *relbar1* (true or false, default true): If this is true, the
          `relbar1' block is inserted in the epub output, otherwise it
          is omitted.

        - *footer*  (true or false, default true): If this is true, the
          `footer' block is inserted in the epub output, otherwise it
          is ommitted.

  ---------- Footnotes ----------

  (1) http://docs.python.org/

  (2) http://jinja.pocoo.org/

  (3) http://www.haiku-os.org/docs/userguide/en/contents.html


File: sphinx.info,  Node: Creating themes,  Prev: Builtin themes,  Up: HTML theming support

11.3 Creating themes
====================

As said, themes are either a directory or a zipfile (whose name is the
theme name), containing the following:

   * A `theme.conf' file, see below.

   * HTML templates, if needed.

   * A `static/' directory containing any static files that will be
     copied to the output static directory on build.  These can be
     images, styles, script files.

  The `theme.conf' file is in INI format (1) (readable by the standard
Python `ConfigParser' module) and has the following structure:

    [theme]
    inherit = base theme
    stylesheet = main CSS name
    pygments_style = stylename

    [options]
    variable = default value


   * The *inherit* setting gives the name of a "base theme", or `none'.
     The base theme will be used to locate missing templates (most
     themes will not have to supply most templates if they use `basic'
     as the base theme), its options will be inherited, and all of its
     static files will be used as well.

   * The *stylesheet* setting gives the name of a CSS file which will be
     referenced in the HTML header.  If you need more than one CSS
     file, either include one from the other via CSS' `@import', or use
     a custom HTML template that adds `<link rel="stylesheet">' tags as
     necessary.  Setting the *note html_style: 16b. config value will
     override this setting.

   * The *pygments_style* setting gives the name of a Pygments style to
     use for highlighting.  This can be overridden by the user in the
     *note pygments_style: 17d. config value.

   * The *options* section contains pairs of variable names and default
     values.  These options can be overridden by the user in *note
     html_theme_options: 189.  and are accessible from all templates as
     `theme_<name>'.

* Menu:

* Templating::
* Static templates::

  ---------- Footnotes ----------

  (1) It is not an executable Python file, as opposed to `conf.py',
because that would pose an unnecessary security risk if themes are
shared.


File: sphinx.info,  Node: Templating,  Next: Static templates,  Up: Creating themes

11.3.1 Templating
-----------------

The *note guide to templating: 1e6. is helpful if you want to write your
own templates.  What is important to keep in mind is the order in which
Sphinx searches for templates:

   * First, in the user's `templates_path' directories.

   * Then, in the selected theme.

   * Then, in its base theme, its base's base theme, etc.

  When extending a template in the base theme with the same name, use
the theme name as an explicit directory: `{% extends
"basic/layout.html" %}'.  From a user `templates_path' template, you
can still use the "exclamation mark" syntax as described in the
templating document.


File: sphinx.info,  Node: Static templates,  Prev: Templating,  Up: Creating themes

11.3.2 Static templates
-----------------------

Since theme options are meant for the user to configure a theme more
easily, without having to write a custom stylesheet, it is necessary to
be able to template static files as well as HTML files.  Therefore,
Sphinx supports so-called "static templates", like this:

  If the name of a file in the `static/' directory of a theme (or in
the user's static path, for that matter) ends with `_t', it will be
processed by the template engine.  The `_t' will be left from the final
file name.  For example, the _default_ theme has a file
`static/default.css_t' which uses templating to put the color options
into the stylesheet.  When a documentation is built with the default
theme, the output directory will contain a `_static/default.css' file
where all template tags have been processed.


File: sphinx.info,  Node: Templating<2>,  Next: Sphinx Extensions,  Prev: HTML theming support,  Up: Top

12 Templating
*************

Sphinx uses the Jinja(1) templating engine for its HTML templates.
Jinja is a text-based engine, and inspired by Django templates, so
anyone having used Django will already be familiar with it.  It also has
excellent documentation for those who need to make themselves familiar
with it.

* Menu:

* Do I need to use Sphinx' templates to produce HTML?::
* Jinja/Sphinx Templating Primer::
* Working with the builtin templates::

  ---------- Footnotes ----------

  (1) http://jinja.pocoo.org


File: sphinx.info,  Node: Do I need to use Sphinx' templates to produce HTML?,  Next: Jinja/Sphinx Templating Primer,  Up: Templating<2>

12.1 Do I need to use Sphinx' templates to produce HTML?
========================================================

No.  You have several other options:

   * You can write a *note TemplateBridge: 175. subclass that calls
     your template engine of choice, and set the *note template_bridge:
     174.  configuration value accordingly.

   * You can *note write a custom builder: 1eb. that derives from *note
     StandaloneHTMLBuilder: 14b. and calls your template engine of
     choice.

   * You can use the *note PickleHTMLBuilder: 162. that produces pickle
     files with the page contents, and postprocess them using a custom
     tool, or use them in your Web application.


File: sphinx.info,  Node: Jinja/Sphinx Templating Primer,  Next: Working with the builtin templates,  Prev: Do I need to use Sphinx' templates to produce HTML?,  Up: Templating<2>

12.2 Jinja/Sphinx Templating Primer
===================================

The default templating language in Sphinx is Jinja.  It's Django/Smarty
inspired and easy to understand.  The most important concept in Jinja
is _template inheritance_, which means that you can overwrite only
specific blocks within a template, customizing it while also keeping
the changes at a minimum.

  To customize the output of your documentation you can override all
the templates (both the layout templates and the child templates) by
adding files with the same name as the original filename into the
template directory of the structure the Sphinx quickstart generated for
you.

  Sphinx will look for templates in the folders of *note
templates_path: 173.  first, and if it can't find the template it's
looking for there, it falls back to the selected theme's templates.

  A template contains *variables*, which are replaced with values when
the template is evaluated, *tags*, which control the logic of the
template and *blocks* which are used for template inheritance.

  Sphinx' _basic_ theme provides base templates with a couple of blocks
it will fill with data.  These are located in the `themes/basic'
subdirectory of the Sphinx installation directory, and used by all
builtin Sphinx themes.  Templates with the same name in the *note
templates_path: 173. override templates supplied by the selected theme.

  For example, to add a new link to the template area containing
related links all you have to do is to add a new template called
`layout.html' with the following contents:

    {% extends "!layout.html" %}
    {% block rootrellink %}
        <li><a href="http://project.invalid/">Project Homepage</a> &raquo;</li>
        {{ super() }}
    {% endblock %}

By prefixing the name of the overridden template with an exclamation
mark, Sphinx will load the layout template from the underlying HTML
theme.

  *Important*: If you override a block, call `{{ super() }}' somewhere
to render the block's content in the extended template - unless you
don't want that content to show up.


File: sphinx.info,  Node: Working with the builtin templates,  Prev: Jinja/Sphinx Templating Primer,  Up: Templating<2>

12.3 Working with the builtin templates
=======================================

The builtin *basic* theme supplies the templates that all builtin Sphinx
themes are based on.  It has the following elements you can override or
use:

* Menu:

* Blocks::
* Configuration Variables::
* Helper Functions::
* Global Variables::


File: sphinx.info,  Node: Blocks,  Next: Configuration Variables,  Up: Working with the builtin templates

12.3.1 Blocks
-------------

The following blocks exist in the `layout.html' template:

`doctype'
     The doctype of the output format.  By default this is XHTML 1.0
     Transitional as this is the closest to what Sphinx and Docutils
     generate and it's a good idea not to change it unless you want to
     switch to HTML 5 or a different but compatible XHTML doctype.

`linktags'
     This block adds a couple of `<link>' tags to the head section of
     the template.

`extrahead'
     This block is empty by default and can be used to add extra
     contents into the `<head>' tag of the generated HTML file.  This
     is the right place to add references to JavaScript or extra CSS
     files.

`relbar1' / `relbar2'
     This block contains the _relation bar_, the list of related links
     (the parent documents on the left, and the links to index, modules
     etc. on the right).  `relbar1' appears before the document,
     `relbar2' after the document.  By default, both blocks are filled;
     to show the relbar only before the document, you would override
     `relbar2' like this:

         {% block relbar2 %}{% endblock %}


`rootrellink' / `relbaritems'
     Inside the relbar there are three sections: The `rootrellink', the
     links from the documentation and the custom `relbaritems'.  The
     `rootrellink' is a block that by default contains a list item
     pointing to the master document by default, the `relbaritems' is
     an empty block.  If you override them to add extra links into the
     bar make sure that they are list items and end with the *note
     reldelim1: 1ef.

`document'
     The contents of the document itself.  It contains the block "body"
     where the individual content is put by subtemplates like
     `page.html'.

`sidebar1' / `sidebar2'
     A possible location for a sidebar.  `sidebar1' appears before the
     document and is empty by default, `sidebar2' after the document
     and contains the default sidebar.  If you want to swap the sidebar
     location override this and call the `sidebar' helper:

         {% block sidebar1 %}{{ sidebar() }}{% endblock %}
         {% block sidebar2 %}{% endblock %}

     (The `sidebar2' location for the sidebar is needed by the
     `sphinxdoc.css' stylesheet, for example.)

`sidebarlogo'
     The logo location within the sidebar.  Override this if you want
     to place some content at the top of the sidebar.

`footer'
     The block for the footer div.  If you want a custom footer or
     markup before or after it, override this one.

  The following four blocks are _only_ used for pages that do not have
assigned a list of custom sidebars in the *note html_sidebars: 194.
config value.  Their use is deprecated in favor of separate sidebar
templates, which can be included via *note html_sidebars: 194.

`sidebartoc'
     The table of contents within the sidebar.

     Deprecated since version 1.0.

`sidebarrel'
     The relation links (previous, next document) within the sidebar.

     Deprecated since version 1.0.

`sidebarsourcelink'
     The "Show source" link within the sidebar (normally only shown if
     this is enabled by *note html_show_sourcelink: 195.).

     Deprecated since version 1.0.

`sidebarsearch'
     The search box within the sidebar.  Override this if you want to
     place some content at the bottom of the sidebar.

     Deprecated since version 1.0.


File: sphinx.info,  Node: Configuration Variables,  Next: Helper Functions,  Prev: Blocks,  Up: Working with the builtin templates

12.3.2 Configuration Variables
------------------------------

Inside templates you can set a couple of variables used by the layout
template using the `{% set %}' tag:

 -- Data: reldelim1
     The delimiter for the items on the left side of the related bar.
     This defaults to `' &raquo;'' Each item in the related bar ends
     with the value of this variable.

 -- Data: reldelim2
     The delimiter for the items on the right side of the related bar.
     This defaults to `' |''.  Each item except of the last one in the
     related bar ends with the value of this variable.

  Overriding works like this:

    {% extends "!layout.html" %}
    {% set reldelim1 = ' &gt;' %}


 -- Data: script_files
     Add additional script files here, like this:

         {% set script_files = script_files + ["_static/myscript.js"] %}



 -- Data: css_files
     Similar to *note script_files: 1f2, for CSS files.


File: sphinx.info,  Node: Helper Functions,  Next: Global Variables,  Prev: Configuration Variables,  Up: Working with the builtin templates

12.3.3 Helper Functions
-----------------------

Sphinx provides various Jinja functions as helpers in the template.
You can use them to generate links or output multiply used elements.

 -- Function: pathto (document)
     Return the path to a Sphinx document as a URL.  Use this to refer
     to built documents.

 -- Function: pathto (file, 1)
     Return the path to a _file_ which is a filename relative to the
     root of the generated output.  Use this to refer to static files.

 -- Function: hasdoc (document)
     Check if a document with the name _document_ exists.

 -- Function: sidebar ()
     Return the rendered sidebar.

 -- Function: relbar ()
     Return the rendered relation bar.


File: sphinx.info,  Node: Global Variables,  Prev: Helper Functions,  Up: Working with the builtin templates

12.3.4 Global Variables
-----------------------

These global variables are available in every template and are safe to
use.  There are more, but most of them are an implementation detail and
might change in the future.

 -- Data: builder
     The name of the builder (e.g. `html' or `htmlhelp').

 -- Data: copyright
     The value of *note copyright: 6d.

 -- Data: docstitle
     The title of the documentation (the value of *note html_title:
     18c.).

 -- Data: embedded
     True if the built HTML is meant to be embedded in some viewing
     application that handles navigation, not the web browser, such as
     for HTML help or Qt help formats.  In this case, the sidebar is
     not included.

 -- Data: favicon
     The path to the HTML favicon in the static path, or `'''.

 -- Data: file_suffix
     The value of the builder's *note out_suffix: 15e.  attribute, i.e.
     the file name extension that the output files will get.  For a
     standard HTML builder, this is usually `.html'.

 -- Data: has_source
     True if the reST document sources are copied (if *note
     html_copy_source: 19b.  is true).

 -- Data: last_updated
     The build date.

 -- Data: logo
     The path to the HTML logo image in the static path, or `'''.

 -- Data: master_doc
     The value of *note master_doc: 98, for usage with *note pathto():
     1f5.

 -- Data: next
     The next document for the navigation.  This variable is either
     false or has two attributes `link' and `title'.  The title
     contains HTML markup.  For example, to generate a link to the next
     page, you can use this snippet:

         {% if next %}
         <a href="{{ next.link|e }}">{{ next.title }}</a>
         {% endif %}



 -- Data: pagename
     The "page name" of the current file, i.e. either the document name
     if the file is generated from a reST source, or the equivalent
     hierarchical name relative to the output directory
     (`[directory/]filename_without_extension').

 -- Data: parents
     A list of parent documents for navigation, structured like the
     *note next: 204.  item.

 -- Data: prev
     Like *note next: 204, but for the previous page.

 -- Data: project
     The value of *note project: 6b.

 -- Data: release
     The value of *note release: 71.

 -- Data: rellinks
     A list of links to put at the left side of the relbar, next to
     "next" and "prev".  This usually contains links to the general
     index and other indices, such as the Python module index.  If you
     add something yourself, it must be a tuple `(pagename, link title,
     accesskey, link text)'.

 -- Data: shorttitle
     The value of *note html_short_title: 18d.

 -- Data: show_source
     True if *note html_show_sourcelink: 195. is true.

 -- Data: sphinx_version
     The version of Sphinx used to build.

 -- Data: style
     The name of the main stylesheet, as given by the theme or *note
     html_style: 16b.

 -- Data: title
     The title of the current document, as used in the `<title>' tag.

 -- Data: use_opensearch
     The value of *note html_use_opensearch: 19c.

 -- Data: version
     The value of *note version: 6f.

  In addition to these values, there are also all *theme options*
available (prefixed by `theme_'), as well as the values given by the
user in *note html_context: 18e.

  In documents that are created from source files (as opposed to
automatically-generated files like the module index, or documents that
already are in HTML form), these variables are also available:

 -- Data: meta
     Document metadata (a dictionary), see *note File-wide metadata: e3.

 -- Data: sourcename
     The name of the copied source file for the current document.  This
     is only nonempty if the *note html_copy_source: 19b. value is true.

 -- Data: toc
     The local table of contents for the current page, rendered as HTML
     bullet lists.

 -- Data: toctree
     A callable yielding the global TOC tree containing the current
     page, rendered as HTML bullet lists.  Optional keyword arguments:

        * `collapse' (true by default): if true, all TOC entries that
          are not ancestors of the current page are collapsed

        * `maxdepth' (defaults to the max depth selected in the toctree
          directive): the maximum depth of the tree; set it to `-1' to
          allow unlimited depth

        * `titles_only' (false by default): if true, put only toplevel
          document titles in the tree

        * `includehidden' (false by default): if true, the TOC tree
          will also contain hidden entries.


File: sphinx.info,  Node: Sphinx Extensions,  Next: Sphinx Web Support,  Prev: Templating<2>,  Up: Top

13 Sphinx Extensions
********************

Since many projects will need special features in their documentation,
Sphinx is designed to be extensible on several levels.

  This is what you can do in an extension: First, you can add new *note
builder: 218.s to support new output formats or actions on the parsed
documents.  Then, it is possible to register custom reStructuredText
roles and directives, extending the markup.  And finally, there are
so-called "hook points" at strategic places throughout the build
process, where an extension can register a hook and run specialized
code.

  An extension is simply a Python module.  When an extension is loaded,
Sphinx imports this module and executes its `setup()' function, which
in turn notifies Sphinx of everything the extension offers - see the
extension tutorial for examples.

  The configuration file itself can be treated as an extension if it
contains a `setup()' function.  All other extensions to load must be
listed in the *note extensions: 45. configuration value.

* Menu:

* Tutorial; Writing a simple extension: Tutorial Writing a simple extension.
* Extension API::
* Writing new builders::
* Builtin Sphinx extensions::
* Third-party extensions::

Tutorial: Writing a simple extension

* Build Phases::
* Extension Design::
* The Setup Function::
* The Node Classes::
* The Directive Classes::
* The Event Handlers::

Extension API

* Sphinx core events::
* The template bridge::
* Domain API::

Builtin Sphinx extensions

* sphinx.ext.autodoc: sphinx ext autodoc -- Include documentation from docstrings. Include documentation from docstrings
* sphinx.ext.autosummary: sphinx ext autosummary -- Generate autodoc summaries. Generate autodoc summaries
* sphinx.ext.doctest: sphinx ext doctest -- Test snippets in the documentation. Test snippets in the documentation
* sphinx.ext.intersphinx: sphinx ext intersphinx -- Link to other projects' documentation. Link to other projects' documentation
* Math support in Sphinx::
* sphinx.ext.graphviz: sphinx ext graphviz -- Add Graphviz graphs. Add Graphviz graphs
* sphinx.ext.inheritance_diagram: sphinx ext inheritance_diagram -- Include inheritance diagrams. Include inheritance diagrams
* sphinx.ext.refcounting: sphinx ext refcounting -- Keep track of reference counting behavior. Keep track of reference counting behavior
* sphinx.ext.ifconfig: sphinx ext ifconfig -- Include content based on configuration. Include content based on configuration
* sphinx.ext.coverage: sphinx ext coverage -- Collect doc coverage stats. Collect doc coverage stats
* sphinx.ext.todo: sphinx ext todo -- Support for todo items. Support for todo items
* sphinx.ext.extlinks: sphinx ext extlinks -- Markup to shorten external links. Markup to shorten external links
* sphinx.ext.viewcode: sphinx ext viewcode -- Add links to highlighted source code. Add links to highlighted source code
* sphinx.ext.linkcode: sphinx ext linkcode -- Add external links to source code. Add external links to source code
* sphinx.ext.oldcmarkup: sphinx ext oldcmarkup -- Compatibility extension for old C markup. Compatibility extension for old C markup

sphinx.ext.autodoc -- Include documentation from docstrings

* Docstring preprocessing::
* Skipping members::

sphinx.ext.autosummary -- Generate autodoc summaries

* sphinx-autogen: sphinx-autogen -- generate autodoc stub pages. generate autodoc stub pages
* Generating stub pages automatically::
* Customizing templates::

Math support in Sphinx

* sphinx.ext.pngmath: sphinx ext pngmath -- Render math as PNG images. Render math as PNG images
* sphinx.ext.mathjax: sphinx ext mathjax -- Render math via JavaScript. Render math via JavaScript
* sphinx.ext.jsmath: sphinx ext jsmath -- Render math via JavaScript. Render math via JavaScript

Third-party extensions

* Where to put your own extensions?::


File: sphinx.info,  Node: Tutorial Writing a simple extension,  Next: Extension API,  Up: Sphinx Extensions

13.1 Tutorial: Writing a simple extension
=========================================

This section is intended as a walkthrough for the creation of custom
extensions.  It covers the basics of writing and activating an
extensions, as well as commonly used features of extensions.

  As an example, we will cover a "todo" extension that adds
capabilities to include todo entries in the documentation, and
collecting these in a central place.  (A similar "todo" extension is
distributed with Sphinx.)

* Menu:

* Build Phases::
* Extension Design::
* The Setup Function::
* The Node Classes::
* The Directive Classes::
* The Event Handlers::


File: sphinx.info,  Node: Build Phases,  Next: Extension Design,  Up: Tutorial Writing a simple extension

13.1.1 Build Phases
-------------------

One thing that is vital in order to understand extension mechanisms is
the way in which a Sphinx project is built: this works in several
phases.

  *Phase 0: Initialization*

     In this phase, almost nothing interesting for us happens.  The
     source directory is searched for source files, and extensions are
     initialized.  Should a stored build environment exist, it is
     loaded, otherwise a new one is created.

  *Phase 1: Reading*

     In Phase 1, all source files (and on subsequent builds, those that
     are new or changed) are read and parsed.  This is the phase where
     directives and roles are encountered by the docutils, and the
     corresponding functions are called.  The output of this phase is a
     _doctree_ for each source files, that is a tree of docutils nodes.
     For document elements that aren't fully known until all existing
     files are read, temporary nodes are created.

     During reading, the build environment is updated with all meta-
     and cross reference data of the read documents, such as labels,
     the names of headings, described Python objects and index entries.
     This will later be used to replace the temporary nodes.

     The parsed doctrees are stored on the disk, because it is not
     possible to hold all of them in memory.

  *Phase 2: Consistency checks*

     Some checking is done to ensure no surprises in the built
     documents.

  *Phase 3: Resolving*

     Now that the metadata and cross-reference data of all existing
     documents is known, all temporary nodes are replaced by nodes that
     can be converted into output.  For example, links are created for
     object references that exist, and simple literal nodes are created
     for those that don't.

  *Phase 4: Writing*

     This phase converts the resolved doctrees to the desired output
     format, such as HTML or LaTeX.  This happens via a so-called
     docutils writer that visits the individual nodes of each doctree
     and produces some output in the process.

     Note: Some builders deviate from this general build plan, for
     example, the builder that checks external links does not need
     anything more than the parsed doctrees and therefore does not have
     phases 2-4.


File: sphinx.info,  Node: Extension Design,  Next: The Setup Function,  Prev: Build Phases,  Up: Tutorial Writing a simple extension

13.1.2 Extension Design
-----------------------

We want the extension to add the following to Sphinx:

   * A "todo" directive, containing some content that is marked with
     "TODO", and only shown in the output if a new config value is set.
     (Todo entries should not be in the output by default.)

   * A "todolist" directive that creates a list of all todo entries
     throughout the documentation.

  For that, we will need to add the following elements to Sphinx:

   * New directives, called `todo' and `todolist'.

   * New document tree nodes to represent these directives,
     conventionally also called `todo' and `todolist'.  We wouldn't
     need new nodes if the new directives only produced some content
     representable by existing nodes.

   * A new config value `todo_include_todos' (config value names should
     start with the extension name, in order to stay unique) that
     controls whether todo entries make it into the output.

   * New event handlers: one for the *note doctree-resolved: 21e.
     event, to replace the todo and todolist nodes, and one for *note
     env-purge-doc: 21f. (the reason for that will be covered later).


File: sphinx.info,  Node: The Setup Function,  Next: The Node Classes,  Prev: Extension Design,  Up: Tutorial Writing a simple extension

13.1.3 The Setup Function
-------------------------

The new elements are added in the extension's setup function.  Let us
create a new Python module called `todo.py' and add the setup function:

    def setup(app):
        app.add_config_value('todo_include_todos', False, False)

        app.add_node(todolist)
        app.add_node(todo,
                     html=(visit_todo_node, depart_todo_node),
                     latex=(visit_todo_node, depart_todo_node),
                     text=(visit_todo_node, depart_todo_node))

        app.add_directive('todo', TodoDirective)
        app.add_directive('todolist', TodolistDirective)
        app.connect('doctree-resolved', process_todo_nodes)
        app.connect('env-purge-doc', purge_todos)

The calls in this function refer to classes and functions not yet
written.  What the individual calls do is the following:

   * *note add_config_value(): 221. lets Sphinx know that it should
     recognize the new _config value_ `todo_include_todos', whose
     default value should be `False' (this also tells Sphinx that it is
     a boolean value).

     If the third argument was `True', all documents would be re-read
     if the config value changed its value.  This is needed for config
     values that influence reading (build phase 1).

   * *note add_node(): 222. adds a new _node class_ to the build
     system.  It also can specify visitor functions for each supported
     output format.  These visitor functions are needed when the new
     nodes stay until phase 4 - since the `todolist' node is always
     replaced in phase 3, it doesn't need any.

     We need to create the two node classes `todo' and `todolist' later.

   * *note add_directive(): 223. adds a new _directive_, given by name
     and class.

     The handler functions are created later.

   * Finally, *note connect(): 224. adds an _event handler_ to the
     event whose name is given by the first argument.  The event
     handler function is called with several arguments which are
     documented with the event.


File: sphinx.info,  Node: The Node Classes,  Next: The Directive Classes,  Prev: The Setup Function,  Up: Tutorial Writing a simple extension

13.1.4 The Node Classes
-----------------------

Let's start with the node classes:

    from docutils import nodes

    class todo(nodes.Admonition, nodes.Element):
        pass

    class todolist(nodes.General, nodes.Element):
        pass

    def visit_todo_node(self, node):
        self.visit_admonition(node)

    def depart_todo_node(self, node):
        self.depart_admonition(node)

Node classes usually don't have to do anything except inherit from the
standard docutils classes defined in `docutils.nodes'.  `todo' inherits
from `Admonition' because it should be handled like a note or warning,
`todolist' is just a "general" node.


File: sphinx.info,  Node: The Directive Classes,  Next: The Event Handlers,  Prev: The Node Classes,  Up: Tutorial Writing a simple extension

13.1.5 The Directive Classes
----------------------------

A directive class is a class deriving usually from
`docutils.parsers.rst.Directive'.  Since the class-based directive
interface doesn't exist yet in Docutils 0.4, Sphinx has another base
class called `sphinx.util.compat.Directive' that you can derive your
directive from, and it will work with both Docutils 0.4 and 0.5
upwards.  The directive interface is covered in detail in the docutils
documentation; the important thing is that the class has a method `run'
that returns a list of nodes.

  The `todolist' directive is quite simple:

    from sphinx.util.compat import Directive

    class TodolistDirective(Directive):

        def run(self):
            return [todolist('')]

An instance of our `todolist' node class is created and returned.  The
todolist directive has neither content nor arguments that need to be
handled.

  The `todo' directive function looks like this:

    from sphinx.util.compat import make_admonition

    class TodoDirective(Directive):

        # this enables content in the directive
        has_content = True

        def run(self):
            env = self.state.document.settings.env

            targetid = "todo-%d" % env.new_serialno('todo')
            targetnode = nodes.target('', '', ids=[targetid])

            ad = make_admonition(todo, self.name, [_('Todo')], self.options,
                                 self.content, self.lineno, self.content_offset,
                                 self.block_text, self.state, self.state_machine)

            if not hasattr(env, 'todo_all_todos'):
                env.todo_all_todos = []
            env.todo_all_todos.append({
                'docname': env.docname,
                'lineno': self.lineno,
                'todo': ad[0].deepcopy(),
                'target': targetnode,
            })

            return [targetnode] + ad

Several important things are covered here. First, as you can see, you
can refer to the build environment instance using
`self.state.document.settings.env'.

  Then, to act as a link target (from the todolist), the todo directive
needs to return a target node in addition to the todo node.  The target
ID (in HTML, this will be the anchor name) is generated by using
`env.new_serialno' which is returns a new integer directive on each
call and therefore leads to unique target names.  The target node is
instantiated without any text (the first two arguments).

  An admonition is created using a standard docutils function (wrapped
in Sphinx for docutils cross-version compatibility).  The first
argument gives the node class, in our case `todo'.  The third argument
gives the admonition title (use `arguments' here to let the user
specify the title).  A list of nodes is returned from `make_admonition'.

  Then, the todo node is added to the environment.  This is needed to
be able to create a list of all todo entries throughout the
documentation, in the place where the author puts a `todolist'
directive.  For this case, the environment attribute `todo_all_todos'
is used (again, the name should be unique, so it is prefixed by the
extension name).  It does not exist when a new environment is created,
so the directive must check and create it if necessary.  Various
information about the todo entry's location are stored along with a
copy of the node.

  In the last line, the nodes that should be put into the doctree are
returned: the target node and the admonition node.

  The node structure that the directive returns looks like this:

    +--------------------+
    | target node        |
    +--------------------+
    +--------------------+
    | todo node          |
    +--------------------+
      \__+--------------------+
         | admonition title   |
         +--------------------+
         | paragraph          |
         +--------------------+
         | ...                |
         +--------------------+



File: sphinx.info,  Node: The Event Handlers,  Prev: The Directive Classes,  Up: Tutorial Writing a simple extension

13.1.6 The Event Handlers
-------------------------

Finally, let's look at the event handlers.  First, the one for the
*note env-purge-doc: 21f. event:

    def purge_todos(app, env, docname):
        if not hasattr(env, 'todo_all_todos'):
            return
        env.todo_all_todos = [todo for todo in env.todo_all_todos
                              if todo['docname'] != docname]

Since we store information from source files in the environment, which
is persistent, it may become out of date when the source file changes.
Therefore, before each source file is read, the environment's records
of it are cleared, and the *note env-purge-doc: 21f. event gives
extensions a chance to do the same.  Here we clear out all todos whose
docname matches the given one from the `todo_all_todos' list.  If there
are todos left in the document, they will be added again during parsing.

  The other handler belongs to the *note doctree-resolved: 21e. event.
This event is emitted at the end of phase 3 and allows custom resolving
to be done:

    def process_todo_nodes(app, doctree, fromdocname):
        if not app.config.todo_include_todos:
            for node in doctree.traverse(todo):
                node.parent.remove(node)

        # Replace all todolist nodes with a list of the collected todos.
        # Augment each todo with a backlink to the original location.
        env = app.builder.env

        for node in doctree.traverse(todolist):
            if not app.config.todo_include_todos:
                node.replace_self([])
                continue

            content = []

            for todo_info in env.todo_all_todos:
                para = nodes.paragraph()
                filename = env.doc2path(todo_info['docname'], base=None)
                description = (
                    _('(The original entry is located in %s, line %d and can be found ') %
                    (filename, todo_info['lineno']))
                para += nodes.Text(description, description)

                # Create a reference
                newnode = nodes.reference('', '')
                innernode = nodes.emphasis(_('here'), _('here'))
                newnode['refdocname'] = todo_info['docname']
                newnode['refuri'] = app.builder.get_relative_uri(
                    fromdocname, todo_info['docname'])
                newnode['refuri'] += '#' + todo_info['target']['refid']
                newnode.append(innernode)
                para += newnode
                para += nodes.Text('.)', '.)')

                # Insert into the todolist
                content.append(todo_info['todo'])
                content.append(para)

            node.replace_self(content)

It is a bit more involved.  If our new "todo_include_todos" config
value is false, all todo and todolist nodes are removed from the
documents.

  If not, todo nodes just stay where and how they are.  Todolist nodes
are replaced by a list of todo entries, complete with backlinks to the
location where they come from.  The list items are composed of the
nodes from the todo entry and docutils nodes created on the fly: a
paragraph for each entry, containing text that gives the location, and
a link (reference node containing an italic node) with the
backreference.  The reference URI is built by
`app.builder.get_relative_uri' which creates a suitable URI depending
on the used builder, and appending the todo node's (the target's) ID as
the anchor name.


File: sphinx.info,  Node: Extension API,  Next: Writing new builders,  Prev: Tutorial Writing a simple extension,  Up: Sphinx Extensions

13.2 Extension API
==================

Each Sphinx extension is a Python module with at least a `setup()'
function.  This function is called at initialization time with one
argument, the application object representing the Sphinx process.  This
application object has the following public API:

 -- Method: Sphinx.setup_extension (name)
     Load the extension given by the module _name_.  Use this if your
     extension needs the features provided by another extension.

 -- Method: Sphinx.add_builder (builder)
     Register a new builder.  _builder_ must be a class that inherits
     from *note Builder: 22c.

 -- Method: Sphinx.add_config_value (name, default, rebuild)
     Register a configuration value.  This is necessary for Sphinx to
     recognize new values and set default values accordingly.  The
     _name_ should be prefixed with the extension name, to avoid
     clashes.  The _default_ value can be any Python object.  The
     string value _rebuild_ must be one of those values:

        * `'env'' if a change in the setting only takes effect when a
          document is parsed - this means that the whole environment
          must be rebuilt.

        * `'html'' if a change in the setting needs a full rebuild of
          HTML documents.

        * `''' if a change in the setting will not need any special
          rebuild.

     Changed in version 0.4: If the _default_ value is a callable, it
     will be called with the config object as its argument in order to
     get the default value.  This can be used to implement config
     values whose default depends on other values.

     Changed in version 0.6: Changed _rebuild_ from a simple boolean
     (equivalent to `''' or `'env'') to a string.  However, booleans
     are still accepted and converted internally.

 -- Method: Sphinx.add_domain (domain)
     Make the given _domain_ (which must be a class; more precisely, a
     subclass of *note Domain: 22e.) known to Sphinx.

     New in version 1.0.

 -- Method: Sphinx.override_domain (domain)
     Make the given _domain_ class known to Sphinx, assuming that there
     is already a domain with its `.name'.  The new domain must be a
     subclass of the existing one.

     New in version 1.0.

 -- Method: Sphinx.add_index_to_domain (domain, index)
     Add a custom _index_ class to the domain named _domain_.  _index_
     must be a subclass of *note Index: 231.

     New in version 1.0.

 -- Method: Sphinx.add_event (name)
     Register an event called _name_.  This is needed to be able to
     emit it.

 -- Method: Sphinx.add_node (node, **kwds)
     Register a Docutils node class.  This is necessary for Docutils
     internals.  It may also be used in the future to validate nodes in
     the parsed documents.

     Node visitor functions for the Sphinx HTML, LaTeX, text and
     manpage writers can be given as keyword arguments: the keyword
     must be one or more of `'html'', `'latex'', `'text'', `'man'',
     `'texinfo'', the value a 2-tuple of `(visit, depart)' methods.
     `depart' can be `None' if the `visit' function raises
     `docutils.nodes.SkipNode'.  Example:

         class math(docutils.nodes.Element): pass

         def visit_math_html(self, node):
             self.body.append(self.starttag(node, 'math'))
         def depart_math_html(self, node):
             self.body.append('</math>')

         app.add_node(math, html=(visit_math_html, depart_math_html))

     Obviously, translators for which you don't specify visitor methods
     will choke on the node when encountered in a document to translate.

     Changed in version 0.5: Added the support for keyword arguments
     giving visit functions.

 -- Method: Sphinx.add_directive (name, func, content, arguments,
          **options)
 -- Method: Sphinx.add_directive (name, directiveclass)
     Register a Docutils directive.  _name_ must be the prospective
     directive name.  There are two possible ways to write a directive:

        * In the docutils 0.4 style, _obj_ is the directive function.
          _content_, _arguments_ and _options_ are set as attributes on
          the function and determine whether the directive has content,
          arguments and options, respectively.  *This style is
          deprecated.*

        * In the docutils 0.5 style, _directiveclass_ is the directive
          class.  It must already have attributes named _has_content_,
          _required_arguments_, _optional_arguments_,
          _final_argument_whitespace_ and _option_spec_ that correspond
          to the options for the function way.  See the Docutils
          docs(1) for details.

          The directive class must inherit from the class
          `docutils.parsers.rst.Directive'.

     For example, the (already existing) *note literalinclude: b5.
     directive would be added like this:

         from docutils.parsers.rst import directives
         add_directive('literalinclude', literalinclude_directive,
                       content = 0, arguments = (1, 0, 0),
                       linenos = directives.flag,
                       language = direcitves.unchanged,
                       encoding = directives.encoding)

     Changed in version 0.6: Docutils 0.5-style directive classes are
     now supported.

 -- Method: Sphinx.add_directive_to_domain (domain, name, func,
          content, arguments, **options)
 -- Method: Sphinx.add_directive_to_domain (domain, name,
          directiveclass)
     Like *note add_directive(): 223, but the directive is added to the
     domain named _domain_.

     New in version 1.0.

 -- Method: Sphinx.add_role (name, role)
     Register a Docutils role.  _name_ must be the role name that
     occurs in the source, _role_ the role function (see the Docutils
     documentation(2) on details).

 -- Method: Sphinx.add_role_to_domain (domain, name, role)
     Like *note add_role(): 234, but the role is added to the domain
     named _domain_.

     New in version 1.0.

 -- Method: Sphinx.add_generic_role (name, nodeclass)
     Register a Docutils role that does nothing but wrap its contents
     in the node given by _nodeclass_.

     New in version 0.6.

 -- Method: Sphinx.add_object_type (directivename, rolename,
          indextemplate='', parse_node=None, ref_nodeclass=None,
          objname='', doc_field_types=[])
     This method is a very convenient way to add a new *note object:
     f2. type that can be cross-referenced.  It will do this:

        * Create a new directive (called _directivename_) for
          documenting an object.  It will automatically add index
          entries if _indextemplate_ is nonempty; if given, it must
          contain exactly one instance of `%s'.  See the example below
          for how the template will be interpreted.

        * Create a new role (called _rolename_) to cross-reference to
          these object descriptions.

        * If you provide _parse_node_, it must be a function that takes
          a string and a docutils node, and it must populate the node
          with children parsed from the string.  It must then return
          the name of the item to be used in cross-referencing and
          index entries.  See the `conf.py' file in the source for this
          documentation for an example.

        * The _objname_ (if not given, will default to _directivename_)
          names the type of object.  It is used when listing objects,
          e.g. in search results.

     For example, if you have this call in a custom Sphinx extension:

         app.add_object_type('directive', 'dir', 'pair: %s; directive')

     you can use this markup in your documents:

         .. rst:directive:: function

            Document a function.

         <...>

         See also the :rst:dir:`function` directive.

     For the directive, an index entry will be generated as if you had
     prepended

         .. index:: pair: function; directive

     The reference node will be of class `literal' (so it will be
     rendered in a proportional font, as appropriate for code) unless
     you give the _ref_nodeclass_ argument, which must be a docutils
     node class (most useful are `docutils.nodes.emphasis' or
     `docutils.nodes.strong' - you can also use
     `docutils.nodes.generated' if you want no further text decoration).

     For the role content, you have the same syntactical possibilities
     as for standard Sphinx roles (see *note Cross-referencing syntax:
     95.).

     This method is also available under the deprecated alias
     `add_description_unit'.

 -- Method: Sphinx.add_crossref_type (directivename, rolename,
          indextemplate='', ref_nodeclass=None, objname='')
     This method is very similar to *note add_object_type(): 12f.
     except that the directive it generates must be empty, and will
     produce no output.

     That means that you can add semantic targets to your sources, and
     refer to them using custom roles instead of generic ones (like
     *note ref: 38.).  Example call:

         app.add_crossref_type('topic', 'topic', 'single: %s', docutils.nodes.emphasis)

     Example usage:

         .. topic:: application API

         The application API
         -------------------

         <...>

         See also :topic:`this section <application API>`.

     (Of course, the element following the `topic' directive needn't be
     a section.)

 -- Method: Sphinx.add_transform (transform)
     Add the standard docutils `Transform' subclass _transform_ to the
     list of transforms that are applied after Sphinx parses a reST
     document.

 -- Method: Sphinx.add_javascript (filename)
     Add _filename_ to the list of JavaScript files that the default
     HTML template will include.  The filename must be relative to the
     HTML static path, see *note the docs for the config value: 172.  A
     full URI with scheme, like `http://example.org/foo.js', is also
     supported.

     New in version 0.5.

 -- Method: Sphinx.add_stylesheet (filename)
     Add _filename_ to the list of CSS files that the default HTML
     template will include.  Like for *note add_javascript(): 239, the
     filename must be relative to the HTML static path, or a full URI
     with scheme.

     New in version 1.0.

 -- Method: Sphinx.add_lexer (alias, lexer)
     Use _lexer_, which must be an instance of a Pygments lexer class,
     to highlight code blocks with the given language _alias_.

     New in version 0.6.

 -- Method: Sphinx.add_autodocumenter (cls)
     Add _cls_ as a new documenter class for the *note
     sphinx.ext.autodoc: 11.  extension.  It must be a subclass of
     `sphinx.ext.autodoc.Documenter'.  This allows to auto-document new
     types of objects.  See the source of the autodoc module for
     examples on how to subclass `Documenter'.

     New in version 0.6.

 -- Method: Sphinx.add_autodoc_attrgetter (type, getter)
     Add _getter_, which must be a function with an interface
     compatible to the `getattr()' builtin, as the autodoc attribute
     getter for objects that are instances of _type_.  All cases where
     autodoc needs to get an attribute of a type are then handled by
     this function instead of `getattr()'.

     New in version 0.6.

 -- Method: Sphinx.add_search_language (cls)
     Add _cls_, which must be a subclass of
     `sphinx.search.SearchLanguage', as a support language for building
     the HTML full-text search index.  The class must have a _lang_
     attribute that indicates the language it should be used for.  See
     *note html_search_language: 1a5.

     New in version 1.1.

 -- Method: Sphinx.connect (event, callback)
     Register _callback_ to be called when _event_ is emitted.  For
     details on available core events and the arguments of callback
     functions, please see *note Sphinx core events: 23f.

     The method returns a "listener ID" that can be used as an argument
     to *note disconnect(): 240.

 -- Method: Sphinx.disconnect (listener_id)
     Unregister callback _listener_id_.

 -- Method: Sphinx.emit (event, *arguments)
     Emit _event_ and pass _arguments_ to the callback functions.
     Return the return values of all callbacks as a list.  Do not emit
     core Sphinx events in extensions!

 -- Method: Sphinx.emit_firstresult (event, *arguments)
     Emit _event_ and pass _arguments_ to the callback functions.
     Return the result of the first callback that doesn't return `None'.

     New in version 0.5.

 -- Method: Sphinx.require_sphinx (version)
     Compare _version_ (which must be a `major.minor' version string,
     e.g. `'1.1'') with the version of the running Sphinx, and abort
     the build when it is too old.

     New in version 1.0.

 -- Exception: sphinx.application.ExtensionError
     All these functions raise this exception if something went wrong
     with the extension API.

  Examples of using the Sphinx extension API can be seen in the
`sphinx.ext' package.

* Menu:

* Sphinx core events::
* The template bridge::
* Domain API::

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/docs/howto/rst-directives.html

  (2) http://docutils.sourceforge.net/docs/howto/rst-roles.html


File: sphinx.info,  Node: Sphinx core events,  Next: The template bridge,  Up: Extension API

13.2.1 Sphinx core events
-------------------------

These events are known to the core.  The arguments shown are given to
the registered event handlers.

 -- Event: builder-inited (app)
     Emitted when the builder object has been created.  It is available
     as `app.builder'.

 -- Event: env-get-outdated (app, env, added, changed, removed)
     Emitted when the environment determines which source files have
     changed and should be re-read.  _added_, _changed_ and _removed_
     are sets of docnames that the environment has determined.  You can
     return a list of docnames to re-read in addition to these.

     New in version 1.1.

 -- Event: env-purge-doc (app, env, docname)
     Emitted when all traces of a source file should be cleaned from the
     environment, that is, if the source file is removed or before it
     is freshly read.  This is for extensions that keep their own
     caches in attributes of the environment.

     For example, there is a cache of all modules on the environment.
     When a source file has been changed, the cache's entries for the
     file are cleared, since the module declarations could have been
     removed from the file.

     New in version 0.5.

 -- Event: source-read (app, docname, source)
     Emitted when a source file has been read.  The _source_ argument
     is a list whose single element is the contents of the source file.
     You can process the contents and replace this item to implement
     source-level transformations.

     For example, if you want to use `$' signs to delimit inline math,
     like in LaTeX, you can use a regular expression to replace `$...$'
     by `:math:`...`'.

     New in version 0.5.

 -- Event: doctree-read (app, doctree)
     Emitted when a doctree has been parsed and read by the
     environment, and is about to be pickled.  The _doctree_ can be
     modified in-place.

 -- Event: missing-reference (app, env, node, contnode)
     Emitted when a cross-reference to a Python module or object cannot
     be resolved.  If the event handler can resolve the reference, it
     should return a new docutils node to be inserted in the document
     tree in place of the node _node_.  Usually this node is a
     `reference' node containing _contnode_ as a child.

          Parameters:

             * *env* - The build environment (`app.builder.env').

             * *node* - The `pending_xref' node to be resolved.  Its
               attributes `reftype', `reftarget', `modname' and
               `classname' attributes determine the type and target of
               the reference.

             * *contnode* - The node that carries the text and
               formatting inside the future reference and should be a
               child of the returned reference node.

     New in version 0.5.

 -- Event: doctree-resolved (app, doctree, docname)
     Emitted when a doctree has been "resolved" by the environment,
     that is, all references have been resolved and TOCs have been
     inserted.  The _doctree_ can be modified in place.

     Here is the place to replace custom nodes that don't have visitor
     methods in the writers, so that they don't cause errors when the
     writers encounter them.

 -- Event: env-updated (app, env)
     Emitted when the `update()' method of the build environment has
     completed, that is, the environment and all doctrees are now
     up-to-date.

     New in version 0.5.

 -- Event: html-collect-pages (app)
     Emitted when the HTML builder is starting to write non-document
     pages.  You can add pages to write by returning an iterable from
     this event consisting of `(pagename, context, templatename)'.

     New in version 1.0.

 -- Event: html-page-context (app, pagename, templatename, context,
          doctree)
     Emitted when the HTML builder has created a context dictionary to
     render a template with - this can be used to add custom elements
     to the context.

     The _pagename_ argument is the canonical name of the page being
     rendered, that is, without `.html' suffix and using slashes as
     path separators.  The _templatename_ is the name of the template
     to render, this will be `'page.html'' for all pages from reST
     documents.

     The _context_ argument is a dictionary of values that are given to
     the template engine to render the page and can be modified to
     include custom values.  Keys must be strings.

     The _doctree_ argument will be a doctree when the page is created
     from a reST documents; it will be `None' when the page is created
     from an HTML template alone.

     New in version 0.4.

 -- Event: build-finished (app, exception)
     Emitted when a build has finished, before Sphinx exits, usually
     used for cleanup.  This event is emitted even when the build
     process raised an exception, given as the _exception_ argument.
     The exception is reraised in the application after the event
     handlers have run.  If the build process raised no exception,
     _exception_ will be `None'.  This allows to customize cleanup
     actions depending on the exception status.

     New in version 0.5.


File: sphinx.info,  Node: The template bridge,  Next: Domain API,  Prev: Sphinx core events,  Up: Extension API

13.2.2 The template bridge
--------------------------

 -- Class: sphinx.application.TemplateBridge
     This class defines the interface for a "template bridge", that is,
     a class that renders templates given a template name and a context.

      -- Method: init (builder, theme=None, dirs=None)
          Called by the builder to initialize the template system.

          _builder_ is the builder object; you'll probably want to look
          at the value of `builder.config.templates_path'.

          _theme_ is a `sphinx.theming.Theme' object or None; in the
          latter case, _dirs_ can be list of fixed directories to look
          for templates.

      -- Method: newest_template_mtime ()
          Called by the builder to determine if output files are
          outdated because of template changes.  Return the mtime of
          the newest template file that was changed.  The default
          implementation returns `0'.

      -- Method: render (template, context)
          Called by the builder to render a template given as a
          filename with a specified context (a Python dictionary).

      -- Method: render_string (template, context)
          Called by the builder to render a template given as a string
          with a specified context (a Python dictionary).


File: sphinx.info,  Node: Domain API,  Prev: The template bridge,  Up: Extension API

13.2.3 Domain API
-----------------

 -- Class: sphinx.domains.Domain (env)
     A Domain is meant to be a group of "object" description directives
     for objects of a similar nature, and corresponding roles to create
     references to them.  Examples would be Python modules, classes,
     functions etc., elements of a templating language, Sphinx roles
     and directives, etc.

     Each domain has a separate storage for information about existing
     objects and how to reference them in `self.data', which must be a
     dictionary.  It also must implement several functions that expose
     the object information in a uniform way to parts of Sphinx that
     allow the user to reference or search for objects in a
     domain-agnostic way.

     About `self.data': since all object and cross-referencing
     information is stored on a BuildEnvironment instance, the
     `domain.data' object is also stored in the `env.domaindata' dict
     under the key `domain.name'.  Before the build process starts,
     every active domain is instantiated and given the environment
     object; the `domaindata' dict must then either be nonexistent or a
     dictionary whose 'version' key is equal to the domain class' *note
     data_version: 256. attribute.  Otherwise, `IOError' is raised and
     the pickled environment is discarded.

      -- Method: clear_doc (docname)
          Remove traces of a document in the domain-specific
          inventories.

      -- Method: directive (name)
          Return a directive adapter class that always gives the
          registered directive its full name ('domain:name') as
          `self.name'.

      -- Method: get_objects ()
          Return an iterable of "object descriptions", which are tuples
          with five items:

             * `name'     - fully qualified name

             * `dispname' - name to display when searching/linking

             * `type'     - object type, a key in `self.object_types'

             * `docname'  - the document where it is to be found

             * `anchor'   - the anchor name for the object

             * `priority' - how "important" the object is (determines
               placement in search results)

                  - 1: default priority (placed before full-text
                    matches)

                  - 0: object is important (placed before
                    default-priority objects)

                  - 2: object is unimportant (placed after full-text
                    matches)

                  - -1: object should not show up in search at all

      -- Method: get_type_name (type, primary=False)
          Return full name for given ObjType.

      -- Method: process_doc (env, docname, document)
          Process a document after it is read by the environment.

      -- Method: resolve_xref (env, fromdocname, builder, typ, target,
               node, contnode)
          Resolve the pending_xref _node_ with the given _typ_ and
          _target_.

          This method should return a new node, to replace the xref
          node, containing the _contnode_ which is the markup content
          of the cross-reference.

          If no resolution can be found, None can be returned; the xref
          node will then given to the 'missing-reference' event, and if
          that yields no resolution, replaced by _contnode_.

          The method can also raise `sphinx.environment.NoUri' to
          suppress the 'missing-reference' event being emitted.

      -- Method: role (name)
          Return a role adapter function that always gives the
          registered role its full name ('domain:name') as the first
          argument.

      -- Attribute: dangling_warnings
          role name -> a warning message if reference is missing

      -- Attribute: data_version
          data version, bump this when the format of `self.data' changes

      -- Attribute: directives
          directive name -> directive class

      -- Attribute: indices
          a list of Index subclasses

      -- Attribute: initial_data
          data value for a fresh environment

      -- Attribute: label
          domain label: longer, more descriptive (used in messages)

      -- Attribute: name
          domain name: should be short, but unique

      -- Attribute: object_types
          type (usually directive) name -> ObjType instance

      -- Attribute: roles
          role name -> role callable

 -- Class: sphinx.domains.ObjType (lname, *roles, **attrs)
     An ObjType is the description for a type of object that a domain
     can document.  In the object_types attribute of Domain subclasses,
     object type names are mapped to instances of this class.

     Constructor arguments:

        - _lname_: localized name of the type (do not include domain
          name)

        - _roles_: all the roles that can refer to an object of this
          type

        - _attrs_: object attributes - currently only "searchprio" is
          known, which defines the object's priority in the full-text
          search index, see *note Domain.get_objects(): 259.

 -- Class: sphinx.domains.Index (domain)
     An Index is the description for a domain-specific index.  To add
     an index to a domain, subclass Index, overriding the three name
     attributes:

        * `name' is an identifier used for generating file names.

        * `localname' is the section title for the index.

        * `shortname' is a short name for the index, for use in the
          relation bar in HTML output.  Can be empty to disable entries
          in the relation bar.

     and providing a *note generate(): 267. method.  Then, add the
     index class to your domain's `indices' list.  Extensions can add
     indices to existing domains using *note add_index_to_domain(): 230.

      -- Method: generate (docnames=None)
          Return entries for the index given by _name_.  If _docnames_
          is given, restrict to entries referring to these docnames.

          The return value is a tuple of `(content, collapse)', where
          _collapse_ is a boolean that determines if sub-entries should
          start collapsed (for output formats that support collapsing
          sub-entries).

          _content_ is a sequence of `(letter, entries)' tuples, where
          _letter_ is the "heading" for the given _entries_, usually
          the starting letter.

          _entries_ is a sequence of single entries, where a single
          entry is a sequence `[name, subtype, docname, anchor, extra,
          qualifier, descr]'.  The items in this sequence have the
          following meaning:

             - `name' - the name of the index entry to be displayed

             - `subtype' - sub-entry related type: 0 - normal entry 1 -
               entry with sub-entries 2 - sub-entry

             - `docname' - docname where the entry is located

             - `anchor' - anchor for the entry within `docname'

             - `extra' - extra info for the entry

             - `qualifier' - qualifier for the description

             - `descr' - description for the entry

          Qualifier and description are not rendered e.g. in LaTeX
          output.


File: sphinx.info,  Node: Writing new builders,  Next: Builtin Sphinx extensions,  Prev: Extension API,  Up: Sphinx Extensions

13.3 Writing new builders
=========================

     Todo: Expand this.

 -- Class: sphinx.builders.Builder
     This is the base class for all builders.

     These methods are predefined and will be called from the
     application:

      -- Method: get_relative_uri (from_, to, typ=None)
          Return a relative URI between two source filenames.

          May raise environment.NoUri if there's no way to return a
          sensible URI.

      -- Method: build_all ()
          Build all source files.

      -- Method: build_specific (filenames)
          Only rebuild as much as needed for changes in the _filenames_.

      -- Method: build_update ()
          Only rebuild what was changed or added since last build.

      -- Method: build (docnames, summary=None, method='update')
          Main build method.

          First updates the environment, and then calls `write()'.

     These methods can be overridden in concrete builder classes:

      -- Method: init ()
          Load necessary templates and perform initialization.  The
          default implementation does nothing.

      -- Method: get_outdated_docs ()
          Return an iterable of output files that are outdated, or a
          string describing what an update build will build.

          If the builder does not output individual files corresponding
          to source files, return a string here.  If it does, return an
          iterable of those files that need to be written.

      -- Method: get_target_uri (docname, typ=None)
          Return the target URI for a document name.

          _typ_ can be used to qualify the link characteristic for
          individual builders.

      -- Method: prepare_writing (docnames)

      -- Method: write_doc (docname, doctree)

      -- Method: finish ()
          Finish the building process.

          The default implementation does nothing.


File: sphinx.info,  Node: Builtin Sphinx extensions,  Next: Third-party extensions,  Prev: Writing new builders,  Up: Sphinx Extensions

13.4 Builtin Sphinx extensions
==============================

These extensions are built in and can be activated by respective
entries in the *note extensions: 45. configuration value:

* Menu:

* sphinx.ext.autodoc: sphinx ext autodoc -- Include documentation from docstrings. Include documentation from docstrings
* sphinx.ext.autosummary: sphinx ext autosummary -- Generate autodoc summaries. Generate autodoc summaries
* sphinx.ext.doctest: sphinx ext doctest -- Test snippets in the documentation. Test snippets in the documentation
* sphinx.ext.intersphinx: sphinx ext intersphinx -- Link to other projects' documentation. Link to other projects' documentation
* Math support in Sphinx::
* sphinx.ext.graphviz: sphinx ext graphviz -- Add Graphviz graphs. Add Graphviz graphs
* sphinx.ext.inheritance_diagram: sphinx ext inheritance_diagram -- Include inheritance diagrams. Include inheritance diagrams
* sphinx.ext.refcounting: sphinx ext refcounting -- Keep track of reference counting behavior. Keep track of reference counting behavior
* sphinx.ext.ifconfig: sphinx ext ifconfig -- Include content based on configuration. Include content based on configuration
* sphinx.ext.coverage: sphinx ext coverage -- Collect doc coverage stats. Collect doc coverage stats
* sphinx.ext.todo: sphinx ext todo -- Support for todo items. Support for todo items
* sphinx.ext.extlinks: sphinx ext extlinks -- Markup to shorten external links. Markup to shorten external links
* sphinx.ext.viewcode: sphinx ext viewcode -- Add links to highlighted source code. Add links to highlighted source code
* sphinx.ext.linkcode: sphinx ext linkcode -- Add external links to source code. Add external links to source code
* sphinx.ext.oldcmarkup: sphinx ext oldcmarkup -- Compatibility extension for old C markup. Compatibility extension for old C markup

sphinx.ext.autodoc -- Include documentation from docstrings

* Docstring preprocessing::
* Skipping members::

sphinx.ext.autosummary -- Generate autodoc summaries

* sphinx-autogen: sphinx-autogen -- generate autodoc stub pages. generate autodoc stub pages
* Generating stub pages automatically::
* Customizing templates::

Math support in Sphinx

* sphinx.ext.pngmath: sphinx ext pngmath -- Render math as PNG images. Render math as PNG images
* sphinx.ext.mathjax: sphinx ext mathjax -- Render math via JavaScript. Render math via JavaScript
* sphinx.ext.jsmath: sphinx ext jsmath -- Render math via JavaScript. Render math via JavaScript


File: sphinx.info,  Node: sphinx ext autodoc -- Include documentation from docstrings,  Next: sphinx ext autosummary -- Generate autodoc summaries,  Up: Builtin Sphinx extensions

13.4.1 `sphinx.ext.autodoc' - Include documentation from docstrings
-------------------------------------------------------------------

This extension can import the modules you are documenting, and pull in
documentation from docstrings in a semi-automatic way.

     Note: For Sphinx (actually, the Python interpreter that executes
     Sphinx) to find your module, it must be importable.  That means
     that the module or the package must be in one of the directories
     on `sys.path' - adapt your `sys.path' in the configuration file
     accordingly.

  For this to work, the docstrings must of course be written in correct
reStructuredText.  You can then use all of the usual Sphinx markup in
the docstrings, and it will end up correctly in the documentation.
Together with hand-written documentation, this technique eases the pain
of having to maintain two locations for documentation, while at the
same time avoiding auto-generated-looking pure API documentation.

  `autodoc' provides several directives that are versions of the usual
*note py;module: 9c, *note py;class: 3f. and so forth.  On parsing
time, they import the corresponding module and extract the docstring of
the given objects, inserting them into the page source under a suitable
*note py;module: 9c, *note py;class: 3f. etc.  directive.

     Note: Just as *note py;class: 3f. respects the current *note
     py;module: 9c, *note autoclass: 278. will also do so.  Likewise,
     *note automethod: 279. will respect the current *note py;class: 3f.

 -- Restructuredtext Directive: .. automodule::
 -- Restructuredtext Directive: .. autoclass::
 -- Restructuredtext Directive: .. autoexception::
     Document a module, class or exception.  All three directives will
     by default only insert the docstring of the object itself:

         .. autoclass:: Noodle

     will produce source like this:

         .. class:: Noodle

            Noodle's docstring.

     The "auto" directives can also contain content of their own, it
     will be inserted into the resulting non-auto directive source
     after the docstring (but before any automatic member
     documentation).

     Therefore, you can also mix automatic and non-automatic member
     documentation, like so:

         .. autoclass:: Noodle
            :members: eat, slurp

            .. method:: boil(time=10)

               Boil the noodle *time* minutes.

     *Options and advanced usage*

        * If you want to automatically document members, there's a
          `members' option:

              .. automodule:: noodle
                 :members:

          will document all module members (recursively), and

              .. autoclass:: Noodle
                 :members:

          will document all non-private member functions and properties
          (that is, those whose name doesn't start with `_').

          For modules, `__all__' will be respected when looking for
          members; the order of the members will also be the order in
          `__all__'.

          You can also give an explicit list of members; only these
          will then be documented:

              .. autoclass:: Noodle
                 :members: eat, slurp


        * If you want to make the `members' option (or other flag
          options described below) the default, see *note
          autodoc_default_flags: 27c.

        * Members without docstrings will be left out, unless you give
          the `undoc-members' flag option:

              .. automodule:: noodle
                 :members:
                 :undoc-members:


        * "Private" members (that is, those named like `_private' or
          `__private') will be included if the `private-members' flag
          option is given.

          New in version 1.1.

        * Python "special" members (that is, those named like
          `__special__') will be included if the `special-members' flag
          option is given:

              .. autoclass:: my.Class
                 :members:
                 :private-members:
                 :special-members:

          would document both "private" and "special" members of the
          class.

          New in version 1.1.

          Changed in version 1.2: The option can now take arguments,
          i.e. the special members to document.

        * For classes and exceptions, members inherited from base
          classes will be left out when documenting all members, unless
          you give the `inherited-members' flag option, in addition to
          `members':

              .. autoclass:: Noodle
                 :members:
                 :inherited-members:

          This can be combined with `undoc-members' to document _all_
          available members of the class or module.

          Note: this will lead to markup errors if the inherited
          members come from a module whose docstrings are not reST
          formatted.

          New in version 0.3.

        * It's possible to override the signature for explicitly
          documented callable objects (functions, methods, classes)
          with the regular syntax that will override the signature
          gained from introspection:

              .. autoclass:: Noodle(type)

                 .. automethod:: eat(persona)

          This is useful if the signature from the method is hidden by
          a decorator.

          New in version 0.4.

        * The *note automodule: 27a, *note autoclass: 278. and *note
          autoexception: 27b. directives also support a flag option
          called `show-inheritance'.  When given, a list of base
          classes will be inserted just below the class signature (when
          used with *note automodule: 27a, this will be inserted for
          every class that is documented in the module).

          New in version 0.4.

        * All autodoc directives support the `noindex' flag option that
          has the same effect as for standard *note py;function: fd.
          etc. directives: no index entries are generated for the
          documented object (and all autodocumented members).

          New in version 0.4.

        * *note automodule: 27a. also recognizes the `synopsis',
          `platform' and `deprecated' options that the standard *note
          py;module: 9c. directive supports.

          New in version 0.5.

        * *note automodule: 27a. and *note autoclass: 278. also has an
          `member-order' option that can be used to override the global
          value of *note autodoc_member_order: 27d. for one directive.

          New in version 0.6.

        * The directives supporting member documentation also have a
          `exclude-members' option that can be used to exclude single
          member names from documentation, if all members are to be
          documented.

          New in version 0.6.

          Note: In an *note automodule: 27a. directive with the
          `members' option set, only module members whose `__module__'
          attribute is equal to the module name as given to
          `automodule' will be documented.  This is to prevent
          documentation of imported classes or functions.

 -- Restructuredtext Directive: .. autofunction::
 -- Restructuredtext Directive: .. autodata::
 -- Restructuredtext Directive: .. automethod::
 -- Restructuredtext Directive: .. autoattribute::
     These work exactly like *note autoclass: 278. etc., but do not
     offer the options used for automatic member documentation.

     For module data members and class attributes, documentation can
     either be put into a comment with special formatting (using a `#:'
     to start the comment instead of just `#'), or in a docstring
     _after_ the definition.  Comments need to be either on a line of
     their own _before_ the definition, or immediately after the
     assignment _on the same line_.  The latter form is restricted to
     one line only.

     This means that in the following class definition, all attributes
     can be autodocumented:

         class Foo:
             """Docstring for class Foo."""

             #: Doc comment for class attribute Foo.bar.
             #: It can have multiple lines.
             bar = 1

             flox = 1.5   #: Doc comment for Foo.flox. One line only.

             baz = 2
             """Docstring for class attribute Foo.baz."""

             def __init__(self):
                 #: Doc comment for instance attribute qux.
                 self.qux = 3

                 self.spam = 4
                 """Docstring for instance attribute spam."""

     Changed in version 0.6: *note autodata: 27f. and *note
     autoattribute: 280. can now extract docstrings.

     Changed in version 1.1: Comment docs are now allowed on the same
     line after an assignment.

          Note: If you document decorated functions or methods, keep in
          mind that autodoc retrieves its docstrings by importing the
          module and inspecting the `__doc__' attribute of the given
          function or method.  That means that if a decorator replaces
          the decorated function with another, it must copy the
          original `__doc__' to the new function.

          From Python 2.5, `functools.wraps()' can be used to create
          well-behaved decorating functions.

  There are also new config values that you can set:

 -- Configuration Value: autoclass_content
     This value selects what content will be inserted into the main
     body of an *note autoclass: 278. directive.  The possible values
     are:

    `"class"'
          Only the class' docstring is inserted.  This is the default.
          You can still document `__init__' as a separate method using
          *note automethod: 279. or the `members' option to *note
          autoclass: 278.

    `"both"'
          Both the class' and the `__init__' method's docstring are
          concatenated and inserted.

    `"init"'
          Only the `__init__' method's docstring is inserted.

     New in version 0.3.

 -- Configuration Value: autodoc_member_order
     This value selects if automatically documented members are sorted
     alphabetical (value `'alphabetical''), by member type (value
     `'groupwise'') or by source order (value `'bysource'').  The
     default is alphabetical.

     Note that for source order, the module must be a Python module
     with the source code available.

     New in version 0.6.

     Changed in version 1.0: Support for `'bysource''.

 -- Configuration Value: autodoc_default_flags
     This value is a list of autodoc directive flags that should be
     automatically applied to all autodoc directives.  The supported
     flags are `'members'', `'undoc-members'', `'private-members'',
     `'special-members'', `'inherited-members'' and
     `'show-inheritance''.

     If you set one of these flags in this config value, you can use a
     negated form, `'no-_flag_'', in an autodoc directive, to disable
     it once.  For example, if `autodoc_default_flags' is set to
     `['members', 'undoc-members']', and you write a directive like
     this:

         .. automodule:: foo
            :no-undoc-members:

     the directive will be interpreted as if only `:members:' was given.

     New in version 1.0.

 -- Configuration Value: autodoc_docstring_signature
     Functions imported from C modules cannot be introspected, and
     therefore the signature for such functions cannot be automatically
     determined.  However, it is an often-used convention to put the
     signature into the first line of the function's docstring.

     If this boolean value is set to `True' (which is the default),
     autodoc will look at the first line of the docstring for functions
     and methods, and if it looks like a signature, use the line as the
     signature and remove it from the docstring content.

     New in version 1.1.

* Menu:

* Docstring preprocessing::
* Skipping members::


File: sphinx.info,  Node: Docstring preprocessing,  Next: Skipping members,  Up: sphinx ext autodoc -- Include documentation from docstrings

13.4.1.1 Docstring preprocessing
................................

autodoc provides the following additional events:

 -- Event: autodoc-process-docstring (app, what, name, obj, options,
          lines)
     New in version 0.4.

     Emitted when autodoc has read and processed a docstring.  _lines_
     is a list of strings - the lines of the processed docstring - that
     the event handler can modify *in place* to change what Sphinx puts
     into the output.

          Parameters:

             * *app* - the Sphinx application object

             * *what* - the type of the object which the docstring
               belongs to (one of `"module"', `"class"', `"exception"',
               `"function"', `"method"', `"attribute"')

             * *name* - the fully qualified name of the object

             * *obj* - the object itself

             * *options* - the options given to the directive: an
               object with attributes `inherited_members',
               `undoc_members', `show_inheritance' and `noindex' that
               are true if the flag option of same name was given to the
               auto directive

             * *lines* - the lines of the docstring, see above

 -- Event: autodoc-process-signature (app, what, name, obj, options,
          signature, return_annotation)
     New in version 0.5.

     Emitted when autodoc has formatted a signature for an object. The
     event handler can return a new tuple `(signature,
     return_annotation)' to change what Sphinx puts into the output.

          Parameters:

             * *app* - the Sphinx application object

             * *what* - the type of the object which the docstring
               belongs to (one of `"module"', `"class"', `"exception"',
               `"function"', `"method"', `"attribute"')

             * *name* - the fully qualified name of the object

             * *obj* - the object itself

             * *options* - the options given to the directive: an
               object with attributes `inherited_members',
               `undoc_members', `show_inheritance' and `noindex' that
               are true if the flag option of same name was given to the
               auto directive

             * *signature* - function signature, as a string of the form
               `"(parameter_1, parameter_2)"', or `None' if
               introspection didn't succeed and signature wasn't
               specified in the directive.

             * *return_annotation* - function return annotation as a
               string of the form `" -> annotation"', or `None' if
               there is no return annotation

  The *note sphinx.ext.autodoc: 11. module provides factory functions
for commonly needed docstring processing in event *note
autodoc-process-docstring: 284.:

 -- Function: sphinx.ext.autodoc.cut_lines (pre, post=0, what=None)
     Return a listener that removes the first _pre_ and last _post_
     lines of every docstring.  If _what_ is a sequence of strings,
     only docstrings of a type in _what_ will be processed.

     Use like this (e.g. in the `setup()' function of `conf.py'):

         from sphinx.ext.autodoc import cut_lines
         app.connect('autodoc-process-docstring', cut_lines(4, what=['module']))

     This can (and should) be used in place of `automodule_skip_lines'.

 -- Function: sphinx.ext.autodoc.between (marker, what=None,
          keepempty=False, exclude=False)
     Return a listener that either keeps, or if _exclude_ is True
     excludes, lines between lines that match the _marker_ regular
     expression.  If no line matches, the resulting docstring would be
     empty, so no change will be made unless _keepempty_ is true.

     If _what_ is a sequence of strings, only docstrings of a type in
     _what_ will be processed.


File: sphinx.info,  Node: Skipping members,  Prev: Docstring preprocessing,  Up: sphinx ext autodoc -- Include documentation from docstrings

13.4.1.2 Skipping members
.........................

autodoc allows the user to define a custom method for determining
whether a member should be included in the documentation by using the
following event:

 -- Event: autodoc-skip-member (app, what, name, obj, skip, options)
     New in version 0.5.

     Emitted when autodoc has to decide whether a member should be
     included in the documentation.  The member is excluded if a
     handler returns `True'.  It is included if the handler returns
     `False'.

          Parameters:

             * *app* - the Sphinx application object

             * *what* - the type of the object which the docstring
               belongs to (one of `"module"', `"class"', `"exception"',
               `"function"', `"method"', `"attribute"')

             * *name* - the fully qualified name of the object

             * *obj* - the object itself

             * *skip* - a boolean indicating if autodoc will skip this
               member if the user handler does not override the decision

             * *options* - the options given to the directive: an
               object with attributes `inherited_members',
               `undoc_members', `show_inheritance' and `noindex' that
               are true if the flag option of same name was given to the
               auto directive


File: sphinx.info,  Node: sphinx ext autosummary -- Generate autodoc summaries,  Next: sphinx ext doctest -- Test snippets in the documentation,  Prev: sphinx ext autodoc -- Include documentation from docstrings,  Up: Builtin Sphinx extensions

13.4.2 `sphinx.ext.autosummary' - Generate autodoc summaries
------------------------------------------------------------

New in version 0.6.

  This extension generates function/method/attribute summary lists,
similar to those output e.g. by Epydoc and other API doc generation
tools.  This is especially useful when your docstrings are long and
detailed, and putting each one of them on a separate page makes them
easier to read.

  The *note sphinx.ext.autosummary: 12. extension does this in two
parts:

  1. There is an *note autosummary: 28c. directive for generating
     summary listings that contain links to the documented items, and
     short summary blurbs extracted from their docstrings.

  2. Optionally, the convenience script *sphinx-autogen* or the new
     *note autosummary_generate: 28d. config value can be used to
     generate short "stub" files for the entries listed in the *note
     autosummary: 28c. directives.  These files by default contain only
     the corresponding *note sphinx.ext.autodoc: 11.  directive, but
     can be customized with templates.

 -- Restructuredtext Directive: .. autosummary::
     Insert a table that contains links to documented items, and a
     short summary blurb (the first sentence of the docstring) for each
     of them.

     The *note autosummary: 28c. directive can also optionally serve as
     a *note toctree: 93. entry for the included items. Optionally, stub
     `.rst' files for these items can also be automatically generated.

     For example,

         .. currentmodule:: sphinx

         .. autosummary::

            environment.BuildEnvironment
            util.relative_uri

     produces a table like this:

           `environment.BuildEnvironment'(srcdir,The environment in which the ReST files are translated.
          ...)           
          `util.relative_uri'(base,Return a relative URL from `base' to `to'.
          to)            


     Autosummary preprocesses the docstrings and signatures with the
     same *note autodoc-process-docstring: 284. and *note
     autodoc-process-signature: 285.  hooks as *note autodoc: 11.

     *Options*

        * If you want the *note autosummary: 28c. table to also serve
          as a *note toctree: 93.  entry, use the `toctree' option, for
          example:

              .. autosummary::
                 :toctree: DIRNAME

                 sphinx.environment.BuildEnvironment
                 sphinx.util.relative_uri

          The `toctree' option also signals to the *sphinx-autogen*
          script that stub pages should be generated for the entries
          listed in this directive.  The option accepts a directory
          name as an argument; *sphinx-autogen* will by default place
          its output in this directory. If no argument is given, output
          is placed in the same directory as the file that contains the
          directive.

        * If you don't want the *note autosummary: 28c. to show
          function signatures in the listing, include the
          `nosignatures' option:

              .. autosummary::
                 :nosignatures:

                 sphinx.environment.BuildEnvironment
                 sphinx.util.relative_uri


        * You can specify a custom template with the `template' option.
          For example,

              .. autosummary::
                 :template: mytemplate.rst

                 sphinx.environment.BuildEnvironment

          would use the template `mytemplate.rst' in your *note
          templates_path: 173. to generate the pages for all entries
          listed. See *note Customizing templates: 28e. below.

          New in version 1.0.

* Menu:

* sphinx-autogen: sphinx-autogen -- generate autodoc stub pages. generate autodoc stub pages
* Generating stub pages automatically::
* Customizing templates::


File: sphinx.info,  Node: sphinx-autogen -- generate autodoc stub pages,  Next: Generating stub pages automatically,  Up: sphinx ext autosummary -- Generate autodoc summaries

13.4.2.1 *sphinx-autogen* - generate autodoc stub pages
.......................................................

The *sphinx-autogen* script can be used to conveniently generate stub
documentation pages for items included in *note autosummary: 28c.
listings.

  For example, the command

    $ sphinx-autogen -o generated *.rst

will read all *note autosummary: 28c. tables in the `*.rst' files that
have the `:toctree:' option set, and output corresponding stub pages in
directory `generated' for all documented items.  The generated pages by
default contain text of the form:

    sphinx.util.relative_uri
    ========================

    .. autofunction:: sphinx.util.relative_uri

If the `-o' option is not given, the script will place the output files
in the directories specified in the `:toctree:' options.


File: sphinx.info,  Node: Generating stub pages automatically,  Next: Customizing templates,  Prev: sphinx-autogen -- generate autodoc stub pages,  Up: sphinx ext autosummary -- Generate autodoc summaries

13.4.2.2 Generating stub pages automatically
............................................

If you do not want to create stub pages with *sphinx-autogen*, you can
also use this new config value:

 -- Configuration Value: autosummary_generate
     Boolean indicating whether to scan all found documents for
     autosummary directives, and to generate stub pages for each.

     Can also be a list of documents for which stub pages should be
     generated.

     The new files will be placed in the directories specified in the
     `:toctree:' options of the directives.


File: sphinx.info,  Node: Customizing templates,  Prev: Generating stub pages automatically,  Up: sphinx ext autosummary -- Generate autodoc summaries

13.4.2.3 Customizing templates
..............................

New in version 1.0.

  You can customize the stub page templates, in a similar way as the
HTML Jinja templates, see *note Templating: 1e8. (*note TemplateBridge:
175.  is not supported.)

     Note: If you find yourself spending much time tailoring the stub
     templates, this may indicate that it's a better idea to write
     custom narrative documentation instead.

  Autosummary uses the following template files:

   - `autosummary/base.rst' - fallback template

   - `autosummary/module.rst' - template for modules

   - `autosummary/class.rst' - template for classes

   - `autosummary/function.rst' - template for functions

   - `autosummary/attribute.rst' - template for class attributes

   - `autosummary/method.rst' - template for class methods

  The following variables available in the templates:

 -- Data: name
     Name of the documented object, excluding the module and class
     parts.

 -- Data: objname
     Name of the documented object, excluding the module parts.

 -- Data: fullname
     Full name of the documented object, including module and class
     parts.

 -- Data: module
     Name of the module the documented object belongs to.

 -- Data: class
     Name of the class the documented object belongs to.  Only
     available for methods and attributes.

 -- Data: underline
     A string containing `len(full_name) * '=''.

 -- Data: members
     List containing names of all members of the module or class.  Only
     available for modules and classes.

 -- Data: functions
     List containing names of "public" functions in the module.  Here,
     "public" here means that the name does not start with an
     underscore. Only available for modules.

 -- Data: classes
     List containing names of "public" classes in the module.  Only
     available for modules.

 -- Data: exceptions
     List containing names of "public" exceptions in the module.  Only
     available for modules.

 -- Data: methods
     List containing names of "public" methods in the class.  Only
     available for classes.

 -- Data: attributes
     List containing names of "public" attributes in the class.  Only
     available for classes.

     Note: You can use the *note autosummary: 28c. directive in the
     stub pages.  Stub pages are generated also based on these
     directives.


File: sphinx.info,  Node: sphinx ext doctest -- Test snippets in the documentation,  Next: sphinx ext intersphinx -- Link to other projects' documentation,  Prev: sphinx ext autosummary -- Generate autodoc summaries,  Up: Builtin Sphinx extensions

13.4.3 `sphinx.ext.doctest' - Test snippets in the documentation
----------------------------------------------------------------

This extension allows you to test snippets in the documentation in a
natural way.  It works by collecting specially-marked up code blocks
and running them as doctest tests.

  Within one document, test code is partitioned in _groups_, where each
group consists of:

   * zero or more _setup code_ blocks (e.g. importing the module to
     test)

   * one or more _test_ blocks

  When building the docs with the `doctest' builder, groups are
collected for each document and run one after the other, first
executing setup code blocks, then the test blocks in the order they
appear in the file.

  There are two kinds of test blocks:

   * _doctest-style_ blocks mimic interactive sessions by interleaving
     Python code (including the interpreter prompt) and output.

   * _code-output-style_ blocks consist of an ordinary piece of Python
     code, and optionally, a piece of output for that code.

  The doctest extension provides four directives.  The _group_ argument
is interpreted as follows: if it is empty, the block is assigned to the
group named `default'.  If it is `*', the block is assigned to all
groups (including the `default' group).  Otherwise, it must be a
comma-separated list of group names.

 -- Restructuredtext Directive: .. testsetup:: [group]
     A setup code block.  This code is not shown in the output for
     other builders, but executed before the doctests of the group(s)
     it belongs to.

 -- Restructuredtext Directive: .. testcleanup:: [group]
     A cleanup code block.  This code is not shown in the output for
     other builders, but executed after the doctests of the group(s) it
     belongs to.

     New in version 1.1.

 -- Restructuredtext Directive: .. doctest:: [group]
     A doctest-style code block.  You can use standard `doctest' flags
     for controlling how actual output is compared with what you give
     as output.  By default, these options are enabled: `ELLIPSIS'
     (allowing you to put ellipses in the expected output that match
     anything in the actual output), `IGNORE_EXCEPTION_DETAIL' (not
     comparing tracebacks), `DONT_ACCEPT_TRUE_FOR_1' (by default,
     doctest accepts "True" in the output where "1" is given - this is
     a relic of pre-Python 2.2 times).

     This directive supports two options:

        * `hide', a flag option, hides the doctest block in other
          builders.  By default it is shown as a highlighted doctest
          block.

        * `options', a string option, can be used to give a
          comma-separated list of doctest flags that apply to each
          example in the tests.  (You still can give explicit flags per
          example, with doctest comments, but they will show up in
          other builders too.)

     Note that like with standard doctests, you have to use
     `<BLANKLINE>' to signal a blank line in the expected output.  The
     `<BLANKLINE>' is removed when building presentation output (HTML,
     LaTeX etc.).

     Also, you can give inline doctest options, like in doctest:

         >>> datetime.date.now()   # doctest: +SKIP
         datetime.date(2008, 1, 1)

     They will be respected when the test is run, but stripped from
     presentation output.

 -- Restructuredtext Directive: .. testcode:: [group]
     A code block for a code-output-style test.

     This directive supports one option:

        * `hide', a flag option, hides the code block in other
          builders.  By default it is shown as a highlighted code block.

          Note: Code in a `testcode' block is always executed all at
          once, no matter how many statements it contains.  Therefore,
          output will _not_ be generated for bare expressions - use
          `print'.  Example:

              .. testcode::

                 1+1        # this will give no output!
                 print 2+2  # this will give output

              .. testoutput::

                 4

          Also, please be aware that since the doctest module does not
          support mixing regular output and an exception message in the
          same snippet, this applies to testcode/testoutput as well.

 -- Restructuredtext Directive: .. testoutput:: [group]
     The corresponding output, or the exception message, for the last
     *note testcode: 2a2. block.

     This directive supports two options:

        * `hide', a flag option, hides the output block in other
          builders.  By default it is shown as a literal block without
          highlighting.

        * `options', a string option, can be used to give doctest flags
          (comma-separated) just like in normal doctest blocks.

     Example:

         .. testcode::

            print 'Output     text.'

         .. testoutput::
            :hide:
            :options: -ELLIPSIS, +NORMALIZE_WHITESPACE

            Output text.



  The following is an example for the usage of the directives.  The
test via *note doctest: 2a1. and the test via *note testcode: 2a2. and
*note testoutput: 2a3. are equivalent.

    The parrot module
    =================

    .. testsetup:: *

       import parrot

    The parrot module is a module about parrots.

    Doctest example:

    .. doctest::

       >>> parrot.voom(3000)
       This parrot wouldn't voom if you put 3000 volts through it!

    Test-Output example:

    .. testcode::

       parrot.voom(3000)

    This would output:

    .. testoutput::

       This parrot wouldn't voom if you put 3000 volts through it!

There are also these config values for customizing the doctest
extension:

 -- Configuration Value: doctest_path
     A list of directories that will be added to `sys.path' when the
     doctest builder is used.  (Make sure it contains absolute paths.)

 -- Configuration Value: doctest_global_setup
     Python code that is treated like it were put in a `testsetup'
     directive for _every_ file that is tested, and for every group.
     You can use this to e.g. import modules you will always need in
     your doctests.

     New in version 0.6.

 -- Configuration Value: doctest_global_cleanup
     Python code that is treated like it were put in a `testcleanup'
     directive for _every_ file that is tested, and for every group.
     You can use this to e.g. remove any temporary files that the tests
     leave behind.

     New in version 1.1.

 -- Configuration Value: doctest_test_doctest_blocks
     If this is a nonempty string (the default is `'default''),
     standard reST doctest blocks will be tested too.  They will be
     assigned to the group name given.

     reST doctest blocks are simply doctests put into a paragraph of
     their own, like so:

         Some documentation text.

         >>> print 1
         1

         Some more documentation text.

     (Note that no special `::' is used to introduce a doctest block;
     docutils recognizes them from the leading `>>>'.  Also, no
     additional indentation is used, though it doesn't hurt.)

     If this value is left at its default value, the above snippet is
     interpreted by the doctest builder exactly like the following:

         Some documentation text.

         .. doctest::

            >>> print 1
            1

         Some more documentation text.

     This feature makes it easy for you to test doctests in docstrings
     included with the *note autodoc: 11. extension without marking
     them up with a special directive.

     Note though that you can't have blank lines in reST doctest
     blocks.  They will be interpreted as one block ending and another
     one starting.  Also, removal of `<BLANKLINE>' and `# doctest:'
     options only works in *note doctest: 2a1. blocks, though you may
     set *note trim_doctest_flags: 181. to achieve that in all code
     blocks with Python console content.


File: sphinx.info,  Node: sphinx ext intersphinx -- Link to other projects' documentation,  Next: Math support in Sphinx,  Prev: sphinx ext doctest -- Test snippets in the documentation,  Up: Builtin Sphinx extensions

13.4.4 `sphinx.ext.intersphinx' - Link to other projects' documentation
-----------------------------------------------------------------------

New in version 0.5.

  This extension can generate automatic links to the documentation of
objects in other projects.

  Usage is simple: whenever Sphinx encounters a cross-reference that
has no matching target in the current documentation set, it looks for
targets in the documentation sets configured in *note
intersphinx_mapping: 2aa.  A reference like
`:py:class:`zipfile.ZipFile`' can then link to the Python documentation
for the ZipFile class, without you having to specify where it is located
exactly.

  When using the "new" format (see below), you can even force lookup in
a foreign set by prefixing the link target appropriately.  A link like
`:ref:`comparison manual <python:comparisons>`' will then link to the
label "comparisons" in the doc set "python", if it exists.

  Behind the scenes, this works as follows:

   * Each Sphinx HTML build creates a file named `objects.inv' that
     contains a mapping from object names to URIs relative to the HTML
     set's root.

   * Projects using the Intersphinx extension can specify the location
     of such mapping files in the *note intersphinx_mapping: 2aa.
     config value.  The mapping will then be used to resolve otherwise
     missing references to objects into links to the other
     documentation.

   * By default, the mapping file is assumed to be at the same location
     as the rest of the documentation; however, the location of the
     mapping file can also be specified individually, e.g. if the docs
     should be buildable without Internet access.

  To use intersphinx linking, add `'sphinx.ext.intersphinx'' to your
*note extensions: 45. config value, and use these new config values to
activate linking:

 -- Configuration Value: intersphinx_mapping
     This config value contains the locations and names of other
     projects that should be linked to in this documentation.

     Relative local paths for target locations are taken as relative to
     the base of the built documentation, while relative local paths
     for inventory locations are taken as relative to the source
     directory.

     When fetching remote inventory files, proxy settings will be read
     from the `$HTTP_PROXY' environment variable.

     *Old format for this config value*

     This is the format used before Sphinx 1.0.  It is still recognized.

     A dictionary mapping URIs to either `None' or an URI.  The keys
     are the base URI of the foreign Sphinx documentation sets and can
     be local paths or HTTP URIs.  The values indicate where the
     inventory file can be found: they can be `None' (at the same
     location as the base URI) or another local or HTTP URI.

     *New format for this config value*

     New in version 1.0.

     A dictionary mapping unique identifiers to a tuple `(target,
     inventory)'.  Each `target' is the base URI of a foreign Sphinx
     documentation set and can be a local path or an HTTP URI.  The
     `inventory' indicates where the inventory file can be found: it
     can be `None' (at the same location as the base URI) or another
     local or HTTP URI.

     The unique identifier can be used to prefix cross-reference
     targets, so that it is clear which intersphinx set the target
     belongs to.  A link like `:ref:`comparison manual
     <python:comparisons>`' will link to the label "comparisons" in the
     doc set "python", if it exists.

     *Example*

     To add links to modules and objects in the Python standard library
     documentation, use:

         intersphinx_mapping = {'python': ('http://docs.python.org/3.2', None)}

     This will download the corresponding `objects.inv' file from the
     Internet and generate links to the pages under the given URI.  The
     downloaded inventory is cached in the Sphinx environment, so it
     must be redownloaded whenever you do a full rebuild.

     A second example, showing the meaning of a non-`None' value of the
     second tuple item:

         intersphinx_mapping = {'python': ('http://docs.python.org/3.2',
                                           'python-inv.txt')}

     This will read the inventory from `python-inv.txt' in the source
     directory, but still generate links to the pages under
     `http://docs.python.org/3.2'.  It is up to you to update the
     inventory file as new objects are added to the Python
     documentation.

 -- Configuration Value: intersphinx_cache_limit
     The maximum number of days to cache remote inventories.  The
     default is `5', meaning five days.  Set this to a negative value
     to cache inventories for unlimited time.


File: sphinx.info,  Node: Math support in Sphinx,  Next: sphinx ext graphviz -- Add Graphviz graphs,  Prev: sphinx ext intersphinx -- Link to other projects' documentation,  Up: Builtin Sphinx extensions

13.4.5 Math support in Sphinx
-----------------------------

New in version 0.5.

  Since mathematical notation isn't natively supported by HTML in any
way, Sphinx supports math in documentation with several extensions.

  The basic math support is contained in *note sphinx.ext.mathbase: 1c.
Other math support extensions should, if possible, reuse that support
too.

     Note: *note mathbase: 1c. is not meant to be added to the *note
     extensions: 45. config value, instead, use either *note
     sphinx.ext.pngmath: 1f. or *note sphinx.ext.mathjax: 1d. as
     described below.

  The input language for mathematics is LaTeX markup.  This is the
de-facto standard for plain-text math notation and has the added
advantage that no further translation is necessary when building LaTeX
output.

  Keep in mind that when you put math markup in *Python docstrings*
read by *note autodoc: 11, you either have to double all backslashes,
or use Python raw strings (`r"raw"').

  *note mathbase: 1c. defines these new markup elements:

 -- Restructuredtext Role: :math:
     Role for inline math.  Use like this:

         Since Pythagoras, we know that :math:`a^2 + b^2 = c^2`.



 -- Restructuredtext Directive: .. math::
     Directive for displayed math (math that takes the whole line for
     itself).

     The directive supports multiple equations, which should be
     separated by a blank line:

         .. math::

            (a + b)^2 = a^2 + 2ab + b^2

            (a - b)^2 = a^2 - 2ab + b^2

     In addition, each single equation is set within a `split'
     environment, which means that you can have multiple aligned lines
     in an equation, aligned at `&' and separated by `\\':

         .. math::

            (a + b)^2  &=  (a + b)(a + b) \\
                       &=  a^2 + 2ab + b^2

     For more details, look into the documentation of the AmSMath LaTeX
     package(1).

     When the math is only one line of text, it can also be given as a
     directive argument:

         .. math:: (a + b)^2 = a^2 + 2ab + b^2

     Normally, equations are not numbered.  If you want your equation
     to get a number, use the `label' option.  When given, it selects
     an internal label for the equation, by which it can be
     cross-referenced, and causes an equation number to be issued.  See
     `eqref' for an example.  The numbering style depends on the output
     format.

     There is also an option `nowrap' that prevents any wrapping of the
     given math in a math environment.  When you give this option, you
     must make sure yourself that the math is properly set up.  For
     example:

         .. math::
            :nowrap:

            \begin{eqnarray}
               y    & = & ax^2 + bx + c \\
               f(x) & = & x^2 + 2xy + y^2
            \end{eqnarray}



 -- Restructuredtext Role: :eq:
     Role for cross-referencing equations via their label.  This
     currently works only within the same document.  Example:

         .. math:: e^{i\pi} + 1 = 0
            :label: euler

         Euler's identity, equation :eq:`euler`, was elected one of the most
         beautiful mathematical formulas.



* Menu:

* sphinx.ext.pngmath: sphinx ext pngmath -- Render math as PNG images. Render math as PNG images
* sphinx.ext.mathjax: sphinx ext mathjax -- Render math via JavaScript. Render math via JavaScript
* sphinx.ext.jsmath: sphinx ext jsmath -- Render math via JavaScript. Render math via JavaScript

  ---------- Footnotes ----------

  (1) http://www.ams.org/publications/authors/tex/amslatex


File: sphinx.info,  Node: sphinx ext pngmath -- Render math as PNG images,  Next: sphinx ext mathjax -- Render math via JavaScript,  Up: Math support in Sphinx

13.4.5.1 `sphinx.ext.pngmath' - Render math as PNG images
.........................................................

This extension renders math via LaTeX and dvipng(1) into PNG images.
This of course means that the computer where the docs are built must
have both programs available.

  There are various config values you can set to influence how the
images are built:

 -- Configuration Value: pngmath_latex
     The command name with which to invoke LaTeX.  The default is
     `'latex''; you may need to set this to a full path if `latex' is
     not in the executable search path.

     Since this setting is not portable from system to system, it is
     normally not useful to set it in `conf.py'; rather, giving it on
     the *sphinx-build* command line via the `-D' option should be
     preferable, like this:

         sphinx-build -b html -D pngmath_latex=C:\tex\latex.exe . _build/html

     Changed in version 0.5.1: This value should only contain the path
     to the latex executable, not further arguments; use *note
     pngmath_latex_args: 2b3. for that purpose.

 -- Configuration Value: pngmath_dvipng
     The command name with which to invoke `dvipng'.  The default is
     `'dvipng''; you may need to set this to a full path if `dvipng' is
     not in the executable search path.

 -- Configuration Value: pngmath_latex_args
     Additional arguments to give to latex, as a list.  The default is
     an empty list.

     New in version 0.5.1.

 -- Configuration Value: pngmath_latex_preamble
     Additional LaTeX code to put into the preamble of the short LaTeX
     files that are used to translate the math snippets.  This is empty
     by default.  Use it e.g. to add more packages whose commands you
     want to use in the math.

 -- Configuration Value: pngmath_dvipng_args
     Additional arguments to give to dvipng, as a list.  The default
     value is `['-gamma', '1.5', '-D', '110', '-bg', 'Transparent']'
     which makes the image a bit darker and larger then it is by
     default, and produces PNGs with a transparent background.

     Changed in version 1.2: Now includes `-bg Transparent' by default.

 -- Configuration Value: pngmath_use_preview
     `dvipng' has the ability to determine the "depth" of the rendered
     text: for example, when typesetting a fraction inline, the
     baseline of surrounding text should not be flush with the bottom
     of the image, rather the image should extend a bit below the
     baseline.  This is what TeX calls "depth".  When this is enabled,
     the images put into the HTML document will get a `vertical-align'
     style that correctly aligns the baselines.

     Unfortunately, this only works when the preview-latex package(2) is
     installed.  Therefore, the default for this option is `False'.

 -- Configuration Value: pngmath_add_tooltips
     Default: true.  If false, do not add the LaTeX code as an "alt"
     attribute for math images.

     New in version 1.1.

  ---------- Footnotes ----------

  (1) http://savannah.nongnu.org/projects/dvipng/

  (2) http://www.gnu.org/software/auctex/preview-latex.html


File: sphinx.info,  Node: sphinx ext mathjax -- Render math via JavaScript,  Next: sphinx ext jsmath -- Render math via JavaScript,  Prev: sphinx ext pngmath -- Render math as PNG images,  Up: Math support in Sphinx

13.4.5.2 `sphinx.ext.mathjax' - Render math via JavaScript
..........................................................

New in version 1.1.

  This extension puts math as-is into the HTML files.  The JavaScript
package MathJax(1) is then loaded and transforms the LaTeX markup to
readable math live in the browser.

  Because MathJax (and the necessary fonts) is very large, it is not
included in Sphinx.

 -- Configuration Value: mathjax_path
     The path to the JavaScript file to include in the HTML files in
     order to load MathJax.

     The default is the `http://' URL that loads the JS files from the
     MathJax CDN(2).  If you want MathJax to be available offline, you
     have to donwload it and set this value to a different path.

     The path can be absolute or relative; if it is relative, it is
     relative to the `_static' directory of the built docs.

     For example, if you put MathJax into the static path of the Sphinx
     docs, this value would be `MathJax/MathJax.js'.  If you host more
     than one Sphinx documentation set on one server, it is advisable
     to install MathJax in a shared location.

     You can also give a full `http://' URL different from the CDN URL.

  ---------- Footnotes ----------

  (1) http://www.mathjax.org/

  (2) http://www.mathjax.org/docs/1.1/start.html


File: sphinx.info,  Node: sphinx ext jsmath -- Render math via JavaScript,  Prev: sphinx ext mathjax -- Render math via JavaScript,  Up: Math support in Sphinx

13.4.5.3 `sphinx.ext.jsmath' - Render math via JavaScript
.........................................................

This extension works just as the MathJax extension does, but uses the
older package jsMath(1).  It provides this config value:

 -- Configuration Value: jsmath_path
     The path to the JavaScript file to include in the HTML files in
     order to load JSMath.  There is no default.

     The path can be absolute or relative; if it is relative, it is
     relative to the `_static' directory of the built docs.

     For example, if you put JSMath into the static path of the Sphinx
     docs, this value would be `jsMath/easy/load.js'.  If you host more
     than one Sphinx documentation set on one server, it is advisable
     to install jsMath in a shared location.

  ---------- Footnotes ----------

  (1) http://www.math.union.edu/~dpvc/jsmath/


File: sphinx.info,  Node: sphinx ext graphviz -- Add Graphviz graphs,  Next: sphinx ext inheritance_diagram -- Include inheritance diagrams,  Prev: Math support in Sphinx,  Up: Builtin Sphinx extensions

13.4.6 `sphinx.ext.graphviz' - Add Graphviz graphs
--------------------------------------------------

New in version 0.6.

  This extension allows you to embed Graphviz(1) graphs in your
documents.

  It adds these directives:

 -- Restructuredtext Directive: .. graphviz::
     Directive to embed graphviz code.  The input code for `dot' is
     given as the content.  For example:

         .. graphviz::

            digraph foo {
               "bar" -> "baz";
            }

     In HTML output, the code will be rendered to a PNG or SVG image
     (see *note graphviz_output_format: 2c1.).  In LaTeX output, the
     code will be rendered to an embeddable PDF file.

     You can also embed external dot files, by giving the file name as
     an argument to *note graphviz: 2c0. and no additional content:

         .. graphviz:: external.dot

     As for all file references in Sphinx, if the filename is absolute,
     it is taken as relative to the source directory.

     Changed in version 1.1: Added support for external files.

 -- Restructuredtext Directive: .. graph::
     Directive for embedding a single undirected graph.  The name is
     given as a directive argument, the contents of the graph are the
     directive content.  This is a convenience directive to generate
     `graph <name> { <content> }'.

     For example:

         .. graph:: foo

            "bar" -- "baz";



 -- Restructuredtext Directive: .. digraph::
     Directive for embedding a single directed graph.  The name is
     given as a directive argument, the contents of the graph are the
     directive content.  This is a convenience directive to generate
     `digraph <name> { <content> }'.

     For example:

         .. digraph:: foo

            "bar" -> "baz" -> "quux";



  New in version 1.0: All three directives support an `alt' option that
determines the image's alternate text for HTML output.  If not given,
the alternate text defaults to the graphviz code.

  New in version 1.1: All three directives support an `inline' flag
that controls paragraph breaks in the output.  When set, the graph is
inserted into the current paragraph.  If the flag is not given,
paragraph breaks are introduced before and after the image (the
default).

  New in version 1.1: All three directives support a `caption' option
that can be used to give a caption to the diagram.  Naturally, diagrams
marked as "inline" cannot have a caption.

  There are also these new config values:

 -- Configuration Value: graphviz_dot
     The command name with which to invoke `dot'.  The default is
     `'dot''; you may need to set this to a full path if `dot' is not
     in the executable search path.

     Since this setting is not portable from system to system, it is
     normally not useful to set it in `conf.py'; rather, giving it on
     the *sphinx-build* command line via the `-D' option should be
     preferable, like this:

         sphinx-build -b html -D graphviz_dot=C:\graphviz\bin\dot.exe . _build/html



 -- Configuration Value: graphviz_dot_args
     Additional command-line arguments to give to dot, as a list.  The
     default is an empty list.  This is the right place to set global
     graph, node or edge attributes via dot's `-G', `-N' and `-E'
     options.

 -- Configuration Value: graphviz_output_format
     The output format for Graphviz when building HTML files.  This
     must be either `'png'' or `'svg''; the default is `'png''.

     New in version 1.0: Previously, output always was PNG.

  ---------- Footnotes ----------

  (1) http://graphviz.org/


File: sphinx.info,  Node: sphinx ext inheritance_diagram -- Include inheritance diagrams,  Next: sphinx ext refcounting -- Keep track of reference counting behavior,  Prev: sphinx ext graphviz -- Add Graphviz graphs,  Up: Builtin Sphinx extensions

13.4.7 `sphinx.ext.inheritance_diagram' - Include inheritance diagrams
----------------------------------------------------------------------

New in version 0.6.

  This extension allows you to include inheritance diagrams, rendered
via the *note Graphviz extension: 16.

  It adds this directive:

 -- Restructuredtext Directive: .. inheritance-diagram::
     This directive has one or more arguments, each giving a module or
     class name.  Class names can be unqualified; in that case they are
     taken to exist in the currently described module (see *note
     py;module: 9c.).

     For each given class, and each class in each given module, the
     base classes are determined.  Then, from all classes and their
     base classes, a graph is generated which is then rendered via the
     graphviz extension to a directed graph.

     This directive supports an option called `parts' that, if given,
     must be an integer, advising the directive to remove that many
     parts of module names from the displayed names.  (For example, if
     all your class names start with `lib.', you can give `:parts: 1'
     to remove that prefix from the displayed node names.)

     It also supports a `private-bases' flag option; if given, private
     base classes (those whose name starts with `_') will be included.

     Changed in version 1.1: Added `private-bases' option; previously,
     all bases were always included.

  New config values are:

 -- Configuration Value: inheritance_graph_attrs
     A dictionary of graphviz graph attributes for inheritance diagrams.

     For example:

         inheritance_graph_attrs = dict(rankdir="LR", size='"6.0, 8.0"',
                                        fontsize=14, ratio='compress')



 -- Configuration Value: inheritance_node_attrs
     A dictionary of graphviz node attributes for inheritance diagrams.

     For example:

         inheritance_node_attrs = dict(shape='ellipse', fontsize=14, height=0.75,
                                       color='dodgerblue1', style='filled')



 -- Configuration Value: inheritance_edge_attrs
     A dictionary of graphviz edge attributes for inheritance diagrams.


File: sphinx.info,  Node: sphinx ext refcounting -- Keep track of reference counting behavior,  Next: sphinx ext ifconfig -- Include content based on configuration,  Prev: sphinx ext inheritance_diagram -- Include inheritance diagrams,  Up: Builtin Sphinx extensions

13.4.8 `sphinx.ext.refcounting' - Keep track of reference counting behavior
---------------------------------------------------------------------------

     Todo: Write this section.


File: sphinx.info,  Node: sphinx ext ifconfig -- Include content based on configuration,  Next: sphinx ext coverage -- Collect doc coverage stats,  Prev: sphinx ext refcounting -- Keep track of reference counting behavior,  Up: Builtin Sphinx extensions

13.4.9 `sphinx.ext.ifconfig' - Include content based on configuration
---------------------------------------------------------------------

This extension is quite simple, and features only one directive:

 -- Restructuredtext Directive: .. ifconfig::
     Include content of the directive only if the Python expression
     given as an argument is `True', evaluated in the namespace of the
     project's configuration (that is, all registered variables from
     `conf.py' are available).

     For example, one could write

         .. ifconfig:: releaselevel in ('alpha', 'beta', 'rc')

            This stuff is only included in the built docs for unstable versions.

     To make a custom config value known to Sphinx, use *note
     add_config_value(): 221. in the setup function in `conf.py', e.g.:

         def setup(app):
             app.add_config_value('releaselevel', '', True)

     The second argument is the default value, the third should always
     be `True' for such values (it selects if Sphinx re-reads the
     documents if the value changes).


File: sphinx.info,  Node: sphinx ext coverage -- Collect doc coverage stats,  Next: sphinx ext todo -- Support for todo items,  Prev: sphinx ext ifconfig -- Include content based on configuration,  Up: Builtin Sphinx extensions

13.4.10 `sphinx.ext.coverage' - Collect doc coverage stats
----------------------------------------------------------

This extension features one additional builder, the *note
CoverageBuilder: 2d3.

 -- Class: sphinx.ext.coverage.CoverageBuilder
     To use this builder, activate the coverage extension in your
     configuration file and give `-b coverage' on the command line.

     Todo: Write this section.

  Several new configuration values can be used to specify what the
builder should check:

 -- Configuration Value: coverage_ignore_modules

 -- Configuration Value: coverage_ignore_functions

 -- Configuration Value: coverage_ignore_classes

 -- Configuration Value: coverage_c_path

 -- Configuration Value: coverage_c_regexes

 -- Configuration Value: coverage_ignore_c_items

 -- Configuration Value: coverage_write_headline
     Set to `False' to not write headlines.

     New in version 1.1.

 -- Configuration Value: coverage_skip_undoc_in_source
     Skip objects that are not documented in the source with a
     docstring.  `False' by default.

     New in version 1.1.


File: sphinx.info,  Node: sphinx ext todo -- Support for todo items,  Next: sphinx ext extlinks -- Markup to shorten external links,  Prev: sphinx ext coverage -- Collect doc coverage stats,  Up: Builtin Sphinx extensions

13.4.11 `sphinx.ext.todo' - Support for todo items
--------------------------------------------------

_Module author: Daniel Bültmann_

  New in version 0.5.

  There are two additional directives when using this extension:

 -- Restructuredtext Directive: .. todo::
     Use this directive like, for example, *note note: 9f.

     It will only show up in the output if *note todo_include_todos:
     2df. is true.

 -- Restructuredtext Directive: .. todolist::
     This directive is replaced by a list of all todo directives in the
     whole documentation, if *note todo_include_todos: 2df. is true.

  There is also an additional config value:

 -- Configuration Value: todo_include_todos
     If this is `True', *note todo: 2de. and *note todolist: 2e0.
     produce output, else they produce nothing.  The default is `False'.


File: sphinx.info,  Node: sphinx ext extlinks -- Markup to shorten external links,  Next: sphinx ext viewcode -- Add links to highlighted source code,  Prev: sphinx ext todo -- Support for todo items,  Up: Builtin Sphinx extensions

13.4.12 `sphinx.ext.extlinks' - Markup to shorten external links
----------------------------------------------------------------

_Module author: Georg Brandl_

  New in version 1.0.

  This extension is meant to help with the common pattern of having
many external links that point to URLs on one and the same site, e.g.
links to bug trackers, version control web interfaces, or simply
subpages in other websites.  It does so by providing aliases to base
URLs, so that you only need to give the subpage name when creating a
link.

  Let's assume that you want to include many links to issues at the
Sphinx tracker, at
`http://bitbucket.org/birkenfeld/sphinx/issue/_num_'.  Typing this URL
again and again is tedious, so you can use *note extlinks: 15.  to
avoid repeating yourself.

  The extension adds one new config value:

 -- Configuration Value: extlinks
     This config value must be a dictionary of external sites, mapping
     unique short alias names to a base URL and a _prefix_.  For
     example, to create an alias for the above mentioned issues, you
     would add

         extlinks = {'issue': ('https://bitbucket.org/birkenfeld/sphinx/issue/%s',
                               'issue ')}

     Now, you can use the alias name as a new role, e.g.
     `:issue:`123`'.  This then inserts a link to
     <https://bitbucket.org/birkenfeld/sphinx/issue/123>.  As you can
     see, the target given in the role is substituted in the base URL
     in the place of `%s'.

     The link _caption_ depends on the second item in the tuple, the
     _prefix_:

        - If the prefix is `None', the link caption is the full URL.

        - If the prefix is the empty string, the link caption is the
          partial URL given in the role content (`123' in this case.)

        - If the prefix is a non-empty string, the link caption is the
          partial URL, prepended by the prefix - in the above example,
          the link caption would be `issue 123'.

     You can also use the usual "explicit title" syntax supported by
     other roles that generate links, i.e. `:issue:`this issue <123>`'.
     In this case, the _prefix_ is not relevant.

     Note: Since links are generated from the role in the reading
     stage, they appear as ordinary links to e.g. the `linkcheck'
     builder.


File: sphinx.info,  Node: sphinx ext viewcode -- Add links to highlighted source code,  Next: sphinx ext linkcode -- Add external links to source code,  Prev: sphinx ext extlinks -- Markup to shorten external links,  Up: Builtin Sphinx extensions

13.4.13 `sphinx.ext.viewcode' - Add links to highlighted source code
--------------------------------------------------------------------

_Module author: Georg Brandl_

  New in version 1.0.

  This extension looks at your Python object descriptions (`.. class::',
`.. function::' etc.) and tries to find the source files where the
objects are contained.  When found, a separate HTML page will be output
for each module with a highlighted version of the source code, and a
link will be added to all object descriptions that leads to the source
code of the described object.  A link back from the source to the
description will also be inserted.

  There are currently no configuration values for this extension; you
just need to add `'sphinx.ext.viewcode'' to your *note extensions: 45.
value for it to work.


File: sphinx.info,  Node: sphinx ext linkcode -- Add external links to source code,  Next: sphinx ext oldcmarkup -- Compatibility extension for old C markup,  Prev: sphinx ext viewcode -- Add links to highlighted source code,  Up: Builtin Sphinx extensions

13.4.14 `sphinx.ext.linkcode' - Add external links to source code
-----------------------------------------------------------------

_Module author: Pauli Virtanen_

  New in version 1.2.

  This extension looks at your object descriptions (`.. class::', `..
function::' etc.) and adds external links to code hosted somewhere on
the web. The intent is similar to the `sphinx.ext.viewcode' extension,
but assumes the source code can be found somewhere on the Internet.

  In your configuration, you need to specify a *note linkcode_resolve:
2e8.  function that returns an URL based on the object.

 -- Configuration Value: linkcode_resolve
     This is a function `linkcode_resolve(domain, info)', which should
     return the URL to source code corresponding to the object in given
     domain with given information.

     The function should return `None' if no link is to be added.

     The argument `domain' specifies the language domain the object is
     in. `info' is a dictionary with the following keys guaranteed to
     be present (dependent on the domain):

        - `py': `module' (name of the module), `fullname' (name of the
          object)

        - `c': `names' (list of names for the object)

        - `cpp': `names' (list of names for the object)

        - `javascript': `object' (name of the object), `fullname' (name
          of the item)

     Example:

         def linkcode_resolve(domain, info):
             if domain != 'py':
                 return None
             if not info['module']:
                 return None
             filename = info['module'].replace('.', '/')
             return "http://somesite/sourcerepo/%s.py" % filename




File: sphinx.info,  Node: sphinx ext oldcmarkup -- Compatibility extension for old C markup,  Prev: sphinx ext linkcode -- Add external links to source code,  Up: Builtin Sphinx extensions

13.4.15 `sphinx.ext.oldcmarkup' - Compatibility extension for old C markup
--------------------------------------------------------------------------

_Module author: Georg Brandl_

  New in version 1.0.

  This extension is a transition helper for projects that used the old
(pre-domain) C markup, i.e. the directives like `cfunction' and roles
like `cfunc'.  Since the introduction of domains, they must be called
by their fully-qualified name (`c:function' and `c:func', respectively)
or, with the default domain set to `c', by their new name (`function'
and `func').  (See *note The C Domain: 110. for the details.)

  If you activate this extension, it will register the old names, and
you can use them like before Sphinx 1.0.  The directives are:

   - `cfunction'

   - `cmember'

   - `cmacro'

   - `ctype'

   - `cvar'

  The roles are:

   - `cdata'

   - `cfunc'

   - `cmacro'

   - `ctype'

  However, it is advised to migrate to the new markup - this extension
is a compatibility convenience and will disappear in a future version
of Sphinx.


File: sphinx.info,  Node: Third-party extensions,  Prev: Builtin Sphinx extensions,  Up: Sphinx Extensions

13.5 Third-party extensions
===========================

You can find several extensions contributed by users in the Sphinx
Contrib(1) repository.  It is open for anyone who wants to maintain an
extension publicly; just send a short message asking for write
permissions.

  There are also several extensions hosted elsewhere.  The Wiki at
BitBucket(2) maintains a list of those.

  If you write an extension that you think others will find useful or
you think should be included as a part of Sphinx, please write to the
project mailing list (join here(3)).

* Menu:

* Where to put your own extensions?::

  ---------- Footnotes ----------

  (1) https://www.bitbucket.org/birkenfeld/sphinx-contrib

  (2) https://www.bitbucket.org/birkenfeld/sphinx/wiki/Home

  (3) http://groups.google.com/group/sphinx-dev


File: sphinx.info,  Node: Where to put your own extensions?,  Up: Third-party extensions

13.5.1 Where to put your own extensions?
----------------------------------------

Extensions local to a project should be put within the project's
directory structure.  Set Python's module search path, `sys.path',
accordingly so that Sphinx can find them.  E.g., if your extension
`foo.py' lies in the `exts' subdirectory of the project root, put into
`conf.py':

    import sys, os

    sys.path.append(os.path.abspath('exts'))

    extensions = ['foo']

You can also install extensions anywhere else on `sys.path', e.g. in the
`site-packages' directory.


File: sphinx.info,  Node: Sphinx Web Support,  Next: Sphinx FAQ,  Prev: Sphinx Extensions,  Up: Top

14 Sphinx Web Support
*********************

New in version 1.1.

  Sphinx provides a Python API to easily integrate Sphinx documentation
into your web application.  To learn more read the *note Web Support
Quick Start: 2f1.

* Menu:

* Web Support Quick Start::
* The WebSupport Class::
* Search Adapters::
* Storage Backends::

Web Support Quick Start

* Building Documentation Data::
* Integrating Sphinx Documents Into Your Webapp::
* Performing Searches::
* Comments & Proposals::
* Comment Moderation::

Integrating Sphinx Documents Into Your Webapp

* Authentication::

The WebSupport Class

* Methods::

Search Adapters

* BaseSearch Methods::

Storage Backends

* StorageBackend Methods::


File: sphinx.info,  Node: Web Support Quick Start,  Next: The WebSupport Class,  Up: Sphinx Web Support

14.1 Web Support Quick Start
============================

* Menu:

* Building Documentation Data::
* Integrating Sphinx Documents Into Your Webapp::
* Performing Searches::
* Comments & Proposals::
* Comment Moderation::


File: sphinx.info,  Node: Building Documentation Data,  Next: Integrating Sphinx Documents Into Your Webapp,  Up: Web Support Quick Start

14.1.1 Building Documentation Data
----------------------------------

To make use of the web support package in your application you'll need
to build the data it uses.  This data includes pickle files
representing documents, search indices, and node data that is used to
track where comments and other things are in a document.  To do this
you will need to create an instance of the *note WebSupport: 2f5. class
and call its *note build(): 2f6. method:

    from sphinx.websupport import WebSupport

    support = WebSupport(srcdir='/path/to/rst/sources/',
                         builddir='/path/to/build/outdir',
                         search='xapian')

    support.build()

This will read reStructuredText sources from `srcdir' and place the
necessary data in `builddir'.  The `builddir' will contain two
sub-directories: one named "data" that contains all the data needed to
display documents, search through documents, and add comments to
documents.  The other directory will be called "static" and contains
static files that should be served from "/static".

     Note: If you wish to serve static files from a path other than
     "/static", you can do so by providing the _staticdir_ keyword
     argument when creating the *note WebSupport: 2f5. object.


File: sphinx.info,  Node: Integrating Sphinx Documents Into Your Webapp,  Next: Performing Searches,  Prev: Building Documentation Data,  Up: Web Support Quick Start

14.1.2 Integrating Sphinx Documents Into Your Webapp
----------------------------------------------------

Now that the data is built, it's time to do something useful with it.
Start off by creating a *note WebSupport: 2f5. object for your
application:

    from sphinx.websupport import WebSupport

    support = WebSupport(datadir='/path/to/the/data',
                         search='xapian')

You'll only need one of these for each set of documentation you will be
working with.  You can then call it's *note get_document(): 2f8. method
to access individual documents:

    contents = support.get_document('contents')

This will return a dictionary containing the following items:

   * *body*: The main body of the document as HTML

   * *sidebar*: The sidebar of the document as HTML

   * *relbar*: A div containing links to related documents

   * *title*: The title of the document

   * *css*: Links to css files used by Sphinx

   * *js*: Javascript containing comment options

  This dict can then be used as context for templates.  The goal is to
be easy to integrate with your existing templating system.  An example
using Jinja2(1) is:

    {%- extends "layout.html" %}

    {%- block title %}
        {{ document.title }}
    {%- endblock %}

    {% block css %}
        {{ super() }}
        {{ document.css|safe }}
        <link rel="stylesheet" href="/static/websupport-custom.css" type="text/css">
    {% endblock %}

    {%- block js %}
        {{ super() }}
        {{ document.js|safe }}
    {%- endblock %}

    {%- block relbar %}
        {{ document.relbar|safe }}
    {%- endblock %}

    {%- block body %}
        {{ document.body|safe }}
    {%- endblock %}

    {%- block sidebar %}
        {{ document.sidebar|safe }}
    {%- endblock %}


* Menu:

* Authentication::

  ---------- Footnotes ----------

  (1) http://jinja.pocoo.org/


File: sphinx.info,  Node: Authentication,  Up: Integrating Sphinx Documents Into Your Webapp

14.1.2.1 Authentication
.......................

To use certain features such as voting, it must be possible to
authenticate users.  The details of the authentication are left to your
application.  Once a user has been authenticated you can pass the
user's details to certain *note WebSupport: 2f5. methods using the
_username_ and _moderator_ keyword arguments.  The web support package
will store the username with comments and votes.  The only caveat is
that if you allow users to change their username you must update the
websupport package's data:

    support.update_username(old_username, new_username)

_username_ should be a unique string which identifies a user, and
_moderator_ should be a boolean representing whether the user has
moderation privilieges.  The default value for _moderator_ is _False_.

  An example Flask(1) function that checks whether a user is logged in
and then retrieves a document is:

    from sphinx.websupport.errors import *

    @app.route('/<path:docname>')
    def doc(docname):
        username = g.user.name if g.user else ''
        moderator = g.user.moderator if g.user else False
        try:
            document = support.get_document(docname, username, moderator)
        except DocumentNotFoundError:
            abort(404)
        return render_template('doc.html', document=document)

The first thing to notice is that the _docname_ is just the request
path.  This makes accessing the correct document easy from a single
view.  If the user is authenticated, then the username and moderation
status are passed along with the docname to *note get_document(): 2f8.
The web support package will then add this data to the
`COMMENT_OPTIONS' that are used in the template.

     Note: This only works works if your documentation is served from
     your document root. If it is served from another directory, you
     will need to prefix the url route with that directory, and give
     the `docroot' keyword argument when creating the web support
     object:

         support = WebSupport(..., docroot='docs')

         @app.route('/docs/<path:docname>')



  ---------- Footnotes ----------

  (1) http://flask.pocoo.org/


File: sphinx.info,  Node: Performing Searches,  Next: Comments & Proposals,  Prev: Integrating Sphinx Documents Into Your Webapp,  Up: Web Support Quick Start

14.1.3 Performing Searches
--------------------------

To use the search form built-in to the Sphinx sidebar, create a
function to handle requests to the url 'search' relative to the
documentation root.  The user's search query will be in the GET
parameters, with the key `q'.  Then use the *note get_search_results():
2fb. method to retrieve search results. In Flask(1) that would be like
this:

    @app.route('/search')
    def search():
        q = request.args.get('q')
        document = support.get_search_results(q)
        return render_template('doc.html', document=document)

Note that we used the same template to render our search results as we
did to render our documents.  That's because *note
get_search_results(): 2fb.  returns a context dict in the same format
that *note get_document(): 2f8.  does.

  ---------- Footnotes ----------

  (1) http://flask.pocoo.org/


File: sphinx.info,  Node: Comments & Proposals,  Next: Comment Moderation,  Prev: Performing Searches,  Up: Web Support Quick Start

14.1.4 Comments & Proposals
---------------------------

Now that this is done it's time to define the functions that handle the
AJAX calls from the script.  You will need three functions.  The first
function is used to add a new comment, and will call the web support
method *note add_comment(): 2fd.:

    @app.route('/docs/add_comment', methods=['POST'])
    def add_comment():
        parent_id = request.form.get('parent', '')
        node_id = request.form.get('node', '')
        text = request.form.get('text', '')
        proposal = request.form.get('proposal', '')
        username = g.user.name if g.user is not None else 'Anonymous'
        comment = support.add_comment(text, node_id='node_id',
                                      parent_id='parent_id',
                                      username=username, proposal=proposal)
        return jsonify(comment=comment)

You'll notice that both a `parent_id' and `node_id' are sent with the
request. If the comment is being attached directly to a node,
`parent_id' will be empty. If the comment is a child of another
comment, then `node_id' will be empty. Then next function handles the
retrieval of comments for a specific node, and is aptly named *note
get_data(): 2fe.:

    @app.route('/docs/get_comments')
    def get_comments():
        username = g.user.name if g.user else None
        moderator = g.user.moderator if g.user else False
        node_id = request.args.get('node', '')
        data = support.get_data(node_id, username, moderator)
        return jsonify(**data)

The final function that is needed will call *note process_vote(): 2ff,
and will handle user votes on comments:

    @app.route('/docs/process_vote', methods=['POST'])
    def process_vote():
        if g.user is None:
            abort(401)
        comment_id = request.form.get('comment_id')
        value = request.form.get('value')
        if value is None or comment_id is None:
            abort(400)
        support.process_vote(comment_id, g.user.id, value)
        return "success"



File: sphinx.info,  Node: Comment Moderation,  Prev: Comments & Proposals,  Up: Web Support Quick Start

14.1.5 Comment Moderation
-------------------------

By default, all comments added through *note add_comment(): 2fd. are
automatically displayed.  If you wish to have some form of moderation,
you can pass the `displayed' keyword argument:

    comment = support.add_comment(text, node_id='node_id',
                                  parent_id='parent_id',
                                  username=username, proposal=proposal,
                                  displayed=False)

You can then create a new view to handle the moderation of comments.  It
will be called when a moderator decides a comment should be accepted and
displayed:

    @app.route('/docs/accept_comment', methods=['POST'])
    def accept_comment():
        moderator = g.user.moderator if g.user else False
        comment_id = request.form.get('id')
        support.accept_comment(comment_id, moderator=moderator)
        return 'OK'

Rejecting comments happens via comment deletion.

  To perform a custom action (such as emailing a moderator) when a new
comment is added but not displayed, you can pass callable to the *note
WebSupport: 2f5.  class when instantiating your support object:

    def moderation_callback(comment):
        """Do something..."""

    support = WebSupport(..., moderation_callback=moderation_callback)

The moderation callback must take one argument, which will be the same
comment dict that is returned by `add_comment()'.


File: sphinx.info,  Node: The WebSupport Class,  Next: Search Adapters,  Prev: Web Support Quick Start,  Up: Sphinx Web Support

14.2 The WebSupport Class
=========================

 -- Class: sphinx.websupport.WebSupport
     The main API class for the web support package.  All interactions
     with the web support package should occur through this class.

     The class takes the following keyword arguments:

    srcdir
          The directory containing reStructuredText source files.

    builddir
          The directory that build data and static files should be
          placed in.  This should be used when creating a *note
          WebSupport: 2f5. object that will be used to build data.

    datadir
          The directory that the web support data is in.  This should
          be used when creating a *note WebSupport: 2f5. object that
          will be used to retrieve data.

    search
          This may contain either a string (e.g. 'xapian') referencing
          a built-in search adapter to use, or an instance of a
          subclass of *note BaseSearch: 304.

    storage
          This may contain either a string representing a database uri,
          or an instance of a subclass of *note StorageBackend: 305.
          If this is not provided, a new sqlite database will be
          created.

    moderation_callback
          A callable to be called when a new comment is added that is
          not displayed.  It must accept one argument: a dictionary
          representing the comment that was added.

    staticdir
          If static files are served from a location besides
          `'/static'', this should be a string with the name of that
          location (e.g. `'/static_files'').

    docroot
          If the documentation is not served from the base path of a
          URL, this should be a string specifying that path (e.g.
          `'docs'').

* Menu:

* Methods::


File: sphinx.info,  Node: Methods,  Up: The WebSupport Class

14.2.1 Methods
--------------

 -- Method: WebSupport.build ()
     Build the documentation. Places the data into the `outdir'
     directory. Use it like this:

         support = WebSupport(srcdir, builddir, search='xapian')
         support.build()

     This will read reStructured text files from `srcdir'. Then it will
     build the pickles and search index, placing them into `builddir'.
     It will also save node data to the database.

 -- Method: WebSupport.get_document (docname, username='',
          moderator=False)
     Load and return a document from a pickle. The document will be a
     dict object which can be used to render a template:

         support = WebSupport(datadir=datadir)
         support.get_document('index', username, moderator)

     In most cases `docname' will be taken from the request path and
     passed directly to this function. In Flask, that would be something
     like this:

         @app.route('/<path:docname>')
         def index(docname):
             username = g.user.name if g.user else ''
             moderator = g.user.moderator if g.user else False
             try:
                 document = support.get_document(docname, username,
                                                 moderator)
             except DocumentNotFoundError:
                 abort(404)
             render_template('doc.html', document=document)

     The document dict that is returned contains the following items to
     be used during template rendering.

        * *body*: The main body of the document as HTML

        * *sidebar*: The sidebar of the document as HTML

        * *relbar*: A div containing links to related documents

        * *title*: The title of the document

        * *css*: Links to css files used by Sphinx

        * *script*: Javascript containing comment options

     This raises `DocumentNotFoundError' if a document matching
     `docname' is not found.

          Parameters: *docname* - the name of the document to load.

 -- Method: WebSupport.get_data (node_id, username=None,
          moderator=False)
     Get the comments and source associated with `node_id'. If
     `username' is given vote information will be included with the
     returned comments. The default CommentBackend returns a dict with
     two keys, _source_, and _comments_. _source_ is raw source of the
     node and is used as the starting point for proposals a user can
     add. _comments_ is a list of dicts that represent a comment, each
     having the following items:

     Key               Contents
     ------------------------------------------------------------------------------ 
     text              The comment text.
     username          The username that was stored with the comment.
     id                The comment's unique identifier.
     rating            The comment's current rating.
     age               The time in seconds since the comment was added.
     time              A dict containing time information. It contains the
                       following keys: year, month, day, hour, minute, second,
                       iso, and delta. `iso' is the time formatted in ISO 8601
                       format. `delta' is a printable form of how old the comment
                       is (e.g. "3 hours ago").
     vote              If `user_id' was given, this will be an integer
                       representing the vote. 1 for an upvote, -1 for a downvote,
                       or 0 if unvoted.
     node              The id of the node that the comment is attached to.  If
                       the comment's parent is another comment rather than a
                       node, this will be null.
     parent            The id of the comment that this comment is attached to if
                       it is not attached to a node.
     children          A list of all children, in this format.
     proposal_diff     An HTML representation of the differences between the the
                       current source and the user's proposed source.

          Parameters:

             * *node_id* - the id of the node to get comments for.

             * *username* - the username of the user viewing the
               comments.

             * *moderator* - whether the user is a moderator.

 -- Method: WebSupport.add_comment (text, node_id='', parent_id='',
          displayed=True, username=None, time=None, proposal=None,
          moderator=False)
     Add a comment to a node or another comment. Returns the comment in
     the same format as `get_comments()'. If the comment is being
     attached to a node, pass in the node's id (as a string) with the
     node keyword argument:

         comment = support.add_comment(text, node_id=node_id)

     If the comment is the child of another comment, provide the
     parent's id (as a string) with the parent keyword argument:

         comment = support.add_comment(text, parent_id=parent_id)

     If you would like to store a username with the comment, pass in
     the optional `username' keyword argument:

         comment = support.add_comment(text, node=node_id,
                                       username=username)


          Parameters:

             * *parent_id* - the prefixed id of the comment's parent.

             * *text* - the text of the comment.

             * *displayed* - for moderation purposes

             * *username* - the username of the user making the comment.

             * *time* - the time the comment was created, defaults to
               now.

 -- Method: WebSupport.process_vote (comment_id, username, value)
     Process a user's vote. The web support package relies on the API
     user to perform authentication. The API user will typically
     receive a comment_id and value from a form, and then make sure the
     user is authenticated. A unique username  must be passed in, which
     will also be used to retrieve the user's past voting data. An
     example, once again in Flask:

         @app.route('/docs/process_vote', methods=['POST'])
         def process_vote():
             if g.user is None:
                 abort(401)
             comment_id = request.form.get('comment_id')
             value = request.form.get('value')
             if value is None or comment_id is None:
                 abort(400)
             support.process_vote(comment_id, g.user.name, value)
             return "success"


          Parameters:

             * *comment_id* - the comment being voted on

             * *username* - the unique username of the user voting

             * *value* - 1 for an upvote, -1 for a downvote, 0 for an
               unvote.

 -- Method: WebSupport.get_search_results (q)
     Perform a search for the query `q', and create a set of search
     results. Then render the search results as html and return a
     context dict like the one created by *note get_document(): 2f8.:

         document = support.get_search_results(q)


          Parameters: *q* - the search query


File: sphinx.info,  Node: Search Adapters,  Next: Storage Backends,  Prev: The WebSupport Class,  Up: Sphinx Web Support

14.3 Search Adapters
====================

To create a custom search adapter you will need to subclass the *note
BaseSearch: 304. class.  Then create an instance of the new class and
pass that as the `search' keyword argument when you create the *note
WebSupport: 2f5.  object:

    support = WebSupport(srcdir=srcdir,
                         builddir=builddir,
                         search=MySearch())

For more information about creating a custom search adapter, please see
the documentation of the *note BaseSearch: 304. class below.

 -- Class: sphinx.websupport.search.BaseSearch
     Defines an interface for search adapters.

* Menu:

* BaseSearch Methods::


File: sphinx.info,  Node: BaseSearch Methods,  Up: Search Adapters

14.3.1 BaseSearch Methods
-------------------------

     The following methods are defined in the BaseSearch class. Some
     methods do not need to be overridden, but some (*note
     add_document(): 30b. and *note handle_query(): 30c.) must be
     overridden in your subclass. For a working example, look at the
     built-in adapter for whoosh.

 -- Method: BaseSearch.init_indexing (changed=[])
     Called by the builder to initialize the search indexer. `changed'
     is a list of pagenames that will be reindexed. You may want to
     remove these from the search index before indexing begins.

          Parameters: *changed* - a list of pagenames that will be
          re-indexed

 -- Method: BaseSearch.finish_indexing ()
     Called by the builder when writing has been completed. Use this to
     perform any finalization or cleanup actions after indexing is
     complete.

 -- Method: BaseSearch.feed (pagename, title, doctree)
     Called by the builder to add a doctree to the index. Converts the
     `doctree' to text and passes it to *note add_document(): 30b. You
     probably won't want to override this unless you need access to the
     `doctree'.  Override *note add_document(): 30b. instead.

          Parameters:

             * *pagename* - the name of the page to be indexed

             * *title* - the title of the page to be indexed

             * *doctree* - is the docutils doctree representation of
               the page

 -- Method: BaseSearch.add_document (pagename, title, text)
     Called by *note feed(): 30f. to add a document to the search index.
     This method should should do everything necessary to add a single
     document to the search index.

     `pagename' is name of the page being indexed. It is the combination
     of the source files relative path and filename, minus the
     extension. For example, if the source file is "ext/builders.rst",
     the `pagename' would be "ext/builders". This will need to be
     returned with search results when processing a query.

          Parameters:

             * *pagename* - the name of the page being indexed

             * *title* - the page's title

             * *text* - the full text of the page

 -- Method: BaseSearch.query (q)
     Called by the web support api to get search results. This method
     compiles the regular expression to be used when *note extracting
     context: 311, then calls *note handle_query(): 30c.  You won't
     want to override this unless you don't want to use the included
     *note extract_context(): 311. method.  Override *note
     handle_query(): 30c. instead.

          Parameters: *q* - the search query string.

 -- Method: BaseSearch.handle_query (q)
     Called by *note query(): 310. to retrieve search results for a
     search query `q'. This should return an iterable containing tuples
     of the following format:

         (<path>, <title>, <context>)

     `path' and `title' are the same values that were passed to *note
     add_document(): 30b, and `context' should be a short text snippet
     of the text surrounding the search query in the document.

     The *note extract_context(): 311. method is provided as a simple
     way to create the `context'.

          Parameters: *q* - the search query

 -- Method: BaseSearch.extract_context (text, length=240)
     Extract the context for the search query from the document's full
     `text'.

          Parameters:

             * *text* - the full text of the document to create the
               context for

             * *length* - the length of the context snippet to return.


File: sphinx.info,  Node: Storage Backends,  Prev: Search Adapters,  Up: Sphinx Web Support

14.4 Storage Backends
=====================

To create a custom storage backend you will need to subclass the *note
StorageBackend: 305. class.  Then create an instance of the new class
and pass that as the `storage' keyword argument when you create the
*note WebSupport: 2f5. object:

    support = WebSupport(srcdir=srcdir,
                         builddir=builddir,
                         storage=MyStorage())

For more information about creating a custom storage backend, please
see the documentation of the *note StorageBackend: 305. class below.

 -- Class: sphinx.websupport.storage.StorageBackend
     Defines an interface for storage backends.

* Menu:

* StorageBackend Methods::


File: sphinx.info,  Node: StorageBackend Methods,  Up: Storage Backends

14.4.1 StorageBackend Methods
-----------------------------

 -- Method: StorageBackend.pre_build ()
     Called immediately before the build process begins. Use this to
     prepare the StorageBackend for the addition of nodes.

 -- Method: StorageBackend.add_node (id, document, source)
     Add a node to the StorageBackend.

          Parameters:

             * *id* - a unique id for the comment.

             * *document* - the name of the document the node belongs
               to.

             * *source* - the source files name.

 -- Method: StorageBackend.post_build ()
     Called after a build has completed. Use this to finalize the
     addition of nodes if needed.

 -- Method: StorageBackend.add_comment (text, displayed, username,
          time, proposal, node_id, parent_id, moderator)
     Called when a comment is being added.

          Parameters:

             * *text* - the text of the comment

             * *displayed* - whether the comment should be displayed

             * *username* - the name of the user adding the comment

             * *time* - a date object with the time the comment was
               added

             * *proposal* - the text of the proposal the user made

             * *node_id* - the id of the node that the comment is being
               added to

             * *parent_id* - the id of the comment's parent comment.

             * *moderator* - whether the user adding the comment is a
               moderator

 -- Method: StorageBackend.delete_comment (comment_id, username,
          moderator)
     Delete a comment.

     Raises `UserNotAuthorizedError' if moderator is False and
     `username' doesn't match the username on the comment.

          Parameters:

             * *comment_id* - The id of the comment being deleted.

             * *username* - The username of the user requesting the
               deletion.

             * *moderator* - Whether the user is a moderator.

 -- Method: StorageBackend.get_data (node_id, username, moderator)
     Called to retrieve all data for a node. This should return a dict
     with two keys, _source_ and _comments_ as described by *note
     WebSupport: 2f5.'s *note get_data(): 2fe. method.

          Parameters:

             * *node_id* - The id of the node to get data for.

             * *username* - The name of the user requesting the data.

             * *moderator* - Whether the requestor is a moderator.

 -- Method: StorageBackend.process_vote (comment_id, username, value)
     Process a vote that is being cast. `value' will be either -1, 0,
     or 1.

          Parameters:

             * *comment_id* - The id of the comment being voted on.

             * *username* - The username of the user casting the vote.

             * *value* - The value of the vote being cast.

 -- Method: StorageBackend.update_username (old_username, new_username)
     If a user is allowed to change their username this method should
     be called so that there is not stagnate data in the storage system.

          Parameters:

             * *old_username* - The username being changed.

             * *new_username* - What the username is being changed to.

 -- Method: StorageBackend.accept_comment (comment_id)
     Called when a moderator accepts a comment. After the method is
     called the comment should be displayed to all users.

          Parameters: *comment_id* - The id of the comment being
          accepted.


File: sphinx.info,  Node: Sphinx FAQ,  Next: Glossary<2>,  Prev: Sphinx Web Support,  Up: Top

15 Sphinx FAQ
*************

This is a list of Frequently Asked Questions about Sphinx.  Feel free to
suggest new entries!

* Menu:

* How do I...: How do I.
* Using Sphinx with...: Using Sphinx with.
* Epub info::
* Texinfo info::


File: sphinx.info,  Node: How do I,  Next: Using Sphinx with,  Up: Sphinx FAQ

15.1 How do I...
================

... create PDF files without LaTeX?
     You can use rst2pdf(1) version 0.12 or greater which comes with
     built-in Sphinx integration.  See the *note Available builders: 4a.
     section for details.

... get section numbers?
     They are automatic in LaTeX output; for HTML, give a `:numbered:'
     option to the *note toctree: 93. directive where you want to start
     numbering.

... customize the look of the built HTML files?
     Use themes, see *note HTML theming support: 188.

... add global substitutions or includes?
     Add them in the *note rst_epilog: 176. config value.

... display the whole TOC tree in the sidebar?
     Use the *note toctree: 215. callable in a custom layout template,
     probably in the `sidebartoc' block.

... write my own extension?
     See the *note extension tutorial: 219.

... convert from my existing docs using MoinMoin markup?
     The easiest way is to convert to xhtml, then convert xhtml to
     reST(2).  You'll still need to mark up classes and such, but the
     headings and code examples come through cleanly.

... create HTML slides from Sphinx documents?
     See the "Hieroglyph" package at
     <http://github.com/nyergler/hieroglyph>.

  For many more extensions and other contributed stuff, see the
sphinx-contrib(3) repository.

  ---------- Footnotes ----------

  (1) http://rst2pdf.googlecode.com

  (2) http://docutils.sourceforge.net/sandbox/xhtml2rest/xhtml2rest.py

  (3) https://bitbucket.org/birkenfeld/sphinx-contrib/


File: sphinx.info,  Node: Using Sphinx with,  Next: Epub info,  Prev: How do I,  Up: Sphinx FAQ

15.2 Using Sphinx with...
=========================

Read the Docs
     <http://readthedocs.org> is a documentation hosting service based
     around Sphinx.  They will host sphinx documentation, along with
     supporting a number of other features including version support,
     PDF generation, and more. The Getting Started(1) guide is a good
     place to start.

Epydoc
     There's a third-party extension providing an api role(2) which
     refers to Epydoc's API docs for a given identifier.

Doxygen
     Michael Jones is developing a reST/Sphinx bridge to doxygen called
     breathe(3).

SCons
     Glenn Hutchings has written a SCons build script to build Sphinx
     documentation; it is hosted here:
     <https://bitbucket.org/zondo/sphinx-scons>

PyPI
     Jannis Leidel wrote a setuptools command(4) that automatically
     uploads Sphinx documentation to the PyPI package documentation
     area at <http://packages.python.org/>.

GitHub Pages
     Directories starting with underscores are ignored by default which
     breaks static files in Sphinx.  GitHub's preprocessor can be
     disabled(5) to support Sphinx HTML output properly.

MediaWiki
     See <https://bitbucket.org/kevindunn/sphinx-wiki>, a project by
     Kevin Dunn.

Google Analytics
     You can use a custom `layout.html' template, like this:

         {% extends "!layout.html" %}

         {%- block extrahead %}
         {{ super() }}
         <script type="text/javascript">
           var _gaq = _gaq || [];
           _gaq.push(['_setAccount', 'XXX account number XXX']);
           _gaq.push(['_trackPageview']);
         </script>
         {% endblock %}

         {% block footer %}
         {{ super() }}
         <div class="footer">This page uses <a href="http://analytics.google.com/">
         Google Analytics</a> to collect statistics. You can disable it by blocking
         the JavaScript coming from www.google-analytics.com.
         <script type="text/javascript">
           (function() {
             var ga = document.createElement('script');
             ga.src = ('https:' == document.location.protocol ?
                       'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
             ga.setAttribute('async', 'true');
             document.documentElement.firstChild.appendChild(ga);
           })();
         </script>
         </div>
         {% endblock %}



  ---------- Footnotes ----------

  (1)
http://read-the-docs.readthedocs.org/en/latest/getting_started.html

  (2) http://git.savannah.gnu.org/cgit/kenozooid.git/tree/doc/extapi.py

  (3) http://github.com/michaeljones/breathe/tree/master

  (4) http://pypi.python.org/pypi/Sphinx-PyPI-upload

  (5) https://github.com/blog/572-bypassing-jekyll-on-github-pages


File: sphinx.info,  Node: Epub info,  Next: Texinfo info,  Prev: Using Sphinx with,  Up: Sphinx FAQ

15.3 Epub info
==============

The epub builder is currently in an experimental stage.  It has only
been tested with the Sphinx documentation itself.  If you want to
create epubs, here are some notes:

   * Split the text into several files. The longer the individual HTML
     files are, the longer it takes the ebook reader to render them.
     In extreme cases, the rendering can take up to one minute.

   * Try to minimize the markup.  This also pays in rendering time.

   * For some readers you can use embedded or external fonts using the
     CSS `@font-face' directive.  This is _extremely_ useful for code
     listings which are often cut at the right margin.  The default
     Courier font (or variant) is quite wide and you can only display
     up to 60 characters on a line.  If you replace it with a narrower
     font, you can get more characters on a line.  You may even use
     FontForge(1) and create narrow variants of some free font.  In my
     case I get up to 70 characters on a line.

     You may have to experiment a little until you get reasonable
     results.

   * Test the created epubs. You can use several alternatives.  The
     ones I am aware of are Epubcheck(2), Calibre(3), FBreader(4)
     (although it does not render the CSS), and Bookworm(5).  For
     bookworm you can download the source from
     <http://code.google.com/p/threepress/> and run your own local
     server.

   * Large floating divs are not displayed properly.  If they cover
     more than one page, the div is only shown on the first page.  In
     that case you can copy the `epub.css' from the
     `sphinx/themes/epub/static/' directory to your local `_static/'
     directory and remove the float settings.

   * Files that are inserted outside of the `toctree' directive must be
     manually included. This sometimes applies to appendixes, e.g. the
     glossary or the indices.  You can add them with the *note
     epub_post_files: 1b9. option.

  ---------- Footnotes ----------

  (1) http://fontforge.sourceforge.net/

  (2) http://code.google.com/p/epubcheck/

  (3) http://calibre-ebook.com/

  (4) http://www.fbreader.org/

  (5) http://bookworm.oreilly.com/


File: sphinx.info,  Node: Texinfo info,  Prev: Epub info,  Up: Sphinx FAQ

15.4 Texinfo info
=================

The Texinfo builder is currently in an experimental stage but has
successfully been used to build the documentation for both Sphinx and
Python.  The intended use of this builder is to generate Texinfo that
is then processed into Info files.

  There are two main programs for reading Info files, `info' and GNU
Emacs.  The `info' program has less features but is available in most
Unix environments and can be quickly accessed from the terminal.  Emacs
provides better font and color display and supports extensive
customization (of course).

* Menu:

* Displaying Links::
* Notes::


File: sphinx.info,  Node: Displaying Links,  Next: Notes,  Up: Texinfo info

15.4.1 Displaying Links
-----------------------

One noticeable problem you may encounter with the generated Info files
is how references are displayed.  If you read the source of an Info
file, a reference to this section would look like:

    * note Displaying Links: target-id

In the stand-alone reader, `info', references are displayed just as they
appear in the source.  Emacs, on the other-hand, will by default replace
`\*note:' with `see' and hide the `target-id'.  For example:

     *note Displaying Links: 326.

  The exact behavior of how Emacs displays references is dependent on
the variable `Info-hide-note-references'.  If set to the value of
`hide', Emacs will hide both the `\*note:' part and the `target-id'.
This is generally the best way to view Sphinx-based documents since
they often make frequent use of links and do not take this limitation
into account.  However, changing this variable affects how all Info
documents are displayed and most due take this behavior into account.

  If you want Emacs to display Info files produced by Sphinx using the
value `hide' for `Info-hide-note-references' and the default value for
all other Info files, try adding the following Emacs Lisp code to your
start-up file, `~/.emacs.d/init.el'.

    (defadvice info-insert-file-contents (after
                                          sphinx-info-insert-file-contents
                                          activate)
      "Hack to make `Info-hide-note-references' buffer-local and
    automatically set to `hide' iff it can be determined that this file
    was created from a Texinfo file generated by Docutils or Sphinx."
      (set (make-local-variable 'Info-hide-note-references)
           (default-value 'Info-hide-note-references))
      (save-excursion
        (save-restriction
          (widen) (goto-char (point-min))
          (when (re-search-forward
                 "^Generated by \\(Sphinx\\|Docutils\\)"
                 (save-excursion (search-forward "\x1f" nil t)) t)
            (set (make-local-variable 'Info-hide-note-references)
                 'hide)))))



File: sphinx.info,  Node: Notes,  Prev: Displaying Links,  Up: Texinfo info

15.4.2 Notes
------------

The following notes may be helpful if you want to create Texinfo files:

   - Each section corresponds to a different `node' in the Info file.

   - Colons (`:') cannot be properly escaped in menu entries and xrefs.
     They will be replaced with semicolons (`;').

   - In the HTML and Tex output, the word `see' is automatically
     inserted before all xrefs.

   - Links to external Info files can be created using the somewhat
     official URI scheme `info'.  For example:

         info:Texinfo#makeinfo_options

     which produces:

          *note info;Texinfo#makeinfo_options: (Texinfo)makeinfo
          options.

   - Inline markup appears as follows in Info:

        * strong - *strong*

        * emphasis - _emphasis_

        * literal - `literal'

     It is possible to change this behavior using the Texinfo command
     `@definfoenclose'.  For example, to make inline markup more
     closely resemble reST, add the following to your `conf.py':

         texinfo_elements = {'preamble': """\
         @definfoenclose strong,**,**
         @definfoenclose emph,*,*
         @definfoenclose code,`@w{}`,`@w{}`
         """}




File: sphinx.info,  Node: Glossary<2>,  Next: Sphinx Developer's Guide,  Prev: Sphinx FAQ,  Up: Top

16 Glossary
***********

builder
     A class (inheriting from *note Builder: 22c.) that takes parsed
     documents and performs an action on them.  Normally, builders
     translate the documents to an output format, but it is also
     possible to use the builder builders that e.g. check for broken
     links in the documentation, or build coverage information.

     See *note Available builders: 4a. for an overview over Sphinx'
     built-in builders.  

configuration directory
     The directory containing `conf.py'.  By default, this is the same
     as the *note source directory: 2f, but can be set differently with
     the *-c* command-line option.  

directive
     A reStructuredText markup element that allows marking a block of
     content with special meaning.  Directives are supplied not only by
     docutils, but Sphinx and custom extensions can add their own.  The
     basic directive syntax looks like this:

         .. directivename:: argument ...
            :option: value

            Content of the directive.

     See *note Directives: 82. for more information.  

document name
     Since reST source files can have different extensions (some people
     like `.txt', some like `.rst' - the extension can be configured
     with *note source_suffix: 16f.) and different OSes have different
     path separators, Sphinx abstracts them: _document names_ are
     always relative to the *note source directory: 2f, the extension
     is stripped, and path separators are converted to slashes.  All
     values, parameters and such referring to "documents" expect such
     document names.

     Examples for document names are `index', `library/zipfile', or
     `reference/datamodel/types'.  Note that there is no leading or
     trailing slash.  

domain
     A domain is a collection of markup (reStructuredText *note
     directive: f0.s and *note role: f1.s) to describe and link to
     *note object: f2.s belonging together, e.g. elements of a
     programming language.  Directive and role names in a domain have
     names like `domain:name', e.g. `py:function'.

     Having domains means that there are no naming problems when one
     set of documentation wants to refer to e.g. C++ and Python
     classes.  It also means that extensions that support the
     documentation of whole new languages are much easier to write.
     For more information about domains, see the chapter *note Sphinx
     Domains: 41.  

environment
     A structure where information about all documents under the root
     is saved, and used for cross-referencing.  The environment is
     pickled after the parsing stage, so that successive runs only need
     to read and parse new and changed documents.  

master document
     The document that contains the root *note toctree: 93. directive.  

object
     The basic building block of Sphinx documentation.  Every "object
     directive" (e.g. `function' or *note object: 132.) creates such a
     block; and most objects can be cross-referenced to.  

role
     A reStructuredText markup element that allows marking a piece of
     text.  Like directives, roles are extensible.  The basic syntax
     looks like this: `:rolename:`content`'.  See *note Inline markup:
     76. for details.  

source directory
     The directory which, including its subdirectories, contains all
     source files for one Sphinx project.


File: sphinx.info,  Node: Sphinx Developer's Guide,  Next: Changes in Sphinx,  Prev: Glossary<2>,  Up: Top

17 Sphinx Developer's Guide
***************************

Abstract
--------

This document describes the development process of Sphinx, a
documentation system used by developers to document systems used by
other developers to develop other systems that may also be documented
using Sphinx.

  The Sphinx source code is managed using Mercurial(1) and is hosted on
BitBucket(2).

     hg clone <https://bitbucket.org/birkenfeld/sphinx>

Community
---------

sphinx-users <<sphinx-users@googlegroups.com>>
     Mailing list for user support.

sphinx-dev <<sphinx-dev@googlegroups.com>>
     Mailing list for development related discussions.

#pocoo on irc.freenode.net
     IRC channel for development questions and user support.

     This channel is shared with other Pocoo projects.  Archived logs
     are available here(3).

* Menu:

* Bug Reports and Feature Requests::
* Contributing to Sphinx::
* Coding Guide::

  ---------- Footnotes ----------

  (1) http://mercurial.selenic.com/

  (2) http://bitbucket.org

  (3) http://dev.pocoo.org/irclogs/


File: sphinx.info,  Node: Bug Reports and Feature Requests,  Next: Contributing to Sphinx,  Up: Sphinx Developer's Guide

17.1 Bug Reports and Feature Requests
=====================================

If you have encountered a problem with Sphinx or have an idea for a new
feature, please submit it to the issue tracker(1) on BitBucket or
discuss it on the sphinx-dev mailing list.

  For bug reports, please include the output produced during the build
process and also the log file Sphinx creates after it encounters an
un-handled exception.  The location of this file should be shown
towards the end of the error message.

  Including or providing a link to the source files involved may help
us fix the issue.  If possible, try to create a minimal project that
produces the error and post that instead.

  ---------- Footnotes ----------

  (1) http://bitbucket.org/birkenfeld/sphinx/issues


File: sphinx.info,  Node: Contributing to Sphinx,  Next: Coding Guide,  Prev: Bug Reports and Feature Requests,  Up: Sphinx Developer's Guide

17.2 Contributing to Sphinx
===========================

The recommended way for new contributors to submit code to Sphinx is to
fork the Mercurial repository on BitBucket and then submit a pull
request after committing the changes.  The pull request will then need
to be approved by one of the core developers before it is merged into
the main repository.

* Menu:

* Getting Started::
* Core Developers::


File: sphinx.info,  Node: Getting Started,  Next: Core Developers,  Up: Contributing to Sphinx

17.2.1 Getting Started
----------------------

These are the basic steps needed to start developing on Sphinx.

  1. Create an account on BitBucket.

  2. Fork the main Sphinx repository (birkenfeld/sphinx(1)) using the
     BitBucket interface.

  3. Clone the forked repository to your machine.

         hg clone https://bitbucket.org/USERNAME/sphinx-fork
         cd sphinx-fork


  4. Checkout the appropriate branch.

     For changes that should be included in the next minor release
     (namely bug fixes), use the `stable' branch.

         hg checkout stable

     For new features or other substantial changes that should wait
     until the next major release, use the `default' branch.

  5. Setup your Python environment.

         virtualenv ~/sphinxenv
         . ~/sphinxenv/bin/activate
         pip install -e .


  6. Hack, hack, hack.

     For tips on working with the code, see the *note Coding Guide: 334.

  7. Test, test, test.

     Run the unit tests:

         pip install nose
         make test

     Build the documentation and check the output for different
     builders:

         cd docs
         make clean html text man info latexpdf

     Run the unit tests under different Python environments using *tox*:

         pip install tox
         tox -v

     Add a new unit test in the `tests' directory if you can.

     For bug fixes, first add a test that fails without your changes
     and passes after they are applied.

  8. Commit your changes.

         hg commit -m 'Add useful new feature that does this.'

     BitBucket recognizes certain phrases(2) that can be used to
     automatically update the issue tracker.

     For example:

         hg commit -m 'Closes #42: Fix invalid markup in docstring of Foo.bar.'

     would close issue #42.

  9. Push changes to your forked repository on BitBucket.

         hg push


 10. Submit a pull request from your repository to `birkenfeld/sphinx'
     using the BitBucket interface.

 11. Wait for a core developer to review your changes.

  ---------- Footnotes ----------

  (1) https://bitbucket.org/birkenfeld/sphinx

  (2)
https://confluence.atlassian.com/display/BITBUCKET/Automatically+Resolving+Issues+when+Users+Push+Code


File: sphinx.info,  Node: Core Developers,  Prev: Getting Started,  Up: Contributing to Sphinx

17.2.2 Core Developers
----------------------

The core developers of Sphinx have write access to the main repository.
They can commit changes, accept/reject pull requests, and manage items
on the issue tracker.

  You do not need to be a core developer or have write access to be
involved in the development of Sphinx.  You can submit patches or
create pull requests from forked repositories and have a core developer
add the changes for you.

  The following are some general guidelines for core developers:

   * Questionable or extensive changes should be submitted as a pull
     request instead of being committed directly to the main
     repository.  The pull request should be reviewed by another core
     developer before it is merged.

   * Trivial changes can be committed directly but be sure to keep the
     repository in a good working state and that all tests pass before
     pushing your changes.

   * When committing code written by someone else, please attribute the
     original author in the commit message and any relevant `CHANGES'
     entry.

   * Using Mercurial named branches other than `default' and `stable'
     is not encouraged.


File: sphinx.info,  Node: Coding Guide,  Prev: Contributing to Sphinx,  Up: Sphinx Developer's Guide

17.3 Coding Guide
=================

   * Try to use the same code style as used in the rest of the project.
     See the Pocoo Styleguide(1) for more information.

   * For non-trivial changes, please update the `CHANGES' file.  If your
     changes alter existing behavior, please document this.

   * New features should be documented.  Include examples and use cases
     where appropriate.  If possible, include a sample that is
     displayed in the generated output.

   * When adding a new configuration variable, be sure to document it
     and update `sphinx/quickstart.py'.

   * Use the included *utils/check_sources.py* script to check for
     common formatting issues (trailing whitespace, lengthy lines, etc).

   * Add appropriate unit tests.

* Menu:

* Debugging Tips::

  ---------- Footnotes ----------

  (1) http://flask.pocoo.org/docs/styleguide/


File: sphinx.info,  Node: Debugging Tips,  Up: Coding Guide

17.3.1 Debugging Tips
---------------------

   * Delete the build cache before building documents if you make
     changes in the code by running the command `make clean' or using
     the *note sphinx-build -E: 4c. option.

   * Use the *note sphinx-build -P: 5d. option to run Pdb on exceptions.

   * Use `node.pformat()' and `node.asdom().toxml()' to generate a
     printable representation of the document structure.

   * Set the configuration variable *note keep_warnings: 177. to True
     so warnings will be displayed in the generated output.

   * Set the configuration variable *note nitpicky: 179. to True so
     that Sphinx will complain about references without a known target.

   * Set the debugging options in the Docutils configuration file(1).

  ---------- Footnotes ----------

  (1) http://docutils.sourceforge.net/docs/user/config.html


File: sphinx.info,  Node: Changes in Sphinx,  Next: Projects using Sphinx,  Prev: Sphinx Developer's Guide,  Up: Top

18 Changes in Sphinx
********************

* Menu:

* Release 1.2 (in development): Release 1 2 in development.
* Release 1.1.3 (Mar 10, 2012): Release 1 1 3 Mar 10 2012.
* Release 1.1.2 (Nov 1, 2011): Release 1 1 2 Nov 1 2011 -- 1 1 1 is a silly version number anyway!. 1.1.1 is a silly version number anyway!
* Release 1.1.1 (Nov 1, 2011): Release 1 1 1 Nov 1 2011.
* Release 1.1 (Oct 9, 2011): Release 1 1 Oct 9 2011.
* Release 1.0.8 (Sep 23, 2011): Release 1 0 8 Sep 23 2011.
* Release 1.0.7 (Jan 15, 2011): Release 1 0 7 Jan 15 2011.
* Release 1.0.6 (Jan 04, 2011): Release 1 0 6 Jan 04 2011.
* Release 1.0.5 (Nov 12, 2010): Release 1 0 5 Nov 12 2010.
* Release 1.0.4 (Sep 17, 2010): Release 1 0 4 Sep 17 2010.
* Release 1.0.3 (Aug 23, 2010): Release 1 0 3 Aug 23 2010.
* Release 1.0.2 (Aug 14, 2010): Release 1 0 2 Aug 14 2010.
* Release 1.0.1 (Jul 27, 2010): Release 1 0 1 Jul 27 2010.
* Release 1.0 (Jul 23, 2010): Release 1 0 Jul 23 2010.
* Release 0.6.7 (Jun 05, 2010): Release 0 6 7 Jun 05 2010.
* Release 0.6.6 (May 25, 2010): Release 0 6 6 May 25 2010.
* Release 0.6.5 (Mar 01, 2010): Release 0 6 5 Mar 01 2010.
* Release 0.6.4 (Jan 12, 2010): Release 0 6 4 Jan 12 2010.
* Release 0.6.3 (Sep 03, 2009): Release 0 6 3 Sep 03 2009.
* Release 0.6.2 (Jun 16, 2009): Release 0 6 2 Jun 16 2009.
* Release 0.6.1 (Mar 26, 2009): Release 0 6 1 Mar 26 2009.
* Release 0.6 (Mar 24, 2009): Release 0 6 Mar 24 2009.
* Release 0.5.2 (Mar 24, 2009): Release 0 5 2 Mar 24 2009.
* Release 0.5.1 (Dec 15, 2008): Release 0 5 1 Dec 15 2008.
* Release 0.5 (Nov 23, 2008): Release 0 5 Nov 23 2008 -- Birthday release!. Birthday release!
* Release 0.4.3 (Oct 8, 2008): Release 0 4 3 Oct 8 2008.
* Release 0.4.2 (Jul 29, 2008): Release 0 4 2 Jul 29 2008.
* Release 0.4.1 (Jul 5, 2008): Release 0 4 1 Jul 5 2008.
* Release 0.4 (Jun 23, 2008): Release 0 4 Jun 23 2008.
* Release 0.3 (May 6, 2008): Release 0 3 May 6 2008.
* Release 0.2 (Apr 27, 2008): Release 0 2 Apr 27 2008.
* Release 0.1.61950 (Mar 26, 2008): Release 0 1 61950 Mar 26 2008.
* Release 0.1.61945 (Mar 26, 2008): Release 0 1 61945 Mar 26 2008.
* Release 0.1.61843 (Mar 24, 2008): Release 0 1 61843 Mar 24 2008.
* Release 0.1.61798 (Mar 23, 2008): Release 0 1 61798 Mar 23 2008.
* Release 0.1.61611 (Mar 21, 2008): Release 0 1 61611 Mar 21 2008.


File: sphinx.info,  Node: Release 1 2 in development,  Next: Release 1 1 3 Mar 10 2012,  Up: Changes in Sphinx

18.1 Release 1.2 (in development)
=================================

   * #1062: sphinx.ext.autodoc use __init__ method signature for class
     signature.

   * PR#111: Respect add_autodoc_attrgetter() even when
     inherited-members is set.  Thanks to A. Jesse Jiryu Davis.

   * #1090: Fix gettext does not extract glossary terms.

   * #1070: Avoid un-pickling issues when running Python 3 and the saved
     environment was created under Python 2.

   * #1069: Fixed error caused when autodoc would try to format
     signatures of "partial" functions without keyword arguments (patch
     by Artur Gaspar).

   * The *note latex_documents: 154, *note texinfo_documents: 15a, and
     *note man_pages: 158. configuration values will be set to default
     values based on the *note master_doc: 98. if not explicitly set in
     `conf.py'.  Previously, if these values were not set, no output
     would be genereted by their respective builders.

   * The *note toctree: 93. directive and the `toctree()' template
     function now have an `includehidden' option that includes hidden
     toctree entries (bugs #790 and #1047). A bug in the `maxdepth'
     option for the `toctree()' template function has been fixed (bug
     #1046).

   * PR#99: Strip down seealso directives to normal admonitions.  This
     removes their unusual CSS classes (admonition-see-also),
     inconsistent LaTeX admonition title ("See Also" instead of "See
     also"), and spurious indentation in the text builder.

   * sphinx-build now has a verbose option `-v' which can be repeated
     for greater effect.  A single occurrance provides a slightly more
     verbose output than normal.  Two or more occurrences of this
     option provides more detailed output which may be useful for
     debugging.

   * sphinx-build now provides more specific error messages when called
     with invalid options or arguments.

   * sphinx-build now supports the standard `--help' and `--version'
     options.

   * #869: sphinx-build now has the option `-T' for printing the full
     traceback after an unhandled exception.

   * #976: Fix gettext does not extract index entries.

   * #940: Fix gettext does not extract figure caption.

   * #1067: Improve the ordering of the JavaScript search results:
     matches in titles come before matches in full text, and object
     results are better categorized.  Also implement a pluggable search
     scorer.

   * Fix text writer can not handle visit_legend for figure directive
     contents.

   * PR#72: #975: Fix gettext does not extract definition terms before
     docutils 0.10.0

   * PR#25: In inheritance diagrams, the first line of the class
     docstring is now the tooltip for the class.

   * PR#47: Added *note sphinx.ext.linkcode: 1b. extension.

   * PR#75: Added `--follow-links' option to sphinx-apidoc.

   * PR#45: The linkcheck builder now checks `#anchor's for existence.

   * PR#28: Added Hungarian translation.

   * PR#35: Added Slovak translation.

   * PR#54: Added Norwegian bokmaal translation.

   * PR#52: `special_members' flag to autodoc now behaves like
     `members'.

   * #955: Fix i18n transformation.

   * Handle duplicate domain indices in texinfo.

   * PR#74: Fix some Russian translation.

   * PR#97: Fix footnote handling in translated documents.

   * Update to jQuery 1.7.1 and Underscore.js 1.3.1.

   * #1055: Fix web support with relative path to source directory.

   * #1053: The "rightsidebar" and "collapsiblesidebar" HTML theme
     options now work together.

   * #1015: Stop overriding jQuery contains() in the JavaScript.

   * #1028: Fix line block output in the text builder.

   * #1018: Fix "container" directive handling in the text builder.

   * #1012: Update Estonian translation.

   * #1010: Make pngmath images transparent by default; IE7+ should
     handle it.

   * #440: Fix coarse timestamp resolution in some filesystem generate
     wrong outdated file-list.

   * #1008: Fix test failures with Python 3.3.

   * #1029: Fix intersphinx_mapping values are not stable if mapping
     have plural key/value set with Python 3.3.

   * #920: Rescue PIL packaging issue that allow import Image without
     PIL namespace. Thanks to Marc Schlaich.

   * #1024: Improve Makefile/make.bat error message if Sphinx is not
     found. Thanks to anatoly techtonik.

   * #1037: Fix typos in Polish translation. Thanks to Jakub Wilk.

   * #1038: Fix cpp domain parser fails to parse C+11 "static
     constexpr" declarations. Thanks to Jakub Wilk.

   * #1043: Fix sphinx-quickstart asks again and again Y|N because
     input() return value with extra 'r' on Python-3.2.0 + Windows.
     Thanks to Régis Décamps.

   * #1041: Fix cpp domain parser fails to parse a const type with a
     modifier.

   * #958: Do not preserve `environment.pickle' after a failed build.

   * PR#88: Added the "Sphinx Developer's Guide" (`doc/devguide.rst')
     which outlines the basic development process of the Sphinx project.

   * Added the Docutils-native XML and pseudo-XML builders.  See
     `XMLBuilder' and `PseudoXMLBuilder'.


File: sphinx.info,  Node: Release 1 1 3 Mar 10 2012,  Next: Release 1 1 2 Nov 1 2011 -- 1 1 1 is a silly version number anyway!,  Prev: Release 1 2 in development,  Up: Changes in Sphinx

18.2 Release 1.1.3 (Mar 10, 2012)
=================================

   * PR#40: Fix `safe_repr' function to decode bytestrings with
     non-ASCII characters correctly.

   * PR#37: Allow configuring sphinx-apidoc via `SPHINX_APIDOC_OPTIONS'.

   * PR#34: Restore Python 2.4 compatibility.

   * PR#36: Make the "bibliography to TOC" fix in LaTeX output specific
     to the document class.

   * #695: When the highlight language "python" is specified explicitly,
     do not try to parse the code to recognize non-Python snippets.

   * #859: Fix exception under certain circumstances when not finding
     appropriate objects to link to.

   * #860: Do not crash when encountering invalid doctest examples, just
     emit a warning.

   * #864: Fix crash with some settings of *note
     modindex_common_prefix: 17f.

   * #862: Fix handling of `-D' and `-A' options on Python 3.

   * #851: Recognize and warn about circular toctrees, instead of
     running into recursion errors.

   * #853: Restore compatibility with docutils trunk.

   * #852: Fix HtmlHelp index entry links again.

   * #854: Fix inheritance_diagram raising attribute errors on builtins.

   * #832: Fix crashes when putting comments or lone terms in a
     glossary.

   * #834, #818: Fix HTML help language/encoding mapping for all Sphinx
     supported languages.

   * #844: Fix crashes when dealing with Unicode output in doctest
     extension.

   * #831: Provide `--project' flag in setup_command as advertised.

   * #875: Fix reading config files under Python 3.

   * #876: Fix quickstart test under Python 3.

   * #870: Fix spurious KeyErrors when removing documents.

   * #892: Fix single-HTML builder misbehaving with the master document
     in a subdirectory.

   * #873: Fix assertion errors with empty `only' directives.

   * #816: Fix encoding issues in the Qt help builder.


File: sphinx.info,  Node: Release 1 1 2 Nov 1 2011 -- 1 1 1 is a silly version number anyway!,  Next: Release 1 1 1 Nov 1 2011,  Prev: Release 1 1 3 Mar 10 2012,  Up: Changes in Sphinx

18.3 Release 1.1.2 (Nov 1, 2011) - 1.1.1 is a silly version number anyway!
==========================================================================

   * #809: Include custom fixers in the source distribution.


File: sphinx.info,  Node: Release 1 1 1 Nov 1 2011,  Next: Release 1 1 Oct 9 2011,  Prev: Release 1 1 2 Nov 1 2011 -- 1 1 1 is a silly version number anyway!,  Up: Changes in Sphinx

18.4 Release 1.1.1 (Nov 1, 2011)
================================

   * #791: Fix QtHelp, DevHelp and HtmlHelp index entry links.

   * #792: Include "sphinx-apidoc" in the source distribution.

   * #797: Don't crash on a misformatted glossary.

   * #801: Make intersphinx work properly without SSL support.

   * #805: Make the `Sphinx.add_index_to_domain' method work correctly.

   * #780: Fix Python 2.5 compatibility.


File: sphinx.info,  Node: Release 1 1 Oct 9 2011,  Next: Release 1 0 8 Sep 23 2011,  Prev: Release 1 1 1 Nov 1 2011,  Up: Changes in Sphinx

18.5 Release 1.1 (Oct 9, 2011)
==============================

* Menu:

* Incompatible changes::
* Features added::


File: sphinx.info,  Node: Incompatible changes,  Next: Features added,  Up: Release 1 1 Oct 9 2011

18.5.1 Incompatible changes
---------------------------

   * The *note py;module: 9c. directive doesn't output its `platform'
     option value anymore.  (It was the only thing that the directive
     did output, and therefore quite inconsistent.)

   * Removed support for old dependency versions; requirements are now:

        - Pygments >= 1.2

        - Docutils >= 0.7

        - Jinja2   >= 2.3


File: sphinx.info,  Node: Features added,  Prev: Incompatible changes,  Up: Release 1 1 Oct 9 2011

18.5.2 Features added
---------------------

   * Added Python 3.x support.

   * New builders and subsystems:

        - Added a Texinfo builder.

        - Added i18n support for content, a `gettext' builder and
          related utilities.

        - Added the `websupport' library and builder.

        - #98: Added a `sphinx-apidoc' script that autogenerates a
          hierarchy of source files containing autodoc directives to
          document modules and packages.

        - #273: Add an API for adding full-text search support for
          languages other than English.  Add support for Japanese.

   * Markup:

        - #138: Added an *note index: da. role, to make inline index
          entries.

        - #454: Added more index markup capabilities: marking
          see/seealso entries, and main entries for a given key.

        - #460: Allowed limiting the depth of section numbers for HTML
          using the *note toctree: 93.'s `numbered' option.

        - #586: Implemented improved *note glossary: aa. markup which
          allows multiple terms per definition.

        - #478: Added *note py;decorator: 102. directive to describe
          decorators.

        - C++ domain now supports array definitions.

        - C++ domain now supports doc fields (`:param x:' inside
          directives).

        - Section headings in *note only: 4f. directives are now
          correctly handled.

        - Added `emphasize-lines' option to source code directives.

        - #678: C++ domain now supports superclasses.

   * HTML builder:

        - Added `pyramid' theme.

        - #559: *note html_add_permalinks: 193. is now a string giving
          the text to display in permalinks.

        - #259: HTML table rows now have even/odd CSS classes to enable
          "Zebra styling".

        - #554: Add theme option `sidebarwidth' to the basic theme.

   * Other builders:

        - #516: Added new value of the *note latex_show_urls: 1c6.
          option to show the URLs in footnotes.

        - #209: Added *note text_newlines: 1cd. and *note
          text_sectionchars: 1ce.  config values.

        - Added *note man_show_urls: 1d1. config value.

        - #472: linkcheck builder: Check links in parallel, use HTTP
          HEAD requests and allow configuring the timeout.  New config
          values: *note linkcheck_timeout: 1da. and *note
          linkcheck_workers: 1db.

        - #521: Added *note linkcheck_ignore: 1d9. config value.

        - #28: Support row/colspans in tables in the LaTeX builder.

   * Configuration and extensibility:

        - #537: Added *note nitpick_ignore: 17a.

        - #306: Added *note env-get-outdated: 247. event.

        - `Application.add_stylesheet()' now accepts full URIs.

   * Autodoc:

        - #564: Add *note autodoc_docstring_signature: 282.  When
          enabled (the default), autodoc retrieves the signature from
          the first line of the docstring, if it is found there.

        - #176: Provide `private-members' option for autodoc directives.

        - #520: Provide `special-members' option for autodoc directives.

        - #431: Doc comments for attributes can now be given on the
          same line as the assignment.

        - #437: autodoc now shows values of class data attributes.

        - autodoc now supports documenting the signatures of
          `functools.partial' objects.

   * Other extensions:

        - Added the *note sphinx.ext.mathjax: 1d. extension.

        - #443: Allow referencing external graphviz files.

        - Added `inline' option to graphviz directives, and fixed the
          default (block-style) in LaTeX output.

        - #590: Added `caption' option to graphviz directives.

        - #553: Added *note testcleanup: 2a0. blocks in the doctest
          extension.

        - #594: *note trim_doctest_flags: 181. now also removes
          `<BLANKLINE>' indicators.

        - #367: Added automatic exclusion of hidden members in
          inheritance diagrams, and an option to selectively enable it.

        - Added *note pngmath_add_tooltips: 2b8.

        - The math extension displaymath directives now support `name'
          in addition to `label' for giving the equation label, for
          compatibility with Docutils.

   * New locales:

        - #221: Added Swedish locale.

        - #526: Added Iranian locale.

        - #694: Added Latvian locale.

        - Added Nepali locale.

        - #714: Added Korean locale.

        - #766: Added Estonian locale.

   * Bugs fixed:

        - #778: Fix "hide search matches" link on pages linked by
          search.

        - Fix the source positions referenced by the "viewcode"
          extension.


File: sphinx.info,  Node: Release 1 0 8 Sep 23 2011,  Next: Release 1 0 7 Jan 15 2011,  Prev: Release 1 1 Oct 9 2011,  Up: Changes in Sphinx

18.6 Release 1.0.8 (Sep 23, 2011)
=================================

   * #627: Fix tracebacks for AttributeErrors in autosummary generation.

   * Fix the `abbr' role when the abbreviation has newlines in it.

   * #727: Fix the links to search results with custom object types.

   * #648: Fix line numbers reported in warnings about undefined
     references.

   * #696, #666: Fix C++ array definitions and template arguments that
     are not type names.

   * #633: Allow footnotes in section headers in LaTeX output.

   * #616: Allow keywords to be linked via intersphinx.

   * #613: Allow Unicode characters in production list token names.

   * #720: Add dummy visitors for graphviz nodes for text and man.

   * #704: Fix image file duplication bug.

   * #677: Fix parsing of multiple signatures in C++ domain.

   * #637: Ignore Emacs lock files when looking for source files.

   * #544: Allow .pyw extension for importable modules in autodoc.

   * #700: Use `$(MAKE)' in quickstart-generated Makefiles.

   * #734: Make sidebar search box width consistent in browsers.

   * #644: Fix spacing of centered figures in HTML output.

   * #767: Safely encode SphinxError messages when printing them to
     sys.stderr.

   * #611: Fix LaTeX output error with a document with no sections but
     a link target.

   * Correctly treat built-in method descriptors as methods in autodoc.

   * #706: Stop monkeypatching the Python textwrap module.

   * #657: viewcode now works correctly with source files that have
     non-ASCII encoding.

   * #669: Respect the `noindex' flag option in py:module directives.

   * #675: Fix IndexErrors when including nonexisting lines with *note
     literalinclude: b5.

   * #676: Respect custom function/method parameter separator strings.

   * #682: Fix JS incompatibility with jQuery >= 1.5.

   * #693: Fix double encoding done when writing HTMLHelp .hhk files.

   * #647: Do not apply SmartyPants in parsed-literal blocks.

   * C++ domain now supports array definitions.


File: sphinx.info,  Node: Release 1 0 7 Jan 15 2011,  Next: Release 1 0 6 Jan 04 2011,  Prev: Release 1 0 8 Sep 23 2011,  Up: Changes in Sphinx

18.7 Release 1.0.7 (Jan 15, 2011)
=================================

   * #347: Fix wrong generation of directives of static methods in
     autosummary.

   * #599: Import PIL as `from PIL import Image'.

   * #558: Fix longtables with captions in LaTeX output.

   * Make token references work as hyperlinks again in LaTeX output.

   * #572: Show warnings by default when reference labels cannot be
     found.

   * #536: Include line number when complaining about missing reference
     targets in nitpicky mode.

   * #590: Fix inline display of graphviz diagrams in LaTeX output.

   * #589: Build using app.build() in setup command.

   * Fix a bug in the inheritance diagram exception that caused base
     classes to be skipped if one of them is a builtin.

   * Fix general index links for C++ domain objects.

   * #332: Make admonition boundaries in LaTeX output visible.

   * #573: Fix KeyErrors occurring on rebuild after removing a file.

   * Fix a traceback when removing files with globbed toctrees.

   * If an autodoc object cannot be imported, always re-read the
     document containing the directive on next build.

   * If an autodoc object cannot be imported, show the full traceback
     of the import error.

   * Fix a bug where the removal of download files and images wasn't
     noticed.

   * #571: Implement `~' cross-reference prefix for the C domain.

   * Fix regression of LaTeX output with the fix of #556.

   * #568: Fix lookup of class attribute documentation on descriptors
     so that comment documentation now works.

   * Fix traceback with `only' directives preceded by targets.

   * Fix tracebacks occurring for duplicate C++ domain objects.

   * Fix JavaScript domain links to objects with `$' in their name.


File: sphinx.info,  Node: Release 1 0 6 Jan 04 2011,  Next: Release 1 0 5 Nov 12 2010,  Prev: Release 1 0 7 Jan 15 2011,  Up: Changes in Sphinx

18.8 Release 1.0.6 (Jan 04, 2011)
=================================

   * #581: Fix traceback in Python domain for empty cross-reference
     targets.

   * #283: Fix literal block display issues on Chrome browsers.

   * #383, #148: Support sorting a limited range of accented characters
     in the general index and the glossary.

   * #570: Try decoding `-D' and `-A' command-line arguments with the
     locale's preferred encoding.

   * #528: Observe *note locale_dirs: 184. when looking for the JS
     translations file.

   * #574: Add special code for better support of Japanese documents in
     the LaTeX builder.

   * Regression of #77: If there is only one parameter given with
     `:param:' markup, the bullet list is now suppressed again.

   * #556: Fix missing paragraph breaks in LaTeX output in certain
     situations.

   * #567: Emit the `autodoc-process-docstring' event even for objects
     without a docstring so that it can add content.

   * #565: In the LaTeX builder, not only literal blocks require
     different table handling, but also quite a few other list-like
     block elements.

   * #515: Fix tracebacks in the viewcode extension for Python objects
     that do not have a valid signature.

   * Fix strange reportings of line numbers for warnings generated from
     autodoc-included docstrings, due to different behavior depending
     on docutils version.

   * Several fixes to the C++ domain.


File: sphinx.info,  Node: Release 1 0 5 Nov 12 2010,  Next: Release 1 0 4 Sep 17 2010,  Prev: Release 1 0 6 Jan 04 2011,  Up: Changes in Sphinx

18.9 Release 1.0.5 (Nov 12, 2010)
=================================

   * #557: Add CSS styles required by docutils 0.7 for aligned images
     and figures.

   * In the Makefile generated by LaTeX output, do not delete pdf files
     on clean; they might be required images.

   * #535: Fix LaTeX output generated for line blocks.

   * #544: Allow `.pyw' as a source file extension.


File: sphinx.info,  Node: Release 1 0 4 Sep 17 2010,  Next: Release 1 0 3 Aug 23 2010,  Prev: Release 1 0 5 Nov 12 2010,  Up: Changes in Sphinx

18.10 Release 1.0.4 (Sep 17, 2010)
==================================

   * #524: Open intersphinx inventories in binary mode on Windows,
     since version 2 contains zlib-compressed data.

   * #513: Allow giving non-local URIs for JavaScript files, e.g.  in
     the JSMath extension.

   * #512: Fix traceback when `intersphinx_mapping' is empty.


File: sphinx.info,  Node: Release 1 0 3 Aug 23 2010,  Next: Release 1 0 2 Aug 14 2010,  Prev: Release 1 0 4 Sep 17 2010,  Up: Changes in Sphinx

18.11 Release 1.0.3 (Aug 23, 2010)
==================================

   * #495: Fix internal vs. external link distinction for links coming
     from a docutils table-of-contents.

   * #494: Fix the `maxdepth' option for the `toctree()' template
     callable when used with `collapse=True'.

   * #507: Fix crash parsing Python argument lists containing brackets
     in string literals.

   * #501: Fix regression when building LaTeX docs with figures that
     don't have captions.

   * #510: Fix inheritance diagrams for classes that are not picklable.

   * #497: Introduce separate background color for the sidebar collapse
     button, making it easier to see.

   * #502, #503, #496: Fix small layout bugs in several builtin themes.


File: sphinx.info,  Node: Release 1 0 2 Aug 14 2010,  Next: Release 1 0 1 Jul 27 2010,  Prev: Release 1 0 3 Aug 23 2010,  Up: Changes in Sphinx

18.12 Release 1.0.2 (Aug 14, 2010)
==================================

   * #490: Fix cross-references to objects of types added by the
     `add_object_type()' API function.

   * Fix handling of doc field types for different directive types.

   * Allow breaking long signatures, continuing with backlash-escaped
     newlines.

   * Fix unwanted styling of C domain references (because of a namespace
     clash with Pygments styles).

   * Allow references to PEPs and RFCs with explicit anchors.

   * #471: Fix LaTeX references to figures.

   * #482: When doing a non-exact search, match only the given type of
     object.

   * #481: Apply non-exact search for Python reference targets with
     `.name' for modules too.

   * #484: Fix crash when duplicating a parameter in an info field list.

   * #487: Fix setting the default role to one provided by the
     `oldcmarkup' extension.

   * #488: Fix crash when json-py is installed, which provides a `json'
     module but is incompatible to simplejson.

   * #480: Fix handling of target naming in intersphinx.

   * #486: Fix removal of `!' for all cross-reference roles.


File: sphinx.info,  Node: Release 1 0 1 Jul 27 2010,  Next: Release 1 0 Jul 23 2010,  Prev: Release 1 0 2 Aug 14 2010,  Up: Changes in Sphinx

18.13 Release 1.0.1 (Jul 27, 2010)
==================================

   * #470: Fix generated target names for reST domain objects; they are
     not in the same namespace.

   * #266: Add Bengali language.

   * #473: Fix a bug in parsing JavaScript object names.

   * #474: Fix building with SingleHTMLBuilder when there is no toctree.

   * Fix display names for objects linked to by intersphinx with
     explicit targets.

   * Fix building with the JSON builder.

   * Fix hyperrefs in object descriptions for LaTeX.


File: sphinx.info,  Node: Release 1 0 Jul 23 2010,  Next: Release 0 6 7 Jun 05 2010,  Prev: Release 1 0 1 Jul 27 2010,  Up: Changes in Sphinx

18.14 Release 1.0 (Jul 23, 2010)
================================

* Menu:

* Incompatible changes: Incompatible changes<2>.
* Features added: Features added<2>.


File: sphinx.info,  Node: Incompatible changes<2>,  Next: Features added<2>,  Up: Release 1 0 Jul 23 2010

18.14.1 Incompatible changes
----------------------------

   * Support for domains has been added.  A domain is a collection of
     directives and roles that all describe objects belonging together,
     e.g. elements of a programming language.  A few builtin domains are
     provided:

        - Python

        - C

        - C++

        - JavaScript

        - reStructuredText

   * The old markup for defining and linking to C directives is now
     deprecated.  It will not work anymore in future versions without
     activating the *note oldcmarkup: 1e. extension; in Sphinx 1.0, it
     is activated by default.

   * Removed support for old dependency versions; requirements are now:

        - docutils >= 0.5

        - Jinja2   >= 2.2

   * Removed deprecated elements:

        - `exclude_dirs' config value

        - `sphinx.builder' module


File: sphinx.info,  Node: Features added<2>,  Prev: Incompatible changes<2>,  Up: Release 1 0 Jul 23 2010

18.14.2 Features added
----------------------

   * General:

        - Added a "nitpicky" mode that emits warnings for all missing
          references.  It is activated by the `-n' command-line switch
          or the *note nitpicky: 179. config value.

        - Added `latexpdf' target in quickstart Makefile.

   * Markup:

        - The *note menuselection: d4. and *note guilabel: cf. roles now
          support ampersand accelerators.

        - New more compact doc field syntax is now recognized: `:param
          type name: description'.

        - Added `tab-width' option to *note literalinclude: b5.
          directive.

        - Added `titlesonly' option to *note toctree: 93. directive.

        - Added the `prepend' and `append' options to the *note
          literalinclude: b5. directive.

        - #284: All docinfo metadata is now put into the document
          metadata, not just the author.

        - The *note ref: 38. role can now also reference tables by
          caption.

        - The `include' directive now supports absolute paths, which
          are interpreted as relative to the source directory.

        - In the Python domain, references like `:func:`.name`' now
          look for matching names with any prefix if no direct match is
          found.

   * Configuration:

        - Added *note rst_prolog: 89. config value.

        - Added *note html_secnumber_suffix: 1a4. config value to
          control section numbering format.

        - Added *note html_compact_lists: 1a3. config value to control
          docutils' compact lists feature.

        - The *note html_sidebars: 194. config value can now contain
          patterns as keys, and the values can be lists that explicitly
          select which sidebar templates should be rendered.  That
          means that the builtin sidebar contents can be included only
          selectively.

        - *note html_static_path: 172. can now contain single file
          entries.

        - The new universal config value *note exclude_patterns: 170.
          makes the old *note unused_docs: 96, *note exclude_trees: 97.
          and *note exclude_dirnames: 171. obsolete.

        - Added *note html_output_encoding: 1a2. config value.

        - Added the *note latex_docclass: 1c8. config value and made the
          "twoside" documentclass option overridable by "oneside".

        - Added the *note trim_doctest_flags: 181. config value, which
          is true by default.

        - Added *note html_show_copyright: 1a0. config value.

        - Added *note latex_show_pagerefs: 1c5. and *note
          latex_show_urls: 1c6.  config values.

        - The behavior of *note html_file_suffix: 19d. changed
          slightly: the empty string now means "no suffix" instead of
          "default suffix", use `None' for "default suffix".

   * New builders:

        - Added a builder for the Epub format.

        - Added a builder for manual pages.

        - Added a single-file HTML builder.

   * HTML output:

        - Inline roles now get a CSS class with their name, allowing
          styles to customize their appearance.  Domain-specific roles
          get two classes, `domain' and `domain-rolename'.

        - References now get the class `internal' if they are internal
          to the whole project, as opposed to internal to the current
          page.

        - External references can be styled differently with the new
          `externalrefs' theme option for the default theme.

        - In the default theme, the sidebar can experimentally now be
          made collapsible using the new `collapsiblesidebar' theme
          option.

        - #129: Toctrees are now wrapped in a `div' tag with class
          `toctree-wrapper' in HTML output.

        - The *note toctree: 215. callable in templates now has a
          `maxdepth' keyword argument to control the depth of the
          generated tree.

        - The *note toctree: 215. callable in templates now accepts a
          `titles_only' keyword argument.

        - Added `htmltitle' block in layout template.

        - In the JavaScript search, allow searching for object names
          including the module name, like `sys.argv'.

        - Added new theme `haiku', inspired by the Haiku OS user guide.

        - Added new theme `nature'.

        - Added new theme `agogo', created by Andi Albrecht.

        - Added new theme `scrolls', created by Armin Ronacher.

        - #193: Added a `visitedlinkcolor' theme option to the default
          theme.

        - #322: Improved responsiveness of the search page by loading
          the search index asynchronously.

   * Extension API:

        - Added *note html-collect-pages: 24c.

        - Added *note needs_sphinx: 178. config value and *note
          require_sphinx(): 243. application API method.

        - #200: Added *note add_stylesheet(): 23a.  application API
          method.

   * Extensions:

        - Added the *note viewcode: 22. extension.

        - Added the *note extlinks: 15. extension.

        - Added support for source ordering of members in autodoc, with
          `autodoc_member_order = 'bysource''.

        - Added *note autodoc_default_flags: 27c. config value, which
          can be used to select default flags for all autodoc
          directives.

        - Added a way for intersphinx to refer to named labels in other
          projects, and to specify the project you want to link to.

        - #280: Autodoc can now document instance attributes assigned in
          `__init__' methods.

        - Many improvements and fixes to the *note autosummary: 12.
          extension, thanks to Pauli Virtanen.

        - #309: The *note graphviz: 16. extension can now output SVG
          instead of PNG images, controlled by the *note
          graphviz_output_format: 2c1. config value.

        - Added `alt' option to *note graphviz: 2c0. extension
          directives.

        - Added `exclude' argument to *note autodoc.between(): 287.

   * Translations:

        - Added Croatian translation, thanks to Bojan Mihelač.

        - Added Turkish translation, thanks to Firat Ozgul.

        - Added Catalan translation, thanks to Pau Fernández.

        - Added simplified Chinese translation.

        - Added Danish translation, thanks to Hjorth Larsen.

        - Added Lithuanian translation, thanks to Dalius Dobravolskas.

   * Bugs fixed:

        - #445: Fix links to result pages when using the search function
          of HTML built with the `dirhtml' builder.

        - #444: In templates, properly re-escape values treated with the
          "striptags" Jinja filter.


File: sphinx.info,  Node: Release 0 6 7 Jun 05 2010,  Next: Release 0 6 6 May 25 2010,  Prev: Release 1 0 Jul 23 2010,  Up: Changes in Sphinx

18.15 Release 0.6.7 (Jun 05, 2010)
==================================

   * #440: Remove usage of a Python >= 2.5 API in the `literalinclude'
     directive.

   * Fix a bug that prevented some references being generated in the
     LaTeX builder.

   * #428: Add some missing CSS styles for standard docutils classes.

   * #432: Fix UnicodeErrors while building LaTeX in translated locale.


File: sphinx.info,  Node: Release 0 6 6 May 25 2010,  Next: Release 0 6 5 Mar 01 2010,  Prev: Release 0 6 7 Jun 05 2010,  Up: Changes in Sphinx

18.16 Release 0.6.6 (May 25, 2010)
==================================

   * Handle raw nodes in the `text' writer.

   * Fix a problem the Qt help project generated by the `qthelp'
     builder that would lead to no content being displayed in the Qt
     Assistant.

   * #393: Fix the usage of Unicode characters in mathematic formulas
     when using the `pngmath' extension.

   * #404: Make `\and' work properly in the author field of the
     `latex_documents' setting.

   * #409: Make the `highlight_language' config value work properly in
     the LaTeX builder.

   * #418: Allow relocation of the translation JavaScript files to the
     system directory on Unix systems.

   * #414: Fix handling of Windows newlines in files included with the
     `literalinclude' directive.

   * #377: Fix crash in linkcheck builder.

   * #387: Fix the display of search results in `dirhtml' output.

   * #376: In autodoc, fix display of parameter defaults containing
     backslashes.

   * #370: Fix handling of complex list item labels in LaTeX output.

   * #374: Make the `doctest_path' config value of the doctest
     extension actually work.

   * Fix the handling of multiple toctrees when creating the global TOC
     for the `toctree()' template function.

   * Fix the handling of hidden toctrees when creating the global TOC
     for the `toctree()' template function.

   * Fix the handling of nested lists in the text writer.

   * #362: In autodoc, check for the existence of `__self__' on
     function objects before accessing it.

   * #353: Strip leading and trailing whitespace when extracting search
     words in the search function.


File: sphinx.info,  Node: Release 0 6 5 Mar 01 2010,  Next: Release 0 6 4 Jan 12 2010,  Prev: Release 0 6 6 May 25 2010,  Up: Changes in Sphinx

18.17 Release 0.6.5 (Mar 01, 2010)
==================================

   * In autodoc, fix the omission of some module members explicitly
     documented using documentation comments.

   * #345: Fix cropping of sidebar scroll bar with `stickysidebar'
     option of the default theme.

   * #341: Always generate UNIX newlines in the quickstart Makefile.

   * #338: Fix running with `-C' under Windows.

   * In autodoc, allow customizing the signature of an object where the
     built-in mechanism fails.

   * #331: Fix output for enumerated lists with start values in LaTeX.

   * Make the `start-after' and `end-before' options to the
     `literalinclude' directive work correctly if not used together.

   * #321: Fix link generation in the LaTeX builder.


File: sphinx.info,  Node: Release 0 6 4 Jan 12 2010,  Next: Release 0 6 3 Sep 03 2009,  Prev: Release 0 6 5 Mar 01 2010,  Up: Changes in Sphinx

18.18 Release 0.6.4 (Jan 12, 2010)
==================================

   * Improve the handling of non-Unicode strings in the configuration.

   * #316: Catch OSErrors occurring when calling graphviz with
     arguments it doesn't understand.

   * Restore compatibility with Pygments >= 1.2.

   * #295: Fix escaping of hyperref targets in LaTeX output.

   * #302: Fix links generated by the `:doc:' role for LaTeX output.

   * #286: collect todo nodes after the whole document has been read;
     this allows placing substitution references in todo items.

   * #294: do not ignore an explicit `today' config value in a LaTeX
     build.

   * The `alt' text of inheritance diagrams is now much cleaner.

   * Ignore images in section titles when generating link captions.

   * #310: support exception messages in the `testoutput' blocks of the
     `doctest' extension.

   * #293: line blocks are styled properly in HTML output.

   * #285: make the `locale_dirs' config value work again.

   * #303: `html_context' values given on the command line via `-A'
     should not override other values given in conf.py.

   * Fix a bug preventing incremental rebuilds for the `dirhtml'
     builder.

   * #299: Fix the mangling of quotes in some literal blocks.

   * #292: Fix path to the search index for the `dirhtml' builder.

   * Fix a Jython compatibility issue: make the dependence on the
     `parser' module optional.

   * #238: In autodoc, catch all errors that occur on module import,
     not just `ImportError'.

   * Fix the handling of non-data, but non-method descriptors in
     autodoc.

   * When copying file times, ignore OSErrors raised by `os.utime()'.


File: sphinx.info,  Node: Release 0 6 3 Sep 03 2009,  Next: Release 0 6 2 Jun 16 2009,  Prev: Release 0 6 4 Jan 12 2010,  Up: Changes in Sphinx

18.19 Release 0.6.3 (Sep 03, 2009)
==================================

   * Properly add C module filenames as dependencies in autodoc.

   * #253: Ignore graphviz directives without content instead of
     raising an unhandled exception.

   * #241: Fix a crash building LaTeX output for documents that contain
     a todolist directive.

   * #252: Make it easier to change the build dir in the Makefiles
     generated by quickstart.

   * #220: Fix CSS so that displaymath really is centered.

   * #222: Allow the "Footnotes" header to be translated.

   * #225: Don't add whitespace in generated HTML after inline tags.

   * #227: Make `literalinclude' work when the document's path name
     contains non-ASCII characters.

   * #229: Fix autodoc failures with members that raise errors on
     `getattr()'.

   * #205: When copying files, don't copy full stat info, only
     modification times.

   * #232: Support non-ASCII metadata in Qt help builder.

   * Properly format bullet lists nested in definition lists for LaTeX.

   * Section titles are now allowed inside `only' directives.

   * #201: Make `centered' directive work in LaTeX output.

   * #206: Refuse to overwrite an existing master document in
     sphinx-quickstart.

   * #208: Use MS-sanctioned locale settings, determined by the
     `language' config option, in the HTML help builder.

   * #210: Fix nesting of HTML tags for displayed math from pngmath
     extension.

   * #213: Fix centering of images in LaTeX output.

   * #211: Fix compatibility with docutils 0.5.


File: sphinx.info,  Node: Release 0 6 2 Jun 16 2009,  Next: Release 0 6 1 Mar 26 2009,  Prev: Release 0 6 3 Sep 03 2009,  Up: Changes in Sphinx

18.20 Release 0.6.2 (Jun 16, 2009)
==================================

   * #130: Fix obscure IndexError in doctest extension.

   * #167: Make glossary sorting case-independent.

   * #196: Add a warning if an extension module doesn't have a
     `setup()' function.

   * #158: Allow '..' in template names, and absolute template paths;
     Jinja 2 by default disables both.

   * When highlighting Python code, ignore extra indentation before
     trying to parse it as Python.

   * #191: Don't escape the tilde in URIs in LaTeX.

   * Don't consider contents of source comments for the search index.

   * Set the default encoding to `utf-8-sig' to handle files with a
     UTF-8 BOM correctly.

   * #178: apply `add_function_parentheses' config value to C functions
     as promised.

   * #173: Respect the docutils `title' directive.

   * #172: The `obj' role now links to modules as promised.

   * #19: Tables now can have a "longtable" class, in order to get
     correctly broken into pages in LaTeX output.

   * Look for Sphinx message catalogs in the system default path before
     trying `sphinx/locale'.

   * Fix the search for methods via "classname.methodname".

   * #155: Fix Python 2.4 compatibility: exceptions are old-style
     classes there.

   * #150: Fix display of the "sphinxdoc" theme on Internet Explorer
     versions 6 and 7.

   * #146: Don't fail to generate LaTeX when the user has an active
     `.docutils' configuration.

   * #29: Don't generate visible "-{-}" in option lists in LaTeX.

   * Fix cross-reference roles when put into substitutions.

   * Don't put image "alt" text into table-of-contents entries.

   * In the LaTeX writer, do not raise an exception on too many section
     levels, just use the "subparagraph" level for all of them.

   * #145: Fix autodoc problem with automatic members that refuse to be
     getattr()'d from their parent.

   * If specific filenames to build are given on the command line,
     check that they are within the source directory.

   * Fix autodoc crash for objects without a `__name__'.

   * Fix intersphinx for installations without urllib2.HTTPSHandler.

   * #134: Fix pending_xref leftover nodes when using the todolist
     directive from the todo extension.


File: sphinx.info,  Node: Release 0 6 1 Mar 26 2009,  Next: Release 0 6 Mar 24 2009,  Prev: Release 0 6 2 Jun 16 2009,  Up: Changes in Sphinx

18.21 Release 0.6.1 (Mar 26, 2009)
==================================

   * #135: Fix problems with LaTeX output and the graphviz extension.

   * #132: Include the autosummary "module" template in the
     distribution.


File: sphinx.info,  Node: Release 0 6 Mar 24 2009,  Next: Release 0 5 2 Mar 24 2009,  Prev: Release 0 6 1 Mar 26 2009,  Up: Changes in Sphinx

18.22 Release 0.6 (Mar 24, 2009)
================================

* Menu:

* New features added::


File: sphinx.info,  Node: New features added,  Up: Release 0 6 Mar 24 2009

18.22.1 New features added
--------------------------

   * Incompatible changes:

        - Templating now requires the Jinja2 library, which is an
          enhanced version of the old Jinja1 engine.  Since the syntax
          and semantic is largely the same, very few fixes should be
          necessary in custom templates.

        - The "document" div tag has been moved out of the `layout.html'
          template's "document" block, because the closing tag was
          already outside.  If you overwrite this block, you need to
          remove your "document" div tag as well.

        - The `autodoc_skip_member' event now also gets to decide
          whether to skip members whose name starts with underscores.
          Previously, these members were always automatically skipped.
          Therefore, if you handle this event, add something like this
          to your event handler to restore the old behavior:

              if name.startswith('_'):
                  return True



   * Theming support, see the new section in the documentation.

   * Markup:

        - Due to popular demand, added a `:doc:' role which directly
          links to another document without the need of creating a
          label to which a `:ref:' could link to.

        - #4: Added a `:download:' role that marks a non-document file
          for inclusion into the HTML output and links to it.

        - Added an `only' directive that can selectively include text
          based on enabled "tags".  Tags can be given on the command
          line.  Also, the current builder output format (e.g. "html" or
          "latex") is always a defined tag.

        - #10: Added HTML section numbers, enabled by giving a
          `:numbered:' flag to the `toctree' directive.

        - #114: Added an `abbr' role to markup abbreviations and
          acronyms.

        - The `literalinclude' directive now supports several more
          options, to include only parts of a file.

        - The `toctree' directive now supports a `:hidden:' flag, which
          will prevent links from being generated in place of the
          directive - this allows you to define your document
          structure, but place the links yourself.

        - #123: The `glossary' directive now supports a `:sorted:' flag
          that sorts glossary entries alphabetically.

        - Paths to images, literal include files and download files can
          now be absolute (like `/images/foo.png').  They are treated
          as relative to the top source directory.

        - #52: There is now a `hlist' directive, creating a compact
          list by placing distributing items into multiple columns.

        - #77: If a description environment with info field list only
          contains one `:param:' entry, no bullet list is generated.

        - #6: Don't generate redundant `<ul>' for top-level TOC tree
          items, which leads to a visual separation of TOC entries.

        - #23: Added a `classmethod' directive along with `method' and
          `staticmethod'.

        - Scaled images now get a link to the unscaled version.

        - SVG images are now supported in HTML (via `<object>' and
          `<embed>' tags).

        - Added a `toctree' callable to the templates, and the ability
          to include external links in toctrees. The 'collapse' keyword
          argument indicates whether or not to only display subitems of
          the current page.  (Defaults to True.)

   * Configuration:

        - The new config value `rst_epilog' can contain reST that is
          appended to each source file that is read.  This is the right
          place for global substitutions.

        - The new `html_add_permalinks' config value can be used to
          switch off the generated "paragraph sign" permalinks for each
          heading and definition environment.

        - The new `html_show_sourcelink' config value can be used to
          switch off the links to the reST sources in the sidebar.

        - The default value for `htmlhelp_basename' is now the project
          title, cleaned up as a filename.

        - The new `modindex_common_prefix' config value can be used to
          ignore certain package names for module index sorting.

        - The new `trim_footnote_reference_space' config value mirrors
          the docutils config value of the same name and removes the
          space before a footnote reference that is necessary for reST
          to recognize the reference.

        - The new `latex_additional_files' config value can be used to
          copy files (that Sphinx doesn't copy automatically, e.g. if
          they are referenced in custom LaTeX added in
          `latex_elements') to the build directory.

   * Builders:

        - The HTML builder now stores a small file named `.buildinfo' in
          its output directory.  It stores a hash of config values that
          can be used to determine if a full rebuild needs to be done
          (e.g.  after changing `html_theme').

        - New builder for Qt help collections, by Antonio Valentino.

        - The new `DirectoryHTMLBuilder' (short name `dirhtml') creates
          a separate directory for every page, and places the page there
          in a file called `index.html'.  Therefore, page URLs and links
          don't need to contain `.html'.

        - The new `html_link_suffix' config value can be used to select
          the suffix of generated links between HTML files.

        - #96: The LaTeX builder now supports figures wrapped by text,
          when using the `figwidth' option and right/left alignment.

   * New translations:

        - Italian by Sandro Dentella.

        - Ukrainian by Petro Sasnyk.

        - Finnish by Jukka Inkeri.

        - Russian by Alexander Smishlajev.

   * Extensions and API:

        - New `graphviz' extension to embed graphviz graphs.

        - New `inheritance_diagram' extension to embed... inheritance
          diagrams!

        - New `autosummary' extension that generates summaries of
          modules and automatic documentation of modules.

        - Autodoc now has a reusable Python API, which can be used to
          create custom types of objects to auto-document (e.g. Zope
          interfaces).  See also `Sphinx.add_autodocumenter()'.

        - Autodoc now handles documented attributes.

        - Autodoc now handles inner classes and their methods.

        - Autodoc can document classes as functions now if explicitly
          marked with `autofunction'.

        - Autodoc can now exclude single members from documentation via
          the `exclude-members' option.

        - Autodoc can now order members either alphabetically (like
          previously) or by member type; configurable either with the
          config value `autodoc_member_order' or a `member-order'
          option per directive.

        - The function `Sphinx.add_directive()' now also supports
          docutils 0.5-style directive classes.  If they inherit from
          `sphinx.util.compat.Directive', they also work with docutils
          0.4.

        - There is now a `Sphinx.add_lexer()' method to be able to use
          custom Pygments lexers easily.

        - There is now `Sphinx.add_generic_role()' to mirror the
          docutils' own function.

   * Other changes:

        - Config overrides for single dict keys can now be given on the
          command line.

        - There is now a `doctest_global_setup' config value that can
          be used to give setup code for all doctests in the
          documentation.

        - Source links in HTML are now generated with `rel="nofollow"'.

        - Quickstart can now generate a Windows `make.bat' file.

        - #62: There is now a `-w' option for sphinx-build that writes
          warnings to a file, in addition to stderr.

        - There is now a `-W' option for sphinx-build that turns
          warnings into errors.


File: sphinx.info,  Node: Release 0 5 2 Mar 24 2009,  Next: Release 0 5 1 Dec 15 2008,  Prev: Release 0 6 Mar 24 2009,  Up: Changes in Sphinx

18.23 Release 0.5.2 (Mar 24, 2009)
==================================

   * Properly escape `|' in LaTeX output.

   * #71: If a decoding error occurs in source files, print a warning
     and replace the characters by "?".

   * Fix a problem in the HTML search if the index takes too long to
     load.

   * Don't output system messages while resolving, because they would
     stay in the doctrees even if keep_warnings is false.

   * #82: Determine the correct path for dependencies noted by
     docutils.  This fixes behavior where a source with dependent files
     was always reported as changed.

   * Recognize toctree directives that are not on section toplevel, but
     within block items, such as tables.

   * Use a new RFC base URL, since rfc.org seems down.

   * Fix a crash in the todolist directive when no todo items are
     defined.

   * Don't call LaTeX or dvipng over and over again if it was not found
     once, and use text-only latex as a substitute in that case.

   * Fix problems with footnotes in the LaTeX output.

   * Prevent double hyphens becoming en-dashes in literal code in the
     LaTeX output.

   * Open literalinclude files in universal newline mode to allow
     arbitrary newline conventions.

   * Actually make the `-Q' option work.

   * #86: Fix explicit document titles in toctrees.

   * #81: Write environment and search index in a manner that is safe
     from exceptions that occur during dumping.

   * #80: Fix UnicodeErrors when a locale is set with setlocale().


File: sphinx.info,  Node: Release 0 5 1 Dec 15 2008,  Next: Release 0 5 Nov 23 2008 -- Birthday release!,  Prev: Release 0 5 2 Mar 24 2009,  Up: Changes in Sphinx

18.24 Release 0.5.1 (Dec 15, 2008)
==================================

   * #67: Output warnings about failed doctests in the doctest extension
     even when running in quiet mode.

   * #72: In pngmath, make it possible to give a full path to LaTeX and
     dvipng on Windows.  For that to work, the `pngmath_latex' and
     `pngmath_dvipng' options are no longer split into command and
     additional arguments; use `pngmath_latex_args' and
     `pngmath_dvipng_args' to give additional arguments.

   * Don't crash on failing doctests with non-ASCII characters.

   * Don't crash on writing status messages and warnings containing
     unencodable characters.

   * Warn if a doctest extension block doesn't contain any code.

   * Fix the handling of `:param:' and `:type:' doc fields when they
     contain markup (especially cross-referencing roles).

   * #65: Fix storage of depth information for PNGs generated by the
     pngmath extension.

   * Fix autodoc crash when automethod is used outside a class context.

   * #68: Fix LaTeX writer output for images with specified height.

   * #60: Fix wrong generated image path when including images in
     sources in subdirectories.

   * Fix the JavaScript search when html_copy_source is off.

   * Fix an indentation problem in autodoc when documenting classes
     with the option `autoclass_content = "both"' set.

   * Don't crash on empty index entries, only emit a warning.

   * Fix a typo in the search JavaScript code, leading to unusable
     search function in some setups.


File: sphinx.info,  Node: Release 0 5 Nov 23 2008 -- Birthday release!,  Next: Release 0 4 3 Oct 8 2008,  Prev: Release 0 5 1 Dec 15 2008,  Up: Changes in Sphinx

18.25 Release 0.5 (Nov 23, 2008) - Birthday release!
====================================================

* Menu:

* New features added: New features added<2>.
* Bugs fixed::


File: sphinx.info,  Node: New features added<2>,  Next: Bugs fixed,  Up: Release 0 5 Nov 23 2008 -- Birthday release!

18.25.1 New features added
--------------------------

   * Markup features:

        - Citations are now global: all citation defined in any file
          can be referenced from any file.  Citations are collected in
          a bibliography for LaTeX output.

        - Footnotes are now properly handled in the LaTeX builder: they
          appear at the location of the footnote reference in text, not
          at the end of a section.  Thanks to Andrew McNamara for the
          initial patch.

        - "System Message" warnings are now automatically removed from
          the built documentation, and only written to stderr.  If you
          want the old behavior, set the new config value
          `keep_warnings' to True.

        - Glossary entries are now automatically added to the index.

        - Figures with captions can now be referred to like section
          titles, using the `:ref:' role without an explicit link text.

        - Added `cmember' role for consistency.

        - Lists enumerated by letters or roman numerals are now handled
          like in standard reST.

        - The `seealso' directive can now also be given arguments, as a
          short form.

        - You can now document several programs and their options with
          the new `program' directive.

   * HTML output and templates:

        - Incompatible change: The "root" relation link (top left in the
          relbar) now points to the `master_doc' by default, no longer
          to a document called "index".  The old behavior, while useful
          in some situations, was somewhat unexpected.  Override the
          "rootrellink" block in the template to customize where it
          refers to.

        - The JavaScript search now searches for objects before
          searching in the full text.

        - TOC tree entries now have CSS classes that make it possible to
          style them depending on their depth.

        - Highlighted code blocks now have CSS classes that make it
          possible to style them depending on their language.

        - HTML `<meta>' tags via the docutils `meta' directive are now
          supported.

        - `SerializingHTMLBuilder' was added as new abstract builder
          that can be subclassed to serialize build HTML in a specific
          format.  The `PickleHTMLBuilder' is a concrete subclass of it
          that uses pickle as serialization implementation.

        - `JSONHTMLBuilder' was added as another
          `SerializingHTMLBuilder' subclass that dumps the generated
          HTML into JSON files for further processing.

        - The `rellinks' block in the layout template is now called
          `linktags' to avoid confusion with the relbar links.

        - The HTML builders have two additional attributes now that can
          be used to disable the anchor-link creation after headlines
          and definition links.

        - Only generate a module index if there are some modules in the
          documentation.

   * New and changed config values:

        - Added support for internationalization in generated text with
          the `language' and `locale_dirs' config values.  Many thanks
          to language contributors:

             * Horst Gutmann - German

             * Pavel Kosina - Czech

             * David Larlet - French

             * Michał Kandulski - Polish

             * Yasushi Masuda - Japanese

             * Guillem Borrell - Spanish

             * Luc Saffre and Peter Bertels - Dutch

             * Fred Lin - Traditional Chinese

             * Roger Demetrescu - Brazilian Portuguese

             * Rok Garbas - Slovenian

        - The new config value `highlight_language' set a global
          default for highlighting.  When `'python3'' is selected,
          console output blocks are recognized like for `'python''.

        - Exposed Pygments' lexer guessing as a highlight "language"
          `guess'.

        - The new config value `latex_elements' allows to override all
          LaTeX snippets that Sphinx puts into the generated .tex file
          by default.

        - Added `exclude_dirnames' config value that can be used to
          exclude e.g. CVS directories from source file search.

        - Added `source_encoding' config value to select input encoding.

   * Extensions:

        - The new extensions `sphinx.ext.jsmath' and
          `sphinx.ext.pngmath' provide math support for both HTML and
          LaTeX builders.

        - The new extension `sphinx.ext.intersphinx' half-automatically
          creates links to Sphinx documentation of Python objects in
          other projects.

        - The new extension `sphinx.ext.todo' allows the insertion of
          "To do" directives whose visibility in the output can be
          toggled.  It also adds a directive to compile a list of all
          todo items.

        - sphinx.ext.autodoc has a new event `autodoc-process-signature'
          that allows tuning function signature introspection.

        - sphinx.ext.autodoc has a new event `autodoc-skip-member' that
          allows tuning which members are included in the generated
          content.

        - Respect __all__ when autodocumenting module members.

        - The `automodule' directive now supports the `synopsis',
          `deprecated' and `platform' options.

   * Extension API:

        - `Sphinx.add_node()' now takes optional visitor methods for the
          HTML, LaTeX and text translators; this prevents having to
          manually patch the classes.

        - Added `Sphinx.add_javascript()' that adds scripts to load in
          the default HTML template.

        - Added new events: `source-read', `env-updated',
          `env-purge-doc', `missing-reference', `build-finished'.

   * Other changes:

        - Added a command-line switch `-Q': it will suppress warnings.

        - Added a command-line switch `-A': it can be used to supply
          additional values into the HTML templates.

        - Added a command-line switch `-C': if it is given, no
          configuration file `conf.py' is required.

        - Added a distutils command `build_sphinx': When Sphinx is
          installed, you can call `python setup.py build_sphinx' for
          projects that have Sphinx documentation, which will build the
          docs and place them in the standard distutils build directory.

        - In quickstart, if the selected root path already contains a
          Sphinx project, complain and abort.


File: sphinx.info,  Node: Bugs fixed,  Prev: New features added<2>,  Up: Release 0 5 Nov 23 2008 -- Birthday release!

18.25.2 Bugs fixed
------------------

   * #51: Escape configuration values placed in HTML templates.

   * #44: Fix small problems in HTML help index generation.

   * Fix LaTeX output for line blocks in tables.

   * #38: Fix "illegal unit" error when using pixel image
     widths/heights.

   * Support table captions in LaTeX output.

   * #39: Work around a bug in Jinja that caused "<generator ...>" to be
     emitted in HTML output.

   * Fix a problem with module links not being generated in LaTeX
     output.

   * Fix the handling of images in different directories.

   * #29: Support option lists in the text writer.  Make sure that
     dashes introducing long option names are not contracted to
     en-dashes.

   * Support the "scale" option for images in HTML output.

   * #25: Properly escape quotes in HTML help attribute values.

   * Fix LaTeX build for some description environments with `:noindex:'.

   * #24: Don't crash on uncommon casing of role names (like `:Class:').

   * Only output ANSI colors on color terminals.

   * Update to newest fncychap.sty, to fix problems with non-ASCII
     characters at the start of chapter titles.

   * Fix a problem with index generation in LaTeX output, caused by
     hyperref not being included last.

   * Don't disregard return annotations for functions without any
     parameters.

   * Don't throw away labels for code blocks.


File: sphinx.info,  Node: Release 0 4 3 Oct 8 2008,  Next: Release 0 4 2 Jul 29 2008,  Prev: Release 0 5 Nov 23 2008 -- Birthday release!,  Up: Changes in Sphinx

18.26 Release 0.4.3 (Oct 8, 2008)
=================================

   * Fix a bug in autodoc with directly given autodoc members.

   * Fix a bug in autodoc that would import a module twice, once as
     "module", once as "module.".

   * Fix a bug in the HTML writer that created duplicate `id'
     attributes for section titles with docutils 0.5.

   * Properly call `super()' in overridden blocks in templates.

   * Add a fix when using XeTeX.

   * Unify handling of LaTeX escaping.

   * Rebuild everything when the `extensions' config value changes.

   * Don't try to remove a nonexisting static directory.

   * Fix an indentation problem in production lists.

   * Fix encoding handling for literal include files: `literalinclude'
     now has an `encoding' option that defaults to UTF-8.

   * Fix the handling of non-ASCII characters entered in quickstart.

   * Fix a crash with nonexisting image URIs.


File: sphinx.info,  Node: Release 0 4 2 Jul 29 2008,  Next: Release 0 4 1 Jul 5 2008,  Prev: Release 0 4 3 Oct 8 2008,  Up: Changes in Sphinx

18.27 Release 0.4.2 (Jul 29, 2008)
==================================

   * Fix rendering of the `samp' role in HTML.

   * Fix a bug with LaTeX links to headings leading to a wrong page.

   * Reread documents with globbed toctrees when source files are added
     or removed.

   * Add a missing parameter to PickleHTMLBuilder.handle_page().

   * Put inheritance info always on its own line.

   * Don't automatically enclose code with whitespace in it in quotes;
     only do this for the `samp' role.

   * autodoc now emits a more precise error message when a module can't
     be imported or an attribute can't be found.

   * The JavaScript search now uses the correct file name suffix when
     referring to found items.

   * The automodule directive now accepts the `inherited-members' and
     `show-inheritance' options again.

   * You can now rebuild the docs normally after relocating the source
     and/or doctree directory.


File: sphinx.info,  Node: Release 0 4 1 Jul 5 2008,  Next: Release 0 4 Jun 23 2008,  Prev: Release 0 4 2 Jul 29 2008,  Up: Changes in Sphinx

18.28 Release 0.4.1 (Jul 5, 2008)
=================================

   * Added sub-/superscript node handling to TextBuilder.

   * Label names in references are now case-insensitive, since reST
     label names are always lowercased.

   * Fix linkcheck builder crash for malformed URLs.

   * Add compatibility for admonitions and docutils 0.5.

   * Remove the silly restriction on "rubric" in the LaTeX writer: you
     can now write arbitrary "rubric" directives, and only those with a
     title of "Footnotes" will be ignored.

   * Copy the HTML logo to the output `_static' directory.

   * Fix LaTeX code for modules with underscores in names and platforms.

   * Fix a crash with nonlocal image URIs.

   * Allow the usage of :noindex: in `automodule' directives, as
     documented.

   * Fix the `delete()' docstring processor function in autodoc.

   * Fix warning message for nonexisting images.

   * Fix JavaScript search in Internet Explorer.


File: sphinx.info,  Node: Release 0 4 Jun 23 2008,  Next: Release 0 3 May 6 2008,  Prev: Release 0 4 1 Jul 5 2008,  Up: Changes in Sphinx

18.29 Release 0.4 (Jun 23, 2008)
================================

* Menu:

* New features added: New features added<3>.
* Bugs fixed: Bugs fixed<2>.


File: sphinx.info,  Node: New features added<3>,  Next: Bugs fixed<2>,  Up: Release 0 4 Jun 23 2008

18.29.1 New features added
--------------------------

   * `tocdepth' can be given as a file-wide metadata entry, and
     specifies the maximum depth of a TOC of this file.

   * The new config value `default_role' can be used to select the
     default role for all documents.

   * Sphinx now interprets field lists with fields like `:param foo:'
     in description units.

   * The new `staticmethod' directive can be used to mark methods as
     static methods.

   * HTML output:

        - The "previous" and "next" links have a more logical
          structure, so that by following "next" links you can traverse
          the entire TOC tree.

        - The new event `html-page-context' can be used to include
          custom values into the context used when rendering an HTML
          template.

        - Document metadata is now in the default template context,
          under the name `metadata'.

        - The new config value `html_favicon' can be used to set a
          favicon for the HTML output.  Thanks to Sebastian Wiesner.

        - The new config value `html_use_index' can be used to switch
          index generation in HTML documents off.

        - The new config value `html_split_index' can be used to create
          separate index pages for each letter, to be used when the
          complete index is too large for one page.

        - The new config value `html_short_title' can be used to set a
          shorter title for the documentation which is then used in the
          navigation bar.

        - The new config value `html_show_sphinx' can be used to control
          whether a link to Sphinx is added to the HTML footer.

        - The new config value `html_file_suffix' can be used to set the
          HTML file suffix to e.g. `.xhtml'.

        - The directories in the `html_static_path' can now contain
          subdirectories.

        - The module index now isn't collapsed if the number of
          submodules is larger than the number of toplevel modules.

   * The image directive now supports specifying the extension as `.*',
     which makes the builder select the one that matches best.  Thanks
     to Sebastian Wiesner.

   * The new config value `exclude_trees' can be used to exclude whole
     subtrees from the search for source files.

   * Defaults for configuration values can now be callables, which
     allows dynamic defaults.

   * The new TextBuilder creates plain-text output.

   * Python 3-style signatures, giving a return annotation via `->',
     are now supported.

   * Extensions:

        - The autodoc extension now offers a much more flexible way to
          manipulate docstrings before including them into the output,
          via the new `autodoc-process-docstring' event.

        - The `autodoc' extension accepts signatures for functions,
          methods and classes now that override the signature got via
          introspection from Python code.

        - The `autodoc' extension now offers a `show-inheritance' option
          for autoclass that inserts a list of bases after the
          signature.

        - The autodoc directives now support the `noindex' flag option.


File: sphinx.info,  Node: Bugs fixed<2>,  Prev: New features added<3>,  Up: Release 0 4 Jun 23 2008

18.29.2 Bugs fixed
------------------

   * Correctly report the source location for docstrings included with
     autodoc.

   * Fix the LaTeX output of description units with multiple signatures.

   * Handle the figure directive in LaTeX output.

   * Handle raw admonitions in LaTeX output.

   * Fix determination of the title in HTML help output.

   * Handle project names containing spaces.

   * Don't write SSI-like comments in HTML output.

   * Rename the "sidebar" class to "sphinxsidebar" in order to stay
     different from reST sidebars.

   * Use a binary TOC in HTML help generation to fix issues links
     without explicit anchors.

   * Fix behavior of references to functions/methods with an explicit
     title.

   * Support citation, subscript and superscript nodes in LaTeX writer.

   * Provide the standard "class" directive as "cssclass"; else it is
     shadowed by the Sphinx-defined directive.

   * Fix the handling of explicit module names given to autoclass
     directives.  They now show up with the correct module name in the
     generated docs.

   * Enable autodoc to process Unicode docstrings.

   * The LaTeX writer now translates line blocks with `\raggedright',
     which plays nicer with tables.

   * Fix bug with directories in the HTML builder static path.


File: sphinx.info,  Node: Release 0 3 May 6 2008,  Next: Release 0 2 Apr 27 2008,  Prev: Release 0 4 Jun 23 2008,  Up: Changes in Sphinx

18.30 Release 0.3 (May 6, 2008)
===============================

* Menu:

* New features added: New features added<4>.
* Bugs fixed: Bugs fixed<3>.


File: sphinx.info,  Node: New features added<4>,  Next: Bugs fixed<3>,  Up: Release 0 3 May 6 2008

18.30.1 New features added
--------------------------

   * The `toctree' directive now supports a `glob' option that allows
     glob-style entries in the content.

   * If the `pygments_style' config value contains a dot it's treated
     as the import path of a custom Pygments style class.

   * A new config value, `exclude_dirs', can be used to exclude whole
     directories from the search for source files.

   * The configuration directory (containing `conf.py') can now be set
     independently from the source directory.  For that, a new
     command-line option `-c' has been added.

   * A new directive `tabularcolumns' can be used to give a tabular
     column specification for LaTeX output.  Tables now use the
     `tabulary' package.  Literal blocks can now be placed in tables,
     with several caveats.

   * A new config value, `latex_use_parts', can be used to enable parts
     in LaTeX documents.

   * Autodoc now skips inherited members for classes, unless you give
     the new `inherited-members' option.

   * A new config value, `autoclass_content', selects if the docstring
     of the class' `__init__' method is added to the directive's body.

   * Support for C++ class names (in the style `Class::Function') in C
     function descriptions.

   * Support for a `toctree_only' item in items for the
     `latex_documents' config value.  This only includes the documents
     referenced by TOC trees in the output, not the rest of the file
     containing the directive.


File: sphinx.info,  Node: Bugs fixed<3>,  Prev: New features added<4>,  Up: Release 0 3 May 6 2008

18.30.2 Bugs fixed
------------------

   * sphinx.htmlwriter: Correctly write the TOC file for any structure
     of the master document.  Also encode non-ASCII characters as
     entities in TOC and index file.  Remove two remaining instances of
     hard-coded "documentation".

   * sphinx.ext.autodoc: descriptors are detected properly now.

   * sphinx.latexwriter: implement all reST admonitions, not just `note'
     and `warning'.

   * Lots of little fixes to the LaTeX output and style.

   * Fix OpenSearch template and make template URL absolute.  The
     `html_use_opensearch' config value now must give the base URL.

   * Some unused files are now stripped from the HTML help file build.


File: sphinx.info,  Node: Release 0 2 Apr 27 2008,  Next: Release 0 1 61950 Mar 26 2008,  Prev: Release 0 3 May 6 2008,  Up: Changes in Sphinx

18.31 Release 0.2 (Apr 27, 2008)
================================

* Menu:

* Incompatible changes: Incompatible changes<3>.
* New features added: New features added<5>.
* Bugs fixed: Bugs fixed<4>.


File: sphinx.info,  Node: Incompatible changes<3>,  Next: New features added<5>,  Up: Release 0 2 Apr 27 2008

18.31.1 Incompatible changes
----------------------------

   * Jinja, the template engine used for the default HTML templates, is
     now no longer shipped with Sphinx.  If it is not installed
     automatically for you (it is now listed as a dependency in
     `setup.py'), install it manually from PyPI.  This will also be
     needed if you're using Sphinx from a SVN checkout; in that case
     please also remove the `sphinx/jinja' directory that may be left
     over from old revisions.

   * The clumsy handling of the `index.html' template was removed.  The
     config value `html_index' is gone, and `html_additional_pages'
     should be used instead.  If you need it, the old `index.html'
     template is still there, called `defindex.html', and you can port
     your html_index template, using Jinja inheritance, by changing
     your template:

         {% extends "defindex.html" %}
         {% block tables %}
         ... old html_index template content ...
         {% endblock %}

     and putting `'index': name of your template' in
     `html_additional_pages'.

   * In the layout template, redundant `block's were removed; you
     should use Jinja's standard `{{ super() }}' mechanism instead, as
     explained in the (newly written) templating docs.


File: sphinx.info,  Node: New features added<5>,  Next: Bugs fixed<4>,  Prev: Incompatible changes<3>,  Up: Release 0 2 Apr 27 2008

18.31.2 New features added
--------------------------

   * Extension API (Application object):

        - Support a new method, `add_crossref_type'.  It works like
          `add_description_unit' but the directive will only create a
          target and no output.

        - Support a new method, `add_transform'.  It takes a standard
          docutils `Transform' subclass which is then applied by
          Sphinx' reader on parsing reST document trees.

        - Add support for other template engines than Jinja, by adding
          an abstraction called a "template bridge".  This class
          handles rendering of templates and can be changed using the
          new configuration value "template_bridge".

        - The config file itself can be an extension (if it provides a
          `setup()' function).

   * Markup:

        - New directive, `currentmodule'.  It can be used to indicate
          the module name of the following documented things without
          creating index entries.

        - Allow giving a different title to documents in the toctree.

        - Allow giving multiple options in a `cmdoption' directive.

        - Fix display of class members without explicit class name
          given.

   * Templates (HTML output):

        - `index.html' renamed to `defindex.html', see above.

        - There's a new config value, `html_title', that controls the
          overall "title" of the set of Sphinx docs.  It is used
          instead everywhere instead of "Projectname vX.Y
          documentation" now.

        - All references to "documentation" in the templates have been
          removed, so that it is now easier to use Sphinx for
          non-documentation documents with the default templates.

        - Templates now have an XHTML doctype, to be consistent with
          docutils' HTML output.

        - You can now create an OpenSearch description file with the
          `html_use_opensearch' config value.

        - You can now quickly include a logo in the sidebar, using the
          `html_logo' config value.

        - There are new blocks in the sidebar, so that you can easily
          insert content into the sidebar.

   * LaTeX output:

        - The `sphinx.sty' package was cleaned of unused stuff.

        - You can include a logo in the title page with the
          `latex_logo' config value.

        - You can define the link colors and a border and background
          color for verbatim environments.

Thanks to Jacob Kaplan-Moss, Talin, Jeroen Ruigrok van der Werven and
Sebastian Wiesner for suggestions.


File: sphinx.info,  Node: Bugs fixed<4>,  Prev: New features added<5>,  Up: Release 0 2 Apr 27 2008

18.31.3 Bugs fixed
------------------

   * sphinx.ext.autodoc: Don't check `__module__' for explicitly given
     members.  Remove "self" in class constructor argument list.

   * sphinx.htmlwriter: Don't use os.path for joining image HREFs.

   * sphinx.htmlwriter: Don't use SmartyPants for HTML attribute values.

   * sphinx.latexwriter: Implement option lists.  Also, some other
     changes were made to `sphinx.sty' in order to enhance
     compatibility and remove old unused stuff.  Thanks to Gael
     Varoquaux for that!

   * sphinx.roles: Fix referencing glossary terms with explicit targets.

   * sphinx.environment: Don't swallow TOC entries when resolving
     subtrees.

   * sphinx.quickstart: Create a sensible default latex_documents
     setting.

   * sphinx.builder, sphinx.environment: Gracefully handle some user
     error cases.

   * sphinx.util: Follow symbolic links when searching for documents.


File: sphinx.info,  Node: Release 0 1 61950 Mar 26 2008,  Next: Release 0 1 61945 Mar 26 2008,  Prev: Release 0 2 Apr 27 2008,  Up: Changes in Sphinx

18.32 Release 0.1.61950 (Mar 26, 2008)
======================================

   * sphinx.quickstart: Fix format string for Makefile.


File: sphinx.info,  Node: Release 0 1 61945 Mar 26 2008,  Next: Release 0 1 61843 Mar 24 2008,  Prev: Release 0 1 61950 Mar 26 2008,  Up: Changes in Sphinx

18.33 Release 0.1.61945 (Mar 26, 2008)
======================================

   * sphinx.htmlwriter, sphinx.latexwriter: Support the `.. image::'
     directive by copying image files to the output directory.

   * sphinx.builder: Consistently name "special" HTML output directories
     with a leading underscore; this means `_sources' and `_static'.

   * sphinx.environment: Take dependent files into account when
     collecting the set of outdated sources.

   * sphinx.directives: Record files included with `.. literalinclude::'
     as dependencies.

   * sphinx.ext.autodoc: Record files from which docstrings are included
     as dependencies.

   * sphinx.builder: Rebuild all HTML files in case of a template
     change.

   * sphinx.builder: Handle unavailability of TOC relations (previous/
     next chapter) more gracefully in the HTML builder.

   * sphinx.latexwriter: Include fncychap.sty which doesn't seem to be
     very common in TeX distributions.  Add a `clean' target in the
     latex Makefile.  Really pass the correct paper and size options to
     the LaTeX document class.

   * setup: On Python 2.4, don't egg-depend on docutils if a docutils is
     already installed - else it will be overwritten.


File: sphinx.info,  Node: Release 0 1 61843 Mar 24 2008,  Next: Release 0 1 61798 Mar 23 2008,  Prev: Release 0 1 61945 Mar 26 2008,  Up: Changes in Sphinx

18.34 Release 0.1.61843 (Mar 24, 2008)
======================================

   * sphinx.quickstart: Really don't create a makefile if the user
     doesn't want one.

   * setup: Don't install scripts twice, via setuptools entry points
     and distutils scripts.  Only install via entry points.

   * sphinx.builder: Don't recognize the HTML builder's copied source
     files (under `_sources') as input files if the source suffix is
     `.txt'.

   * sphinx.highlighting: Generate correct markup for LaTeX Verbatim
     environment escapes even if Pygments is not installed.

   * sphinx.builder: The WebHTMLBuilder is now called PickleHTMLBuilder.

   * sphinx.htmlwriter: Make parsed-literal blocks work as expected,
     not highlighting them via Pygments.

   * sphinx.environment: Don't error out on reading an empty source
     file.


File: sphinx.info,  Node: Release 0 1 61798 Mar 23 2008,  Next: Release 0 1 61611 Mar 21 2008,  Prev: Release 0 1 61843 Mar 24 2008,  Up: Changes in Sphinx

18.35 Release 0.1.61798 (Mar 23, 2008)
======================================

   * sphinx: Work with docutils SVN snapshots as well as 0.4.

   * sphinx.ext.doctest: Make the group in which doctest blocks are
     placed selectable, and default to `'default''.

   * sphinx.ext.doctest: Replace `<BLANKLINE>' in doctest blocks by
     real blank lines for presentation output, and remove doctest
     options given inline.

   * sphinx.environment: Move doctest_blocks out of block_quotes to
     support indented doctest blocks.

   * sphinx.ext.autodoc: Render `.. automodule::' docstrings in a
     section node, so that module docstrings can contain proper
     sectioning.

   * sphinx.ext.autodoc: Use the module's encoding for decoding
     docstrings, rather than requiring ASCII.


File: sphinx.info,  Node: Release 0 1 61611 Mar 21 2008,  Prev: Release 0 1 61798 Mar 23 2008,  Up: Changes in Sphinx

18.36 Release 0.1.61611 (Mar 21, 2008)
======================================

   * First public release.


File: sphinx.info,  Node: Projects using Sphinx,  Next: Python Module Index,  Prev: Changes in Sphinx,  Up: Top

19 Projects using Sphinx
************************

This is an (incomplete) alphabetic list of projects that use Sphinx or
are experimenting with using it for their documentation.  If you like to
be included, please mail to the Google group(1).

  I've grouped the list into sections to make it easier to find
interesting examples.

* Menu:

* Documentation using the default theme::
* Documentation using a customized version of the default theme::
* Documentation using the sphinxdoc theme::
* Documentation using another builtin theme::
* Documentation using a custom theme/integrated in a site::
* Homepages and other non-documentation sites::
* Books produced using Sphinx::

  ---------- Footnotes ----------

  (1) http://groups.google.com/group/sphinx-users


File: sphinx.info,  Node: Documentation using the default theme,  Next: Documentation using a customized version of the default theme,  Up: Projects using Sphinx

19.1 Documentation using the default theme
==========================================

   * APSW: <http://apidoc.apsw.googlecode.com/hg/index.html>

   * ASE: <https://wiki.fysik.dtu.dk/ase/>

   * boostmpi: <http://documen.tician.de/boostmpi/>

   * Calibre: <http://calibre-ebook.com/user_manual/>

   * CodePy: <http://documen.tician.de/codepy/>

   * Cython: <http://docs.cython.org/>

   * C\C++ Python language binding project:
     <http://language-binding.net/index.html>

   * Cormoran: <http://cormoran.nhopkg.org/docs/>

   * Director: <http://packages.python.org/director/>

   * Dirigible: <http://www.projectdirigible.com/documentation/>

   * Elemental:
     <http://elemental.googlecode.com/hg/doc/build/html/index.html>

   * F2py: <http://f2py.sourceforge.net/docs/>

   * GeoDjango: <http://geodjango.org/docs/>

   * Genomedata:
     <http://noble.gs.washington.edu/proj/genomedata/doc/1.2.2/genomedata.html>

   * gevent: <http://www.gevent.org/>

   * Google Wave API:
     <http://wave-robot-python-client.googlecode.com/svn/trunk/pydocs/index.html>

   * GSL Shell: <http://www.nongnu.org/gsl-shell/>

   * Heapkeeper: <http://heapkeeper.org/>

   * Hands-on Python Tutorial:
     <http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/>

   * Hedge: <http://documen.tician.de/hedge/>

   * Kaa: <http://doc.freevo.org/api/kaa/>

   * Leo: <http://webpages.charter.net/edreamleo/front.html>

   * Lino: <http://lino.saffre-rumma.net/>

   * MeshPy: <http://documen.tician.de/meshpy/>

   * mpmath:
     <http://mpmath.googlecode.com/svn/trunk/doc/build/index.html>

   * OpenEXR: <http://excamera.com/articles/26/doc/index.html>

   * OpenGDA: <http://www.opengda.org/gdadoc/html/>

   * openWNS: <http://docs.openwns.org/>

   * Paste: <http://pythonpaste.org/script/>

   * Paver: <http://paver.github.com/paver/>

   * Pyccuracy: <https://github.com/heynemann/pyccuracy/wiki/>

   * PyCuda: <http://documen.tician.de/pycuda/>

   * Pyevolve: <http://pyevolve.sourceforge.net/>

   * Pylo: <http://documen.tician.de/pylo/>

   * PyMQI: <http://packages.python.org/pymqi/>

   * PyPubSub: <http://pubsub.sourceforge.net/>

   * pyrticle: <http://documen.tician.de/pyrticle/>

   * Python: <http://docs.python.org/>

   * python-apt: <http://apt.alioth.debian.org/python-apt-doc/>

   * PyUblas: <http://documen.tician.de/pyublas/>

   * Quex: <http://quex.sourceforge.net/doc/html/main.html>

   * Scapy: <http://www.secdev.org/projects/scapy/doc/>

   * Segway:
     <http://noble.gs.washington.edu/proj/segway/doc/1.1.0/segway.html>

   * SimPy: <http://simpy.sourceforge.net/SimPyDocs/index.html>

   * SymPy: <http://docs.sympy.org/>

   * WTForms: <http://wtforms.simplecodes.com/docs/>

   * z3c: <http://docs.carduner.net/z3c-tutorial/>


File: sphinx.info,  Node: Documentation using a customized version of the default theme,  Next: Documentation using the sphinxdoc theme,  Prev: Documentation using the default theme,  Up: Projects using Sphinx

19.2 Documentation using a customized version of the default theme
==================================================================

   * Advanced Generic Widgets:
     <http://xoomer.virgilio.it/infinity77/AGW_Docs/index.html>

   * Bazaar: <http://doc.bazaar.canonical.com/en/>

   * Chaco: <http://code.enthought.com/projects/chaco/docs/html/>

   * Djagios: <http://djagios.org/>

   * GetFEM++: <http://home.gna.org/getfem/>

   * Google or-tools:
     <https://or-tools.googlecode.com/svn/trunk/documentation/user_manual/index.html>

   * GPAW: <https://wiki.fysik.dtu.dk/gpaw/>

   * Grok: <http://grok.zope.org/doc/current/>

   * IFM: <http://fluffybunny.memebot.com/ifm-docs/index.html>

   * LEPL: <http://www.acooke.org/lepl/>

   * Mayavi:
     <http://code.enthought.com/projects/mayavi/docs/development/html/mayavi>

   * NOC: <http://redmine.nocproject.org/projects/noc>

   * NumPy: <http://docs.scipy.org/doc/numpy/reference/>

   * Peach^3: <http://peach3.nl/doc/latest/userdoc/>

   * PyLit: <http://pylit.berlios.de/>

   * Sage: <http://sagemath.org/doc/>

   * SciPy: <http://docs.scipy.org/doc/scipy/reference/>

   * simuPOP:
     <http://simupop.sourceforge.net/manual_release/build/userGuide.html>

   * Sprox: <http://sprox.org/>

   * TurboGears: <http://turbogears.org/2.0/docs/>

   * Zentyal: <http://doc.zentyal.org/>

   * Zope: <http://docs.zope.org/zope2/index.html>

   * zc.async: <http://packages.python.org/zc.async/1.5.0/>


File: sphinx.info,  Node: Documentation using the sphinxdoc theme,  Next: Documentation using another builtin theme,  Prev: Documentation using a customized version of the default theme,  Up: Projects using Sphinx

19.3 Documentation using the sphinxdoc theme
============================================

   * Fityk: <http://fityk.nieto.pl/>

   * MapServer: <http://mapserver.org/>

   * Matplotlib: <http://matplotlib.sourceforge.net/>

   * Music21: <http://mit.edu/music21/doc/html/contents.html>

   * MyHDL: <http://www.myhdl.org/doc/0.6/>

   * NetworkX: <http://networkx.lanl.gov/>

   * Pweave: <http://mpastell.com/pweave/>

   * Pyre: <http://docs.danse.us/pyre/sphinx/>

   * Pysparse: <http://pysparse.sourceforge.net/>

   * PyTango:
     <http://www.tango-controls.org/static/PyTango/latest/doc/html/index.html>

   * Reteisi: <http://www.reteisi.org/contents.html>

   * Satchmo: <http://www.satchmoproject.com/docs/dev/>

   * Sphinx: <http://sphinx-doc.org/>

   * Sqlkit: <http://sqlkit.argolinux.org/>

   * Tau:
     <http://www.tango-controls.org/static/tau/latest/doc/html/index.html>

   * Total Open Station: <http://tops.berlios.de/>

   * Turbulenz: <http://docs.turbulenz.com/>

   * WebFaction: <http://docs.webfaction.com/>


File: sphinx.info,  Node: Documentation using another builtin theme,  Next: Documentation using a custom theme/integrated in a site,  Prev: Documentation using the sphinxdoc theme,  Up: Projects using Sphinx

19.4 Documentation using another builtin theme
==============================================

   * C/C++ Development with Eclipse: <http://eclipsebook.in/> (agogo)

   * Distribute: <http://packages.python.org/distribute/> (nature)

   * Jinja: <http://jinja.pocoo.org/> (scrolls)

   * jsFiddle: <http://doc.jsfiddle.net/> (nature)

   * pip: <http://pip.openplans.org/> (nature)

   * Programmieren mit PyGTK und Glade (German):
     <http://www.florian-diesch.de/doc/python-und-glade/online/> (agogo)

   * Spring Python:
     <http://springpython.webfactional.com/current/sphinx/index.html>
     (nature)

   * sqlparse:
     <http://python-sqlparse.googlecode.com/svn/docs/api/index.html>
     (agogo)

   * Sylli: <http://sylli.sourceforge.net/> (nature)

   * libLAS: <http://liblas.org/> (nature)

   * Valence: <http://docs.valence.desire2learn.com/> (haiku)


File: sphinx.info,  Node: Documentation using a custom theme/integrated in a site,  Next: Homepages and other non-documentation sites,  Prev: Documentation using another builtin theme,  Up: Projects using Sphinx

19.5 Documentation using a custom theme/integrated in a site
============================================================

   * Blender: <http://www.blender.org/documentation/250PythonDoc/>

   * Blinker: <http://discorporate.us/projects/Blinker/docs/>

   * Classy: <http://classy.pocoo.org/>

   * DEAP: <http://deap.gel.ulaval.ca/doc/0.8/index.html>

   * Django: <http://docs.djangoproject.com/>

   * e-cidadania: <http://e-cidadania.readthedocs.org/en/latest/>

   * Flask: <http://flask.pocoo.org/docs/>

   * Flask-OpenID: <http://packages.python.org/Flask-OpenID/>

   * Gameduino: <http://excamera.com/sphinx/gameduino/>

   * GeoServer: <http://docs.geoserver.org/>

   * Glashammer: <http://glashammer.org/>

   * Istihza (Turkish Python documentation project):
     <http://www.istihza.com/py2/icindekiler_python.html>

   * MathJax: <http://docs.mathjax.org/en/latest/>

   * MirrorBrain: <http://mirrorbrain.org/docs/>

   * nose: <http://somethingaboutorange.com/mrl/projects/nose/>

   * ObjectListView: <http://objectlistview.sourceforge.net/python>

   * Open ERP: <http://doc.openerp.com/>

   * OpenCV: <http://docs.opencv.org/>

   * OpenLayers: <http://docs.openlayers.org/>

   * PyEphem: <http://rhodesmill.org/pyephem/>

   * German Plone 4.0 user manual:
     <http://www.hasecke.com/plone-benutzerhandbuch/4.0/>

   * PSI4: <http://sirius.chem.vt.edu/psi4manual/latest/index.html>

   * Pylons: <http://pylonshq.com/docs/en/0.9.7/>

   * PyMOTW: <http://www.doughellmann.com/PyMOTW/>

   * pypol: <http://pypol.altervista.org/> (celery)

   * qooxdoo: <http://manual.qooxdoo.org/current>

   * Roundup: <http://www.roundup-tracker.org/>

   * Selenium: <http://seleniumhq.org/docs/>

   * Self: <http://selflanguage.org/>

   * Tablib: <http://tablib.org/>

   * SQLAlchemy: <http://www.sqlalchemy.org/docs/>

   * tinyTiM: <http://tinytim.sourceforge.net/docs/2.0/>

   * tipfy: <http://www.tipfy.org/docs/>

   * Ubuntu packaging guide:
     <http://developer.ubuntu.com/packaging/html/>

   * Werkzeug: <http://werkzeug.pocoo.org/docs/>

   * WFront: <http://discorporate.us/projects/WFront/>


File: sphinx.info,  Node: Homepages and other non-documentation sites,  Next: Books produced using Sphinx,  Prev: Documentation using a custom theme/integrated in a site,  Up: Projects using Sphinx

19.6 Homepages and other non-documentation sites
================================================

   * Applied Mathematics at the Stellenbosch University:
     <http://dip.sun.ac.za/>

   * A personal page: <http://www.dehlia.in/>

   * Benoit Boissinot: <http://bboissin.appspot.com/>

   * lunarsite: <http://lunaryorn.de/>

   * Red Hot Chili Python: <http://redhotchilipython.com/>

   * The Wine Cellar Book: <http://www.thewinecellarbook.com/doc/en/>

   * VOR: <http://www.vor-cycling.be/>


File: sphinx.info,  Node: Books produced using Sphinx,  Prev: Homepages and other non-documentation sites,  Up: Projects using Sphinx

19.7 Books produced using Sphinx
================================

   * "The `repoze.bfg' Web Application Framework":
     <http://www.amazon.com/repoze-bfg-Web-Application-Framework-Version/dp/0615345379>

   * A Theoretical Physics Reference book:
     <http://theoretical-physics.net/>

   * "Simple and Steady Way of Learning for Software Engineering" (in
     Japanese): <http://www.amazon.co.jp/dp/477414259X/>

   * "Expert Python Programming" (Japanese translation):
     <http://www.amazon.co.jp/dp/4048686291/>

   * "Pomodoro Technique Illustrated" (Japanese translation):
     <http://www.amazon.co.jp/dp/4048689525/>


File: sphinx.info,  Node: Python Module Index,  Next: Index,  Prev: Projects using Sphinx,  Up: Top

Python Module Index
*******************

* Menu:

* sphinx.application: 0. Application class and extensibility interface.
* sphinx.builders: 1. Available built-in builder classes.
* sphinx.builders.changes: 2.
* sphinx.builders.devhelp: 3.
* sphinx.builders.epub: 4.
* sphinx.builders.gettext: 5.
* sphinx.builders.html: 6.
* sphinx.builders.htmlhelp: 7.
* sphinx.builders.latex: 8.
* sphinx.builders.linkcheck: 9.
* sphinx.builders.manpage: a.
* sphinx.builders.qthelp: b.
* sphinx.builders.texinfo: c.
* sphinx.builders.text: d.
* sphinx.builders.xml: e.
* conf: f. Build configuration file.
* sphinx.domains: 10.
* sphinx.ext.autodoc: 11. Include documentation from docstrings.
* sphinx.ext.autosummary: 12. Generate autodoc summaries
* sphinx.ext.coverage: 13. Check Python modules and C API for coverage in the
                        documentation.
* sphinx.ext.doctest: 14. Test snippets in the documentation.
* sphinx.ext.extlinks: 15. Allow inserting external links with common base URLs
                        easily.
* sphinx.ext.graphviz: 16. Support for Graphviz graphs.
* sphinx.ext.ifconfig: 17. Include documentation content based on configuration
                        values.
* sphinx.ext.inheritance_diagram: 18. Support for displaying inheritance diagrams
                                  via graphviz.
* sphinx.ext.intersphinx: 19. Link to other Sphinx documentation.
* sphinx.ext.jsmath: 1a. Render math using JavaScript via JSMath.
* sphinx.ext.linkcode: 1b. Add external links to source code.
* sphinx.ext.mathbase: 1c. Common math support for pngmath and mathjax / jsmath.
* sphinx.ext.mathjax: 1d. Render math using JavaScript via MathJax.
* sphinx.ext.oldcmarkup: 1e. Allow further use of the pre-domain C markup
* sphinx.ext.pngmath: 1f. Render math as PNG images.
* sphinx.ext.refcounting: 20. Keep track of reference counting behavior.
* sphinx.ext.todo: 21. Allow inserting todo items into documents.
* sphinx.ext.viewcode: 22. Add links to a highlighted version of the source code.


File: sphinx.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* $.getJSON() ($ method):                The JavaScript Domain.
                                                              (line  29)
* abbr (role):                           Other semantic markup.
                                                              (line   9)
* accept_comment() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line 102)
* add_autodoc_attrgetter() (sphinx.application.Sphinx method): Extension API.
                                                              (line 278)
* add_autodocumenter() (sphinx.application.Sphinx method): Extension API.
                                                              (line 269)
* add_builder() (sphinx.application.Sphinx method): Extension API.
                                                              (line  15)
* add_comment() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  26)
* add_comment() (sphinx.websupport.WebSupport method): Methods.
                                                              (line 103)
* add_config_value() (sphinx.application.Sphinx method): Extension API.
                                                              (line  19)
* add_crossref_type() (sphinx.application.Sphinx method): Extension API.
                                                              (line 215)
* add_directive() (sphinx.application.Sphinx method): Extension API.
                                                              (line  95)
* add_directive_to_domain() (sphinx.application.Sphinx method): Extension API.
                                                              (line 130)
* add_document() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  40)
* add_domain() (sphinx.application.Sphinx method): Extension API.
                                                              (line  45)
* add_event() (sphinx.application.Sphinx method): Extension API.
                                                              (line  64)
* add_function_parentheses; configuration value: Project information.
                                                              (line  54)
* add_generic_role() (sphinx.application.Sphinx method): Extension API.
                                                              (line 150)
* add_index_to_domain() (sphinx.application.Sphinx method): Extension API.
                                                              (line  58)
* add_javascript() (sphinx.application.Sphinx method): Extension API.
                                                              (line 246)
* add_lexer() (sphinx.application.Sphinx method): Extension API.
                                                              (line 263)
* add_module_names; configuration value: Project information. (line  60)
* add_node() (sphinx.application.Sphinx method): Extension API.
                                                              (line  68)
* add_node() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  10)
* add_object_type() (sphinx.application.Sphinx method): Extension API.
                                                              (line 156)
* add_role() (sphinx.application.Sphinx method): Extension API.
                                                              (line 139)
* add_role_to_domain() (sphinx.application.Sphinx method): Extension API.
                                                              (line 144)
* add_search_language() (sphinx.application.Sphinx method): Extension API.
                                                              (line 287)
* add_stylesheet() (sphinx.application.Sphinx method): Extension API.
                                                              (line 255)
* add_transform() (sphinx.application.Sphinx method): Extension API.
                                                              (line 241)
* array<T>;;operator[] (C++ function):   The C++ Domain.      (line  54)
* attributes (built-in variable):        Customizing templates.
                                                              (line  74)
* autoattribute (directive):             sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 196)
* autoclass (directive):                 sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line  32)
* autoclass_content; configuration value: sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 251)
* autodata (directive):                  sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 196)
* autodoc-process-docstring; event:      Docstring preprocessing.
                                                              (line   8)
* autodoc-process-signature; event:      Docstring preprocessing.
                                                              (line  37)
* autodoc-skip-member; event:            Skipping members.    (line  10)
* autodoc_default_flags; configuration value: sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 284)
* autodoc_docstring_signature; configuration value: sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 304)
* autodoc_member_order; configuration value: sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 271)
* autoexception (directive):             sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line  32)
* autofunction (directive):              sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 196)
* automatic; documentation:              sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line   6)
* automatic; linking:                    sphinx ext intersphinx -- Link to other projects' documentation.
                                                              (line   6)
* automatic; testing:                    sphinx ext doctest -- Test snippets in the documentation.
                                                              (line   6)
* automethod (directive):                sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line 196)
* automodule (directive):                sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line  32)
* autosummary (directive):               sphinx ext autosummary -- Generate autodoc summaries.
                                                              (line  28)
* autosummary_generate; configuration value: Generating stub pages automatically.
                                                              (line   9)
* bar (directive):                       The reStructuredText domain.
                                                              (line  27)
* BaseSearch (class in sphinx.websupport.search): Search Adapters.
                                                              (line  18)
* between() (in module sphinx.ext.autodoc): Docstring preprocessing.
                                                              (line  88)
* build() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  29)
* build() (sphinx.websupport.WebSupport method): Methods.     (line   6)
* build-finished; event:                 Sphinx core events.  (line 118)
* build_all() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  20)
* build_specific() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  23)
* build_update() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  26)
* builder:                               Glossary<2>.         (line   6)
* builder (built-in variable):           Global Variables.    (line  10)
* Builder (class in sphinx.builders):    Writing new builders.
                                                              (line   8)
* builder-inited; event:                 Sphinx core events.  (line   9)
* c;data (role):                         Cross-referencing C constructs.
                                                              (line   9)
* c;func (role):                         Cross-referencing C constructs.
                                                              (line  12)
* c;function (directive):                The C Domain.        (line   8)
* c;macro (directive):                   The C Domain.        (line  31)
* c;macro (role):                        Cross-referencing C constructs.
                                                              (line  16)
* c;member (directive):                  The C Domain.        (line  21)
* c;type (directive):                    The C Domain.        (line  38)
* c;type (role):                         Cross-referencing C constructs.
                                                              (line  19)
* c;var (directive):                     The C Domain.        (line  42)
* centered (directive):                  Paragraph-level markup.
                                                              (line 104)
* changes; in version:                   Paragraph-level markup.
                                                              (line   6)
* ChangesBuilder (class in sphinx.builders.changes): Available builders.
                                                              (line 228)
* CheckExternalLinksBuilder (class in sphinx.builders.linkcheck): Available builders.
                                                              (line 236)
* class (built-in variable):             Customizing templates.
                                                              (line  46)
* classes (built-in variable):           Customizing templates.
                                                              (line  62)
* clear_doc() (sphinx.domains.Domain method): Domain API.     (line  30)
* code; examples:                        Showing code examples.
                                                              (line   6)
* codeauthor (directive):                Meta-information markup.
                                                              (line  19)
* command (role):                        Other semantic markup.
                                                              (line  18)
* conf (module):                         The build configuration file.
                                                              (line   6)
* configuration directory:               Glossary<2>.         (line  14)
* connect() (sphinx.application.Sphinx method): Extension API.
                                                              (line 296)
* copyright (built-in variable):         Global Variables.    (line  13)
* copyright; configuration value:        Project information. (line   9)
* coverage_c_path; configuration value:  sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  24)
* coverage_c_regexes; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  26)
* coverage_ignore_c_items; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  28)
* coverage_ignore_classes; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  22)
* coverage_ignore_functions; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  20)
* coverage_ignore_modules; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  18)
* coverage_skip_undoc_in_source; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  35)
* coverage_write_headline; configuration value: sphinx ext coverage -- Collect doc coverage stats.
                                                              (line  30)
* CoverageBuilder (class in sphinx.ext.coverage): sphinx ext coverage -- Collect doc coverage stats.
                                                              (line   9)
* cpp;class (directive):                 The C++ Domain.      (line  10)
* cpp;class (role):                      The C++ Domain.      (line  74)
* cpp;func (role):                       The C++ Domain.      (line  74)
* cpp;function (directive):              The C++ Domain.      (line  10)
* cpp;member (directive):                The C++ Domain.      (line  10)
* cpp;member (role):                     The C++ Domain.      (line  74)
* cpp;namespace (directive):             The C++ Domain.      (line  70)
* cpp;type (directive):                  The C++ Domain.      (line  10)
* cpp;type (role):                       The C++ Domain.      (line  74)
* css_files (built-in variable):         Configuration Variables.
                                                              (line  32)
* cut_lines() (in module sphinx.ext.autodoc): Docstring preprocessing.
                                                              (line  76)
* dangling_warnings (sphinx.domains.Domain attribute): Domain API.
                                                              (line  94)
* data_version (sphinx.domains.Domain attribute): Domain API. (line  97)
* default-domain (directive):            Basic Markup.        (line  45)
* default; domain:                       General configuration.
                                                              (line 131)
* default; role:                         General configuration.
                                                              (line 142)
* default_role; configuration value:     General configuration.
                                                              (line 141)
* delete_comment() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  51)
* deprecated (directive):                Paragraph-level markup.
                                                              (line  55)
* describe (directive):                  The Standard Domain. (line  65)
* DevhelpBuilder (class in sphinx.builders.devhelp): Available builders.
                                                              (line  58)
* dfn (role):                            Other semantic markup.
                                                              (line  21)
* digraph (directive):                   sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line  51)
* directive:                             Glossary<2>.         (line  19)
* directive() (sphinx.domains.Domain method): Domain API.     (line  34)
* directives (sphinx.domains.Domain attribute): Domain API.   (line 100)
* DirectoryHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line  21)
* disconnect() (sphinx.application.Sphinx method): Extension API.
                                                              (line 304)
* doc (role):                            Cross-referencing documents.
                                                              (line  10)
* docstitle (built-in variable):         Global Variables.    (line  16)
* docstring:                             sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line   6)
* doctest:                               sphinx ext doctest -- Test snippets in the documentation.
                                                              (line   6)
* doctest (directive):                   sphinx ext doctest -- Test snippets in the documentation.
                                                              (line  49)
* doctest_global_cleanup; configuration value: sphinx ext doctest -- Test snippets in the documentation.
                                                              (line 184)
* doctest_global_setup; configuration value: sphinx ext doctest -- Test snippets in the documentation.
                                                              (line 176)
* doctest_path; configuration value:     sphinx ext doctest -- Test snippets in the documentation.
                                                              (line 172)
* doctest_test_doctest_blocks; configuration value: sphinx ext doctest -- Test snippets in the documentation.
                                                              (line 192)
* doctree-read; event:                   Sphinx core events.  (line  46)
* doctree-resolved; event:               Sphinx core events.  (line  73)
* document name:                         Glossary<2>.         (line  32)
* domain:                                Glossary<2>.         (line  46)
* Domain (class in sphinx.domains):      Domain API.          (line   6)
* download (role):                       Referencing downloadable files.
                                                              (line   8)
* embedded (built-in variable):          Global Variables.    (line  20)
* emit() (sphinx.application.Sphinx method): Extension API.   (line 307)
* emit_firstresult() (sphinx.application.Sphinx method): Extension API.
                                                              (line 312)
* enumerate() (built-in function):       Documenting objects. (line  22)
* env-get-outdated; event:               Sphinx core events.  (line  13)
* env-purge-doc; event:                  Sphinx core events.  (line  21)
* env-updated; event:                    Sphinx core events.  (line  82)
* environment:                           Glossary<2>.         (line  60)
* envvar (directive):                    The Standard Domain. (line  28)
* envvar (role):                         Cross-referencing other items of interest.
                                                              (line   9)
* epub_author; configuration value:      Options for epub output.
                                                              (line  32)
* epub_basename; configuration value:    Options for epub output.
                                                              (line  11)
* epub_copyright; configuration value:   Options for epub output.
                                                              (line  46)
* epub_cover; configuration value:       Options for epub output.
                                                              (line  68)
* epub_exclude_files; configuration value: Options for epub output.
                                                              (line 116)
* epub_fix_images; configuration value:  Options for epub output.
                                                              (line 134)
* epub_guide; configuration value:       Options for epub output.
                                                              (line  84)
* epub_identifier; configuration value:  Options for epub output.
                                                              (line  51)
* epub_language; configuration value:    Options for epub output.
                                                              (line  36)
* epub_max_image_width; configuration value: Options for epub output.
                                                              (line 144)
* epub_post_files; configuration value:  Options for epub output.
                                                              (line 109)
* epub_pre_files; configuration value:   Options for epub output.
                                                              (line  97)
* epub_publisher; configuration value:   Options for epub output.
                                                              (line  41)
* epub_scheme; configuration value:      Options for epub output.
                                                              (line  57)
* epub_theme; configuration value:       Options for epub output.
                                                              (line  15)
* epub_theme_options; configuration value: Options for epub output.
                                                              (line  21)
* epub_title; configuration value:       Options for epub output.
                                                              (line  28)
* epub_tocdepth; configuration value:    Options for epub output.
                                                              (line 121)
* epub_tocdup; configuration value:      Options for epub output.
                                                              (line 127)
* epub_uid; configuration value:         Options for epub output.
                                                              (line  63)
* EpubBuilder (class in sphinx.builders.epub): Available builders.
                                                              (line  65)
* eq (role):                             Math support in Sphinx.
                                                              (line  90)
* exceptions (built-in variable):        Customizing templates.
                                                              (line  66)
* exclude_dirnames; configuration value: General configuration.
                                                              (line  88)
* exclude_patterns; configuration value: General configuration.
                                                              (line  44)
* exclude_trees; configuration value:    General configuration.
                                                              (line  77)
* ExtensionError:                        Extension API.       (line 325)
* extensions; configuration value:       General configuration.
                                                              (line   6)
* extlinks; configuration value:         sphinx ext extlinks -- Markup to shorten external links.
                                                              (line  25)
* extract_context() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  85)
* favicon (built-in variable):           Global Variables.    (line  26)
* feed() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  25)
* file (role):                           Other semantic markup.
                                                              (line  25)
* file_suffix (built-in variable):       Global Variables.    (line  29)
* finish() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  58)
* finish_indexing() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  20)
* foo (C++ function):                    The C++ Domain.      (line  61)
* foo (directive):                       The reStructuredText domain.
                                                              (line  24)
* foo (role):                            The reStructuredText domain.
                                                              (line  39)
* fullname (built-in variable):          Customizing templates.
                                                              (line  39)
* functions (built-in variable):         Customizing templates.
                                                              (line  57)
* generate() (sphinx.domains.Index method): Domain API.       (line 155)
* get_data() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  67)
* get_data() (sphinx.websupport.WebSupport method): Methods.  (line  60)
* get_document() (sphinx.websupport.WebSupport method): Methods.
                                                              (line  17)
* get_objects() (sphinx.domains.Domain method): Domain API.   (line  39)
* get_outdated_docs() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  40)
* get_relative_uri() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  14)
* get_search_results() (sphinx.websupport.WebSupport method): Methods.
                                                              (line 167)
* get_target_uri() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  48)
* get_type_name() (sphinx.domains.Domain method): Domain API. (line  67)
* gettext_compact; configuration value:  Options for internationalization.
                                                              (line 100)
* global; substitutions:                 General configuration.
                                                              (line 114)
* globalcontext_filename (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 173)
* glossary (directive):                  Glossary.            (line   6)
* graph (directive):                     sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line  37)
* graphviz (directive):                  sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line  13)
* graphviz_dot; configuration value:     sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line  81)
* graphviz_dot_args; configuration value: sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line  95)
* graphviz_output_format; configuration value: sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line 101)
* guilabel (role):                       Other semantic markup.
                                                              (line  34)
* handle_query() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  69)
* has_source (built-in variable):        Global Variables.    (line  34)
* hasdoc() (built-in function):          Helper Functions.    (line  17)
* highlight_language; configuration value: Project information.
                                                              (line  39)
* hlist (directive):                     Paragraph-level markup.
                                                              (line 114)
* html-collect-pages; event:             Sphinx core events.  (line  89)
* html-page-context; event:              Sphinx core events.  (line  96)
* html_add_permalinks; configuration value: Options for HTML output.
                                                              (line 100)
* html_additional_pages; configuration value: Options for HTML output.
                                                              (line 174)
* html_compact_lists; configuration value: Options for HTML output.
                                                              (line 278)
* html_context; configuration value:     Options for HTML output.
                                                              (line  52)
* html_copy_source; configuration value: Options for HTML output.
                                                              (line 217)
* html_domain_indices; configuration value: Options for HTML output.
                                                              (line 187)
* html_favicon; configuration value:     Options for HTML output.
                                                              (line  68)
* html_file_suffix; configuration value: Options for HTML output.
                                                              (line 240)
* html_last_updated_fmt; configuration value: Options for HTML output.
                                                              (line  90)
* html_link_suffix; configuration value: Options for HTML output.
                                                              (line 246)
* html_logo; configuration value:        Options for HTML output.
                                                              (line  59)
* html_output_encoding; configuration value: Options for HTML output.
                                                              (line 271)
* html_search_language; configuration value: Options for HTML output.
                                                              (line 291)
* html_search_options; configuration value: Options for HTML output.
                                                              (line 305)
* html_search_scorer; configuration value: Options for HTML output.
                                                              (line 326)
* html_secnumber_suffix; configuration value: Options for HTML output.
                                                              (line 285)
* html_short_title; configuration value: Options for HTML output.
                                                              (line  45)
* html_show_copyright; configuration value: Options for HTML output.
                                                              (line 259)
* html_show_sourcelink; configuration value: Options for HTML output.
                                                              (line 225)
* html_show_sphinx; configuration value: Options for HTML output.
                                                              (line 265)
* html_sidebars; configuration value:    Options for HTML output.
                                                              (line 114)
* html_split_index; configuration value: Options for HTML output.
                                                              (line 210)
* html_static_path; configuration value: Options for HTML output.
                                                              (line  77)
* html_style; configuration value:       Options for HTML output.
                                                              (line  29)
* html_theme; configuration value:       Options for HTML output.
                                                              (line   9)
* html_theme_options; configuration value: Options for HTML output.
                                                              (line  15)
* html_theme_path; configuration value:  Options for HTML output.
                                                              (line  22)
* html_title; configuration value:       Options for HTML output.
                                                              (line  37)
* html_translator_class; configuration value: Options for HTML output.
                                                              (line 253)
* html_use_index; configuration value:   Options for HTML output.
                                                              (line 205)
* html_use_modindex; configuration value: Options for HTML output.
                                                              (line 199)
* html_use_opensearch; configuration value: Options for HTML output.
                                                              (line 232)
* html_use_smartypants; configuration value: Options for HTML output.
                                                              (line  96)
* htmlhelp_basename; configuration value: Options for HTML output.
                                                              (line 333)
* HTMLHelpBuilder (class in sphinx.builders.htmlhelp): Available builders.
                                                              (line  44)
* ifconfig (directive):                  sphinx ext ifconfig -- Include content based on configuration.
                                                              (line   8)
* implementation (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 162)
* Index (class in sphinx.domains):       Domain API.          (line 138)
* index (directive):                     Index-generating markup.
                                                              (line  15)
* index (role):                          Index-generating markup.
                                                              (line  93)
* indices (sphinx.domains.Domain attribute): Domain API.      (line 103)
* inheritance-diagram (directive):       sphinx ext inheritance_diagram -- Include inheritance diagrams.
                                                              (line  13)
* inheritance_edge_attrs; configuration value: sphinx ext inheritance_diagram -- Include inheritance diagrams.
                                                              (line  58)
* inheritance_graph_attrs; configuration value: sphinx ext inheritance_diagram -- Include inheritance diagrams.
                                                              (line  38)
* inheritance_node_attrs; configuration value: sphinx ext inheritance_diagram -- Include inheritance diagrams.
                                                              (line  48)
* init() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  10)
* init() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  36)
* init_indexing() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  12)
* initial_data (sphinx.domains.Domain attribute): Domain API. (line 106)
* intersphinx_cache_limit; configuration value: sphinx ext intersphinx -- Link to other projects' documentation.
                                                              (line 108)
* intersphinx_mapping; configuration value: sphinx ext intersphinx -- Link to other projects' documentation.
                                                              (line  45)
* js;attr (role):                        The JavaScript Domain.
                                                              (line  71)
* js;attribute (directive):              The JavaScript Domain.
                                                              (line  67)
* js;class (directive):                  The JavaScript Domain.
                                                              (line  45)
* js;class (role):                       The JavaScript Domain.
                                                              (line  71)
* js;data (directive):                   The JavaScript Domain.
                                                              (line  64)
* js;data (role):                        The JavaScript Domain.
                                                              (line  71)
* js;func (role):                        The JavaScript Domain.
                                                              (line  71)
* js;function (directive):               The JavaScript Domain.
                                                              (line   8)
* jsmath_path; configuration value:      sphinx ext jsmath -- Render math via JavaScript.
                                                              (line   9)
* JSONHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line 200)
* kbd (role):                            Other semantic markup.
                                                              (line  48)
* keep_warnings; configuration value:    General configuration.
                                                              (line 153)
* keyword (role):                        Cross-referencing other items of interest.
                                                              (line  18)
* label (sphinx.domains.Domain attribute): Domain API.        (line 109)
* language; configuration value:         Options for internationalization.
                                                              (line   9)
* last_updated (built-in variable):      Global Variables.    (line  38)
* latex_additional_files; configuration value: Options for LaTeX output.
                                                              (line 187)
* latex_appendices; configuration value: Options for LaTeX output.
                                                              (line  58)
* latex_docclass; configuration value:   Options for LaTeX output.
                                                              (line 179)
* latex_documents; configuration value:  Options for LaTeX output.
                                                              (line   8)
* latex_domain_indices; configuration value: Options for LaTeX output.
                                                              (line  61)
* latex_elements; configuration value:   Options for LaTeX output.
                                                              (line 100)
* latex_font_size; configuration value:  Options for LaTeX output.
                                                              (line 213)
* latex_logo; configuration value:       Options for LaTeX output.
                                                              (line  47)
* latex_paper_size; configuration value: Options for LaTeX output.
                                                              (line 206)
* latex_preamble; configuration value:   Options for LaTeX output.
                                                              (line 200)
* latex_show_pagerefs; configuration value: Options for LaTeX output.
                                                              (line  77)
* latex_show_urls; configuration value:  Options for LaTeX output.
                                                              (line  83)
* latex_use_modindex; configuration value: Options for LaTeX output.
                                                              (line  71)
* latex_use_parts; configuration value:  Options for LaTeX output.
                                                              (line  52)
* LaTeXBuilder (class in sphinx.builders.latex): Available builders.
                                                              (line  80)
* linkcheck_anchors; configuration value: Options for the linkcheck builder.
                                                              (line  27)
* linkcheck_ignore; configuration value: Options for the linkcheck builder.
                                                              (line   6)
* linkcheck_timeout; configuration value: Options for the linkcheck builder.
                                                              (line  14)
* linkcheck_workers; configuration value: Options for the linkcheck builder.
                                                              (line  21)
* linkcode_resolve; configuration value: sphinx ext linkcode -- Add external links to source code.
                                                              (line  18)
* literalinclude (directive):            Includes.            (line   6)
* locale_dirs; configuration value:      Options for internationalization.
                                                              (line  84)
* logo (built-in variable):              Global Variables.    (line  41)
* mailheader (role):                     Other semantic markup.
                                                              (line  58)
* makevar (role):                        Other semantic markup.
                                                              (line  68)
* man_pages; configuration value:        Options for manual page output.
                                                              (line   8)
* man_show_urls; configuration value:    Options for manual page output.
                                                              (line  35)
* manpage (role):                        Other semantic markup.
                                                              (line  71)
* ManualPageBuilder (class in sphinx.builders.manpage): Available builders.
                                                              (line 115)
* master document:                       Glossary<2>.         (line  66)
* master_doc (built-in variable):        Global Variables.    (line  44)
* master_doc; configuration value:       General configuration.
                                                              (line  39)
* math (directive):                      Math support in Sphinx.
                                                              (line  38)
* math (role):                           Math support in Sphinx.
                                                              (line  31)
* mathjax_path; configuration value:     sphinx ext mathjax -- Render math via JavaScript.
                                                              (line  15)
* members (built-in variable):           Customizing templates.
                                                              (line  53)
* menuselection (role):                  Other semantic markup.
                                                              (line  75)
* MessageCatalogBuilder (class in sphinx.builders.gettext): Available builders.
                                                              (line 216)
* meta (built-in variable):              Global Variables.    (line 116)
* methods (built-in variable):           Customizing templates.
                                                              (line  70)
* mimetype (role):                       Other semantic markup.
                                                              (line  95)
* missing-reference; event:              Sphinx core events.  (line  51)
* modindex_common_prefix; configuration value: Project information.
                                                              (line  71)
* module (built-in variable):            Customizing templates.
                                                              (line  43)
* MyAnimal() (class):                    The JavaScript Domain.
                                                              (line  56)
* name (built-in variable):              Customizing templates.
                                                              (line  32)
* name (sphinx.domains.Domain attribute): Domain API.         (line 112)
* namespaced;;theclass;;method (C++ function): The C++ Domain.
                                                              (line  46)
* needs_sphinx; configuration value:     General configuration.
                                                              (line 163)
* newest_template_mtime() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  20)
* newsgroup (role):                      Other semantic markup.
                                                              (line  99)
* next (built-in variable):              Global Variables.    (line  48)
* nitpick_ignore; configuration value:   General configuration.
                                                              (line 177)
* nitpicky; configuration value:         General configuration.
                                                              (line 170)
* note:                                  Paragraph-level markup.
                                                              (line   6)
* note (directive):                      Paragraph-level markup.
                                                              (line   9)
* object:                                Glossary<2>.         (line  69)
* object (directive):                    The Standard Domain. (line  65)
* object_types (sphinx.domains.Domain attribute): Domain API. (line 115)
* objname (built-in variable):           Customizing templates.
                                                              (line  36)
* ObjType (class in sphinx.domains):     Domain API.          (line 121)
* only (directive):                      Including content based on tags.
                                                              (line   6)
* operator bool (C++ function):          The C++ Domain.      (line  58)
* option (directive):                    The Standard Domain. (line  16)
* option (role):                         Cross-referencing other items of interest.
                                                              (line  22)
* out_suffix (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 170)
* override_domain() (sphinx.application.Sphinx method): Extension API.
                                                              (line  51)
* pagename (built-in variable):          Global Variables.    (line  60)
* parents (built-in variable):           Global Variables.    (line  66)
* pathto() (built-in function):          Helper Functions.    (line   9)
* pep (role):                            Other semantic markup.
                                                              (line 123)
* PickleHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line 186)
* pngmath_add_tooltips; configuration value: sphinx ext pngmath -- Render math as PNG images.
                                                              (line  66)
* pngmath_dvipng; configuration value:   sphinx ext pngmath -- Render math as PNG images.
                                                              (line  29)
* pngmath_dvipng_args; configuration value: sphinx ext pngmath -- Render math as PNG images.
                                                              (line  46)
* pngmath_latex; configuration value:    sphinx ext pngmath -- Render math as PNG images.
                                                              (line  13)
* pngmath_latex_args; configuration value: sphinx ext pngmath -- Render math as PNG images.
                                                              (line  34)
* pngmath_latex_preamble; configuration value: sphinx ext pngmath -- Render math as PNG images.
                                                              (line  40)
* pngmath_use_preview; configuration value: sphinx ext pngmath -- Render math as PNG images.
                                                              (line  54)
* post_build() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  22)
* pre_build() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line   6)
* prepare_writing() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  54)
* prev (built-in variable):              Global Variables.    (line  70)
* primary; domain:                       General configuration.
                                                              (line 131)
* primary_domain; configuration value:   General configuration.
                                                              (line 130)
* process_doc() (sphinx.domains.Domain method): Domain API.   (line  70)
* process_vote() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  80)
* process_vote() (sphinx.websupport.WebSupport method): Methods.
                                                              (line 138)
* productionlist (directive):            Grammar production displays.
                                                              (line  13)
* program (directive):                   The Standard Domain. (line  32)
* program (role):                        Other semantic markup.
                                                              (line 102)
* project (built-in variable):           Global Variables.    (line  73)
* project; configuration value:          Project information. (line   6)
* PseudoXMLBuilder (class in sphinx.builders.xml): Available builders.
                                                              (line 253)
* py;attr (role):                        Cross-referencing Python objects.
                                                              (line  36)
* py;attribute (directive):              The Python Domain.   (line  92)
* py;class (directive):                  The Python Domain.   (line  71)
* py;class (role):                       Cross-referencing Python objects.
                                                              (line  27)
* py;classmethod (directive):            The Python Domain.   (line 109)
* py;const (role):                       Cross-referencing Python objects.
                                                              (line  23)
* py;currentmodule (directive):          The Python Domain.   (line  32)
* py;data (directive):                   The Python Domain.   (line  44)
* py;data (role):                        Cross-referencing Python objects.
                                                              (line  20)
* py;decorator (directive):              The Python Domain.   (line 115)
* py;decoratormethod (directive):        The Python Domain.   (line 144)
* py;exc (role):                         Cross-referencing Python objects.
                                                              (line  39)
* py;exception (directive):              The Python Domain.   (line  49)
* py;func (role):                        Cross-referencing Python objects.
                                                              (line  13)
* py;function (directive):               The Python Domain.   (line  53)
* py;meth (role):                        Cross-referencing Python objects.
                                                              (line  30)
* py;method (directive):                 The Python Domain.   (line  97)
* py;mod (role):                         Cross-referencing Python objects.
                                                              (line   9)
* py;module (directive):                 The Python Domain.   (line   9)
* py;obj (role):                         Cross-referencing Python objects.
                                                              (line  42)
* py;staticmethod (directive):           The Python Domain.   (line 103)
* pygments_style; configuration value:   Project information. (line  46)
* QtHelpBuilder (class in sphinx.builders.qthelp): Available builders.
                                                              (line  51)
* query() (sphinx.websupport.search.BaseSearch method): BaseSearch Methods.
                                                              (line  59)
* ref (role):                            Cross-referencing arbitrary locations.
                                                              (line   6)
* regexp (role):                         Other semantic markup.
                                                              (line 107)
* relbar() (built-in function):          Helper Functions.    (line  23)
* reldelim1 (built-in variable):         Configuration Variables.
                                                              (line   9)
* reldelim2 (built-in variable):         Configuration Variables.
                                                              (line  14)
* release (built-in variable):           Global Variables.    (line  76)
* release; configuration value:          Project information. (line  17)
* rellinks (built-in variable):          Global Variables.    (line  79)
* render() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  26)
* render_string() (sphinx.application.TemplateBridge method): The template bridge.
                                                              (line  30)
* require_sphinx() (sphinx.application.Sphinx method): Extension API.
                                                              (line 318)
* resolve_xref() (sphinx.domains.Domain method): Domain API.  (line  73)
* rfc (role):                            Other semantic markup.
                                                              (line 130)
* role:                                  Glossary<2>.         (line  74)
* role() (sphinx.domains.Domain method): Domain API.          (line  89)
* roles (sphinx.domains.Domain attribute): Domain API.        (line 118)
* rst;dir (role):                        The reStructuredText domain.
                                                              (line  43)
* rst;directive (directive):             The reStructuredText domain.
                                                              (line   9)
* rst;role (directive):                  The reStructuredText domain.
                                                              (line  30)
* rst;role (role):                       The reStructuredText domain.
                                                              (line  43)
* rst_epilog; configuration value:       General configuration.
                                                              (line 113)
* rst_prolog; configuration value:       General configuration.
                                                              (line 124)
* rubric (directive):                    Paragraph-level markup.
                                                              (line  94)
* samp (role):                           Other semantic markup.
                                                              (line 110)
* script_files (built-in variable):      Configuration Variables.
                                                              (line  24)
* searchindex_filename (sphinx.builders.html.SerializingHTMLBuilder attribute): Available builders.
                                                              (line 178)
* sectionauthor (directive):             Meta-information markup.
                                                              (line   6)
* seealso (directive):                   Paragraph-level markup.
                                                              (line  68)
* SerializingHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line 144)
* setup_extension() (sphinx.application.Sphinx method): Extension API.
                                                              (line  11)
* shorttitle (built-in variable):        Global Variables.    (line  86)
* show_authors; configuration value:     Project information. (line  66)
* show_source (built-in variable):       Global Variables.    (line  89)
* sidebar() (built-in function):         Helper Functions.    (line  20)
* SingleFileHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line  34)
* source directory:                      Glossary<2>.         (line  80)
* source-read; event:                    Sphinx core events.  (line  34)
* source_encoding; configuration value:  General configuration.
                                                              (line  32)
* source_suffix; configuration value:    General configuration.
                                                              (line  28)
* sourcecode:                            Showing code examples.
                                                              (line   6)
* sourcename (built-in variable):        Global Variables.    (line 119)
* sphinx-apidoc command line option; -A author: Invocation of sphinx-apidoc.
                                                              (line  59)
* sphinx-apidoc command line option; -d maxdepth: Invocation of sphinx-apidoc.
                                                              (line  32)
* sphinx-apidoc command line option; -f, -force: Invocation of sphinx-apidoc.
                                                              (line  21)
* sphinx-apidoc command line option; -F, -full: Invocation of sphinx-apidoc.
                                                              (line  49)
* sphinx-apidoc command line option; -H project: Invocation of sphinx-apidoc.
                                                              (line  55)
* sphinx-apidoc command line option; -l, -follow-links: Invocation of sphinx-apidoc.
                                                              (line  36)
* sphinx-apidoc command line option; -n, -dry-run: Invocation of sphinx-apidoc.
                                                              (line  25)
* sphinx-apidoc command line option; -o outputdir: Invocation of sphinx-apidoc.
                                                              (line  18)
* sphinx-apidoc command line option; -R release: Invocation of sphinx-apidoc.
                                                              (line  67)
* sphinx-apidoc command line option; -s suffix: Invocation of sphinx-apidoc.
                                                              (line  28)
* sphinx-apidoc command line option; -T, -no-toc: Invocation of sphinx-apidoc.
                                                              (line  45)
* sphinx-apidoc command line option; -V version: Invocation of sphinx-apidoc.
                                                              (line  63)
* sphinx-build command line option; -a:  Invocation of sphinx-build.
                                                              (line  70)
* sphinx-build command line option; -A name=value: Invocation of sphinx-build.
                                                              (line 119)
* sphinx-build command line option; -b buildername: Invocation of sphinx-build.
                                                              (line  17)
* sphinx-build command line option; -C:  Invocation of sphinx-build.
                                                              (line 104)
* sphinx-build command line option; -c path: Invocation of sphinx-build.
                                                              (line  95)
* sphinx-build command line option; -d path: Invocation of sphinx-build.
                                                              (line  87)
* sphinx-build command line option; -D setting=value: Invocation of sphinx-build.
                                                              (line 110)
* sphinx-build command line option; -E:  Invocation of sphinx-build.
                                                              (line  75)
* sphinx-build command line option; -h, -help, -version: Invocation of sphinx-build.
                                                              (line 165)
* sphinx-build command line option; -N:  Invocation of sphinx-build.
                                                              (line 128)
* sphinx-build command line option; -n:  Invocation of sphinx-build.
                                                              (line 124)
* sphinx-build command line option; -P:  Invocation of sphinx-build.
                                                              (line 161)
* sphinx-build command line option; -Q:  Invocation of sphinx-build.
                                                              (line 142)
* sphinx-build command line option; -q:  Invocation of sphinx-build.
                                                              (line 138)
* sphinx-build command line option; -T:  Invocation of sphinx-build.
                                                              (line 154)
* sphinx-build command line option; -t tag: Invocation of sphinx-build.
                                                              (line  81)
* sphinx-build command line option; -v:  Invocation of sphinx-build.
                                                              (line 132)
* sphinx-build command line option; -W:  Invocation of sphinx-build.
                                                              (line 150)
* sphinx-build command line option; -w file: Invocation of sphinx-build.
                                                              (line 146)
* sphinx.application (module):           Sphinx Extensions.   (line   6)
* sphinx.builders (module):              Available builders.  (line   6)
* sphinx.builders.changes (module):      Available builders.  (line 227)
* sphinx.builders.devhelp (module):      Available builders.  (line  57)
* sphinx.builders.epub (module):         Available builders.  (line  64)
* sphinx.builders.gettext (module):      Available builders.  (line 215)
* sphinx.builders.html (module):         Available builders.  (line  10)
* sphinx.builders.htmlhelp (module):     Available builders.  (line  43)
* sphinx.builders.latex (module):        Available builders.  (line  79)
* sphinx.builders.linkcheck (module):    Available builders.  (line 235)
* sphinx.builders.manpage (module):      Available builders.  (line 114)
* sphinx.builders.qthelp (module):       Available builders.  (line  50)
* sphinx.builders.texinfo (module):      Available builders.  (line 126)
* sphinx.builders.text (module):         Available builders.  (line 104)
* sphinx.builders.xml (module):          Available builders.  (line 243)
* sphinx.domains (module):               Domain API.          (line   6)
* sphinx.ext.autodoc (module):           sphinx ext autodoc -- Include documentation from docstrings.
                                                              (line   6)
* sphinx.ext.autosummary (module):       sphinx ext autosummary -- Generate autodoc summaries.
                                                              (line   6)
* sphinx.ext.coverage (module):          sphinx ext coverage -- Collect doc coverage stats.
                                                              (line   6)
* sphinx.ext.doctest (module):           sphinx ext doctest -- Test snippets in the documentation.
                                                              (line   6)
* sphinx.ext.extlinks (module):          sphinx ext extlinks -- Markup to shorten external links.
                                                              (line   6)
* sphinx.ext.graphviz (module):          sphinx ext graphviz -- Add Graphviz graphs.
                                                              (line   6)
* sphinx.ext.ifconfig (module):          sphinx ext ifconfig -- Include content based on configuration.
                                                              (line   6)
* sphinx.ext.inheritance_diagram (module): sphinx ext inheritance_diagram -- Include inheritance diagrams.
                                                              (line   6)
* sphinx.ext.intersphinx (module):       sphinx ext intersphinx -- Link to other projects' documentation.
                                                              (line   6)
* sphinx.ext.jsmath (module):            sphinx ext jsmath -- Render math via JavaScript.
                                                              (line   6)
* sphinx.ext.linkcode (module):          sphinx ext linkcode -- Add external links to source code.
                                                              (line   6)
* sphinx.ext.mathbase (module):          Math support in Sphinx.
                                                              (line   6)
* sphinx.ext.mathjax (module):           sphinx ext mathjax -- Render math via JavaScript.
                                                              (line   6)
* sphinx.ext.oldcmarkup (module):        sphinx ext oldcmarkup -- Compatibility extension for old C markup.
                                                              (line   6)
* sphinx.ext.pngmath (module):           sphinx ext pngmath -- Render math as PNG images.
                                                              (line   6)
* sphinx.ext.refcounting (module):       sphinx ext refcounting -- Keep track of reference counting behavior.
                                                              (line   6)
* sphinx.ext.todo (module):              sphinx ext todo -- Support for todo items.
                                                              (line   6)
* sphinx.ext.viewcode (module):          sphinx ext viewcode -- Add links to highlighted source code.
                                                              (line   6)
* sphinx_version (built-in variable):    Global Variables.    (line  92)
* StandaloneHTMLBuilder (class in sphinx.builders.html): Available builders.
                                                              (line  12)
* StorageBackend (class in sphinx.websupport.storage): Storage Backends.
                                                              (line  18)
* style (built-in variable):             Global Variables.    (line  95)
* table of; contents:                    The TOC tree.        (line   6)
* tabularcolumns (directive):            Tables<2>.           (line  11)
* template_bridge; configuration value:  General configuration.
                                                              (line 105)
* TemplateBridge (class in sphinx.application): The template bridge.
                                                              (line   6)
* templates_path; configuration value:   General configuration.
                                                              (line 100)
* term (role):                           Cross-referencing other items of interest.
                                                              (line  30)
* testcleanup (directive):               sphinx ext doctest -- Test snippets in the documentation.
                                                              (line  42)
* testcode (directive):                  sphinx ext doctest -- Test snippets in the documentation.
                                                              (line  84)
* testing; snippets:                     sphinx ext doctest -- Test snippets in the documentation.
                                                              (line   6)
* testoutput (directive):                sphinx ext doctest -- Test snippets in the documentation.
                                                              (line 110)
* testsetup (directive):                 sphinx ext doctest -- Test snippets in the documentation.
                                                              (line  37)
* texinfo_appendices; configuration value: Options for Texinfo output.
                                                              (line  48)
* texinfo_documents; configuration value: Options for Texinfo output.
                                                              (line   8)
* texinfo_domain_indices; configuration value: Options for Texinfo output.
                                                              (line  53)
* texinfo_elements; configuration value: Options for Texinfo output.
                                                              (line  74)
* texinfo_show_urls; configuration value: Options for Texinfo output.
                                                              (line  63)
* TexinfoBuilder (class in sphinx.builders.texinfo): Available builders.
                                                              (line 127)
* text_newlines; configuration value:    Options for text output.
                                                              (line   8)
* text_sectionchars; configuration value: Options for text output.
                                                              (line  22)
* TextBuilder (class in sphinx.builders.text): Available builders.
                                                              (line 106)
* theclass;;const_iterator (C++ type):   The C++ Domain.      (line  68)
* theclass;;name (C++ member):           The C++ Domain.      (line  64)
* title (built-in variable):             Global Variables.    (line  99)
* toc (built-in variable):               Global Variables.    (line 123)
* toctree (built-in variable):           Global Variables.    (line 127)
* toctree (directive):                   The TOC tree.        (line  15)
* today; configuration value:            Project information. (line  25)
* today_fmt; configuration value:        Project information. (line  25)
* todo (directive):                      sphinx ext todo -- Support for todo items.
                                                              (line  12)
* todo_include_todos; configuration value: sphinx ext todo -- Support for todo items.
                                                              (line  24)
* todolist (directive):                  sphinx ext todo -- Support for todo items.
                                                              (line  18)
* token (role):                          Cross-referencing other items of interest.
                                                              (line  14)
* trim_doctest_flags; configuration value: Project information.
                                                              (line  87)
* trim_footnote_reference_space; configuration value: Project information.
                                                              (line  80)
* underline (built-in variable):         Customizing templates.
                                                              (line  50)
* unused_docs; configuration value:      General configuration.
                                                              (line  69)
* update_username() (sphinx.websupport.storage.StorageBackend method): StorageBackend Methods.
                                                              (line  92)
* use_opensearch (built-in variable):    Global Variables.    (line 102)
* version (built-in variable):           Global Variables.    (line 105)
* version; configuration value:          Project information. (line  12)
* versionadded (directive):              Paragraph-level markup.
                                                              (line  31)
* versionchanged (directive):            Paragraph-level markup.
                                                              (line  50)
* warning:                               Paragraph-level markup.
                                                              (line   6)
* warning (directive):                   Paragraph-level markup.
                                                              (line  23)
* WebSupport (class in sphinx.websupport): The WebSupport Class.
                                                              (line   6)
* write_doc() (sphinx.builders.Builder method): Writing new builders.
                                                              (line  56)
* xml_pretty; configuration value:       Options for the XML builder.
                                                              (line   6)
* XMLBuilder (class in sphinx.builders.xml): Available builders.
                                                              (line 244)



Tag Table:
Node: Top356
Ref: contents doc569
Ref: 23569
Node: Introduction10901
Ref: intro introduction10997
Ref: 2410997
Ref: intro doc10997
Ref: 2510997
Ref: Introduction-Footnote-112095
Ref: Introduction-Footnote-212134
Ref: Introduction-Footnote-312171
Node: Conversion from other systems12200
Ref: intro conversion-from-other-systems12309
Ref: 2612309
Ref: Conversion from other systems-Footnote-113208
Ref: Conversion from other systems-Footnote-213253
Ref: Conversion from other systems-Footnote-313310
Ref: Conversion from other systems-Footnote-413350
Ref: Conversion from other systems-Footnote-513397
Node: Use with other systems13438
Ref: intro use-with-other-systems13569
Ref: 2713569
Node: Prerequisites13678
Ref: intro prerequisites13785
Ref: 2913785
Ref: Prerequisites-Footnote-114158
Ref: Prerequisites-Footnote-214189
Ref: Prerequisites-Footnote-314220
Node: Usage14248
Ref: intro usage14324
Ref: 2a14324
Ref: intro pygments14324
Ref: 2b14324
Node: First Steps with Sphinx14500
Ref: tutorial first-steps-with-sphinx14619
Ref: 2d14619
Ref: tutorial doc14619
Ref: 2c14619
Node: Setting up the documentation sources15086
Ref: tutorial setting-up-the-documentation-sources15218
Ref: 2e15218
Ref: Setting up the documentation sources-Footnote-116083
Node: Defining document structure16255
Ref: tutorial defining-document-structure16410
Ref: 3316410
Node: Adding content18646
Ref: tutorial adding-content18782
Ref: 3718782
Node: Running the build19448
Ref: tutorial running-the-build19576
Ref: 3b19576
Node: Documenting objects20618
Ref: tutorial documenting-objects20751
Ref: 3d20751
Ref: tutorial enumerate21402
Ref: 3e21402
Node: Basic configuration22930
Ref: tutorial basic-configuration23053
Ref: 4223053
Node: Autodoc24319
Ref: tutorial autodoc24448
Ref: 4424448
Node: More topics to be covered25630
Ref: tutorial more-topics-to-be-covered25731
Ref: 4625731
Node: Invocation of sphinx-build25962
Ref: invocation invocation26096
Ref: 3126096
Ref: invocation invocation-of-sphinx-build26096
Ref: 4726096
Ref: invocation doc26096
Ref: 4826096
Ref: invocation cmdoption-sphinx-build-b26553
Ref: 4926553
Ref: invocation cmdoption-sphinx-build-a28112
Ref: 4b28112
Ref: invocation cmdoption-sphinx-build-E28300
Ref: 4c28300
Ref: invocation cmdoption-sphinx-build-t28551
Ref: 4e28551
Ref: invocation cmdoption-sphinx-build-d28730
Ref: 5028730
Ref: invocation cmdoption-sphinx-build-c29129
Ref: 5129129
Ref: invocation cmdoption-sphinx-build-C29491
Ref: 5229491
Ref: invocation cmdoption-sphinx-build-D29619
Ref: 5329619
Ref: invocation cmdoption-sphinx-build-A30001
Ref: 5430001
Ref: invocation cmdoption-sphinx-build-n30118
Ref: 5530118
Ref: invocation cmdoption-sphinx-build-N30231
Ref: 5630231
Ref: invocation cmdoption-sphinx-build-v30340
Ref: 5730340
Ref: invocation cmdoption-sphinx-build-q30508
Ref: 5930508
Ref: invocation cmdoption-sphinx-build-Q30627
Ref: 5a30627
Ref: invocation cmdoption-sphinx-build-w30763
Ref: 5b30763
Ref: invocation cmdoption-sphinx-build-W30872
Ref: 5c30872
Ref: invocation cmdoption-sphinx-build-T31024
Ref: 5831024
Ref: invocation cmdoption-sphinx-build-P31254
Ref: 5d31254
Ref: invocation cmdoption-sphinx-build-h31391
Ref: 5e31391
Node: Makefile options31711
Ref: invocation makefile-options31790
Ref: 5f31790
Node: Invocation of sphinx-apidoc32380
Ref: invocation invocation-of-sphinx-apidoc32514
Ref: 6132514
Ref: invocation invocation-apidoc32514
Ref: 3232514
Ref: invocation cmdoption-sphinx-apidoc-o33017
Ref: 6233017
Ref: invocation cmdoption-sphinx-apidoc-f33108
Ref: 6333108
Ref: invocation cmdoption-sphinx-apidoc-n33268
Ref: 6433268
Ref: invocation cmdoption-sphinx-apidoc-s33356
Ref: 6533356
Ref: invocation cmdoption-sphinx-apidoc-d33475
Ref: 6633475
Ref: invocation cmdoption-sphinx-apidoc-l33585
Ref: 6733585
Ref: invocation cmdoption-sphinx-apidoc-T33946
Ref: 6833946
Ref: invocation cmdoption-sphinx-apidoc-F34097
Ref: 6934097
Ref: invocation cmdoption-sphinx-apidoc-H34380
Ref: 6a34380
Ref: invocation cmdoption-sphinx-apidoc-A34488
Ref: 6c34488
Ref: invocation cmdoption-sphinx-apidoc-V34599
Ref: 6e34599
Ref: invocation cmdoption-sphinx-apidoc-R34710
Ref: 7034710
Ref: Invocation of sphinx-apidoc-Footnote-134856
Node: reStructuredText Primer34919
Ref: rest rst-primer35051
Ref: 3935051
Ref: rest doc35051
Ref: 7235051
Ref: rest restructuredtext-primer35051
Ref: 7335051
Ref: reStructuredText Primer-Footnote-136095
Node: Paragraphs36143
Ref: rest paragraphs36235
Ref: 7436235
Ref: Paragraphs-Footnote-136585
Node: Inline markup36670
Ref: rest inline-markup36798
Ref: 7536798
Ref: rest inlinemarkup36798
Ref: 7636798
Ref: Inline markup-Footnote-138358
Ref: Inline markup-Footnote-238430
Ref: Inline markup-Footnote-338500
Ref: Inline markup-Footnote-438571
Ref: Inline markup-Footnote-538644
Ref: Inline markup-Footnote-638719
Node: Lists and Quote-like blocks38798
Ref: rest lists-and-quote-like-blocks38927
Ref: 7838927
Ref: Lists and Quote-like blocks-Footnote-140371
Ref: Lists and Quote-like blocks-Footnote-240458
Ref: Lists and Quote-like blocks-Footnote-340549
Ref: Lists and Quote-like blocks-Footnote-440636
Ref: Lists and Quote-like blocks-Footnote-540722
Ref: Lists and Quote-like blocks-Footnote-640808
Ref: Lists and Quote-like blocks-Footnote-740895
Ref: Lists and Quote-like blocks-Footnote-840991
Node: Source Code41080
Ref: rest source-code41202
Ref: 7941202
Ref: Source Code-Footnote-142160
Node: Tables42249
Ref: rest rst-tables42354
Ref: 7a42354
Ref: rest tables42354
Ref: 7b42354
Ref: Tables-Footnote-143444
Ref: Tables-Footnote-243530
Node: Hyperlinks43618
Ref: rest hyperlinks43720
Ref: 7c43720
Node: External links43799
Ref: rest external-links43883
Ref: 7d43883
Ref: External links-Footnote-144337
Node: Internal links44429
Ref: rest internal-links44513
Ref: 7e44513
Node: Sections44711
Ref: rest sections44822
Ref: 8044822
Ref: Sections-Footnote-145729
Node: Explicit Markup45812
Ref: rest explicit-markup45923
Ref: 8145923
Ref: Explicit Markup-Footnote-146507
Node: Directives46604
Ref: rest directives46713
Ref: 8246713
Ref: rest id146713
Ref: 8346713
Ref: Directives-Footnote-149874
Ref: Directives-Footnote-249959
Ref: Directives-Footnote-350037
Ref: Directives-Footnote-450113
Ref: Directives-Footnote-550188
Ref: Directives-Footnote-650262
Ref: Directives-Footnote-750335
Ref: Directives-Footnote-850413
Ref: Directives-Footnote-950486
Ref: Directives-Footnote-1050558
Ref: Directives-Footnote-1150635
Ref: Directives-Footnote-1250716
Ref: Directives-Footnote-1350791
Ref: Directives-Footnote-1450867
Ref: Directives-Footnote-1550954
Ref: Directives-Footnote-1651033
Ref: Directives-Footnote-1751109
Ref: Directives-Footnote-1851184
Ref: Directives-Footnote-1951261
Ref: Directives-Footnote-2051345
Ref: Directives-Footnote-2151423
Ref: Directives-Footnote-2251503
Ref: Directives-Footnote-2351583
Ref: Directives-Footnote-2451671
Ref: Directives-Footnote-2551746
Ref: Directives-Footnote-2651825
Ref: Directives-Footnote-2751905
Ref: Directives-Footnote-2851996
Ref: Directives-Footnote-2952073
Ref: Directives-Footnote-3052148
Ref: Directives-Footnote-3152292
Ref: Directives-Footnote-3252366
Ref: Directives-Footnote-3352459
Ref: Directives-Footnote-3452541
Ref: Directives-Footnote-3552615
Ref: Directives-Footnote-3652692
Ref: Directives-Footnote-3752768
Node: Images52844
Ref: rest images52947
Ref: 8452947
Ref: Images-Footnote-154505
Node: Footnotes54579
Ref: rest footnotes54681
Ref: 8654681
Ref: Footnotes-Footnote-155190
Node: Citations55274
Ref: rest citations55383
Ref: 8755383
Ref: Citations-Footnote-155823
Node: Substitutions55907
Ref: rest substitutions56015
Ref: 8856015
Ref: Substitutions-Footnote-156909
Ref: Substitutions-Footnote-257008
Node: Comments57107
Ref: rest comments57221
Ref: 8b57221
Ref: Comments-Footnote-157618
Node: Source encoding57701
Ref: rest source-encoding57809
Ref: 8c57809
Node: Gotchas58162
Ref: rest gotchas58253
Ref: 8e58253
Ref: Gotchas-Footnote-158741
Node: Sphinx Markup Constructs58840
Ref: markup/index sphinxmarkup58959
Ref: 3a58959
Ref: markup/index doc58959
Ref: 8f58959
Ref: markup/index sphinx-markup-constructs58959
Ref: 9058959
Ref: Sphinx Markup Constructs-Footnote-159987
Node: The TOC tree60061
Ref: markup/toctree the-toc-tree60165
Ref: 9160165
Ref: markup/toctree doc60165
Ref: 9260165
Ref: markup/toctree toctree-directive60165
Ref: 3660165
Ref: markup/toctree directive-toctree60604
Ref: 9360604
Ref: The TOC tree-Footnote-166034
Ref: The TOC tree-Footnote-266110
Ref: The TOC tree-Footnote-366425
Node: Special names66684
Ref: markup/toctree special-names66746
Ref: 9966746
Node: Paragraph-level markup67899
Ref: markup/para doc68036
Ref: 9d68036
Ref: markup/para paragraph-level-markup68036
Ref: 9e68036
Ref: markup/para directive-note68198
Ref: 9f68198
Ref: markup/para directive-warning68618
Ref: a068618
Ref: markup/para directive-versionadded69059
Ref: a169059
Ref: markup/para directive-versionchanged69768
Ref: a269768
Ref: markup/para directive-deprecated69994
Ref: a369994
Ref: markup/para directive-seealso70396
Ref: a470396
Ref: markup/para directive-rubric71355
Ref: a571355
Ref: markup/para directive-centered71800
Ref: a671800
Ref: markup/para directive-hlist72156
Ref: a772156
Node: Table-of-contents markup72794
Ref: markup/para table-of-contents-markup72927
Ref: a872927
Ref: Table-of-contents markup-Footnote-173226
Node: Glossary73312
Ref: markup/para glossary73450
Ref: a973450
Ref: markup/para directive-glossary73477
Ref: aa73477
Node: Grammar production displays74838
Ref: markup/para grammar-production-displays74973
Ref: ac74973
Ref: markup/para directive-productionlist75406
Ref: ad75406
Node: Showing code examples76874
Ref: markup/code code-examples77017
Ref: af77017
Ref: markup/code showing-code-examples77017
Ref: b077017
Ref: markup/code doc77017
Ref: b177017
Ref: Showing code examples-Footnote-179400
Node: Line numbers79427
Ref: markup/code line-numbers79514
Ref: b379514
Node: Includes80497
Ref: markup/code includes80584
Ref: b480584
Ref: markup/code directive-literalinclude80615
Ref: b580615
Ref: Includes-Footnote-183524
Node: Inline markup<2>83654
Ref: markup/inline inline-markup83790
Ref: 7783790
Ref: markup/inline doc83790
Ref: b683790
Ref: markup/inline id183790
Ref: b783790
Node: Cross-referencing syntax84555
Ref: markup/inline xref-syntax84662
Ref: 9584662
Ref: markup/inline cross-referencing-syntax84662
Ref: b884662
Node: Cross-referencing objects85931
Ref: markup/inline cross-referencing-objects86063
Ref: b986063
Node: Cross-referencing arbitrary locations86304
Ref: markup/inline ref-role86472
Ref: 7f86472
Ref: markup/inline cross-referencing-arbitrary-locations86472
Ref: bf86472
Ref: markup/inline role-ref86565
Ref: 3886565
Ref: Cross-referencing arbitrary locations-Footnote-188363
Node: Cross-referencing documents88437
Ref: markup/inline cross-referencing-documents88610
Ref: c088610
Ref: markup/inline role-doc88758
Ref: c188758
Node: Referencing downloadable files89306
Ref: markup/inline referencing-downloadable-files89483
Ref: c289483
Ref: markup/inline role-download89583
Ref: c389583
Node: Cross-referencing other items of interest90469
Ref: markup/inline cross-referencing-other-items-of-interest90610
Ref: c490610
Ref: markup/inline role-envvar90799
Ref: c590799
Ref: markup/inline role-token90988
Ref: ae90988
Ref: markup/inline role-keyword91131
Ref: c791131
Ref: markup/inline role-option91284
Ref: c891284
Ref: markup/inline role-term91573
Ref: ab91573
Node: Other semantic markup92027
Ref: markup/inline other-semantic-markup92159
Ref: ca92159
Ref: markup/inline role-abbr92312
Ref: cb92312
Ref: markup/inline role-command92617
Ref: cc92617
Ref: markup/inline role-dfn92707
Ref: cd92707
Ref: markup/inline role-file92836
Ref: ce92836
Ref: markup/inline role-guilabel93226
Ref: cf93226
Ref: markup/inline role-kbd93953
Ref: d093953
Ref: markup/inline role-mailheader94513
Ref: d194513
Ref: markup/inline role-makevar95077
Ref: d295077
Ref: markup/inline role-manpage95151
Ref: d395151
Ref: markup/inline role-menuselection95281
Ref: d495281
Ref: markup/inline role-mimetype96105
Ref: d596105
Ref: markup/inline role-newsgroup96252
Ref: d696252
Ref: markup/inline role-program96329
Ref: d796329
Ref: markup/inline role-regexp96580
Ref: d896580
Ref: markup/inline role-samp96675
Ref: d996675
Ref: markup/inline role-pep97172
Ref: db97172
Ref: markup/inline role-rfc97513
Ref: dc97513
Node: Substitutions<2>97980
Ref: markup/inline substitutions98079
Ref: dd98079
Ref: markup/inline default-substitutions98079
Ref: 8a98079
Node: Miscellaneous markup98981
Ref: markup/misc miscellaneous-markup99087
Ref: e099087
Ref: markup/misc doc99087
Ref: e199087
Node: File-wide metadata99284
Ref: markup/misc file-wide-metadata99391
Ref: e299391
Ref: markup/misc metadata99391
Ref: e399391
Node: Meta-information markup100425
Ref: markup/misc meta-information-markup100564
Ref: e4100564
Ref: markup/misc directive-sectionauthor100625
Ref: e5100625
Ref: markup/misc directive-codeauthor101247
Ref: e7101247
Node: Index-generating markup101618
Ref: markup/misc directive-index102212
Ref: 9b102212
Ref: markup/misc role-index104851
Ref: da104851
Node: Including content based on tags105607
Ref: markup/misc including-content-based-on-tags105745
Ref: e8105745
Ref: markup/misc tags105745
Ref: e9105745
Ref: markup/misc directive-only105822
Ref: 4f105822
Node: Tables<2>106383
Ref: markup/misc tables106489
Ref: ea106489
Ref: markup/misc directive-tabularcolumns106769
Ref: eb106769
Node: Sphinx Domains108699
Ref: domains domains108813
Ref: 41108813
Ref: domains sphinx-domains108813
Ref: ec108813
Ref: domains doc108813
Ref: ed108813
Ref: domains standard-rest-markup108813
Ref: ee108813
Node: What is a Domain?109075
Ref: domains what-is-a-domain109164
Ref: ef109164
Node: Basic Markup110741
Ref: domains basic-markup110856
Ref: f4110856
Ref: domains basic-domain-markup110856
Ref: 9a110856
Ref: domains directive-default-domain112427
Ref: f6112427
Node: Cross-referencing syntax<2>113086
Ref: domains cross-referencing-syntax113162
Ref: f7113162
Node: The Python Domain113863
Ref: domains the-python-domain113973
Ref: f8113973
Ref: domains directive-py module114108
Ref: 9c114108
Ref: domains directive-py currentmodule115194
Ref: f9115194
Ref: domains directive-py data115829
Ref: fb115829
Ref: domains directive-py exception116067
Ref: fc116067
Ref: domains directive-py function116244
Ref: fd116244
Ref: domains directive-py class117148
Ref: 3f117148
Ref: domains directive-py attribute117812
Ref: ff117812
Ref: domains directive-py method118045
Ref: 40118045
Ref: domains directive-py staticmethod118339
Ref: 100118339
Ref: domains directive-py classmethod118521
Ref: 101118521
Ref: domains directive-py decorator118701
Ref: 102118701
Ref: domains directive-py decoratormethod119645
Ref: 104119645
Node: Python Signatures120019
Ref: domains signatures120115
Ref: fe120115
Ref: domains python-signatures120115
Ref: 106120115
Node: Info field lists120973
Ref: domains info-field-lists121110
Ref: 107121110
Node: Cross-referencing Python objects122851
Ref: domains python-roles122962
Ref: ba122962
Ref: domains cross-referencing-python-objects122962
Ref: 108122962
Ref: domains role-py mod123154
Ref: fa123154
Ref: domains role-py func123293
Ref: 103123293
Ref: domains role-py data123612
Ref: 10a123612
Ref: domains role-py const123690
Ref: 10b123690
Ref: domains role-py class123864
Ref: 10c123864
Ref: domains role-py meth123954
Ref: 105123954
Ref: domains role-py attr124212
Ref: 10d124212
Ref: domains role-py exc124296
Ref: 10e124296
Ref: domains role-py obj124390
Ref: 10f124390
Node: The C Domain126005
Ref: domains c-domain126117
Ref: 110126117
Ref: domains the-c-domain126117
Ref: 111126117
Ref: domains directive-c function126215
Ref: 112126215
Ref: domains directive-c member126748
Ref: 113126748
Ref: domains directive-c macro127153
Ref: 114127153
Ref: domains directive-c type127549
Ref: 115127549
Ref: domains directive-c var127714
Ref: 116127714
Node: Cross-referencing C constructs127949
Ref: domains c-roles128028
Ref: bb128028
Ref: domains cross-referencing-c-constructs128028
Ref: 117128028
Ref: domains role-c data128215
Ref: 118128215
Ref: domains role-c func128290
Ref: 119128290
Ref: domains role-c macro128407
Ref: 11a128407
Ref: domains role-c type128498
Ref: 11b128498
Node: The C++ Domain128569
Ref: domains id1128683
Ref: 11c128683
Ref: domains directive-cpp class128829
Ref: 11d128829
Ref: domains directive-cpp function128887
Ref: 11e128887
Ref: domains directive-cpp member128948
Ref: 11f128948
Ref: domains directive-cpp type129007
Ref: 120129007
Ref: domains namespaced theclass method__i ss130052
Ref: 121130052
Ref: domains namespaced theclass method__X X130224
Ref: 122130224
Ref: domains array T subscript-operatorC130369
Ref: 123130369
Ref: domains castto-b-operatorC130530
Ref: 124130530
Ref: domains foo__ssRACE130631
Ref: 125130631
Ref: domains theclass name__ss130751
Ref: 126130751
Ref: domains theclass name__ssAA130805
Ref: 127130805
Ref: domains theclass const_iterator130865
Ref: 128130865
Ref: domains directive-cpp namespace130915
Ref: 129130915
Ref: domains cpp-roles131043
Ref: bc131043
Ref: domains role-cpp class131088
Ref: 12a131088
Ref: domains role-cpp func131127
Ref: 12b131127
Ref: domains role-cpp member131165
Ref: 12c131165
Ref: domains role-cpp type131205
Ref: 12d131205
Node: The Standard Domain132240
Ref: domains the-standard-domain132363
Ref: 12e132363
Ref: domains directive-option132774
Ref: c9132774
Ref: domains directive-envvar133258
Ref: c6133258
Ref: domains directive-program133440
Ref: 130133440
Ref: domains directive-describe134455
Ref: 131134455
Ref: domains directive-object134506
Ref: 132134506
Node: The JavaScript Domain134826
Ref: domains the-javascript-domain134962
Ref: 133134962
Ref: domains directive-js function135085
Ref: 134135085
Ref: domains _S_ getJSON135967
Ref: 135135967
Ref: domains directive-js class136543
Ref: 136136543
Ref: domains MyAnimal136920
Ref: 137136920
Ref: domains directive-js data137176
Ref: 138137176
Ref: domains directive-js attribute137273
Ref: 139137273
Ref: domains js-roles137386
Ref: bd137386
Ref: domains role-js func137447
Ref: 13a137447
Ref: domains role-js class137484
Ref: 13b137484
Ref: domains role-js data137522
Ref: 13c137522
Ref: domains role-js attr137559
Ref: 13d137559
Node: The reStructuredText domain137597
Ref: domains the-restructuredtext-domain137726
Ref: 13e137726
Ref: domains directive-rst directive137868
Ref: 13f137868
Ref: domains directive-foo138295
Ref: 140138295
Ref: domains directive-bar138378
Ref: 141138378
Ref: domains directive-rst role138466
Ref: 142138466
Ref: domains role-foo138646
Ref: 143138646
Ref: domains rst-roles138720
Ref: be138720
Ref: domains role-rst dir138781
Ref: 144138781
Ref: domains role-rst role138818
Ref: 145138818
Node: More domains138857
Ref: domains more-domains138956
Ref: 146138956
Ref: More domains-Footnote-1139205
Ref: More domains-Footnote-2139261
Ref: More domains-Footnote-3139317
Ref: More domains-Footnote-4139379
Ref: More domains-Footnote-5139439
Ref: More domains-Footnote-6139500
Ref: More domains-Footnote-7139559
Node: Available builders139620
Ref: builders builders139738
Ref: 4a139738
Ref: builders php139738
Ref: 147139738
Ref: builders doc139738
Ref: 148139738
Ref: builders module-sphinx builders139738
Ref: 1139738
Ref: builders available-builders139738
Ref: 149139738
Ref: builders module-sphinx builders html139985
Ref: 6139985
Ref: builders sphinx builders html StandaloneHTMLBuilder139987
Ref: 14b139987
Ref: builders sphinx builders html DirectoryHTMLBuilder140384
Ref: 14d140384
Ref: builders sphinx builders html SingleFileHTMLBuilder140958
Ref: 14e140958
Ref: builders module-sphinx builders htmlhelp141295
Ref: 7141295
Ref: builders sphinx builders htmlhelp HTMLHelpBuilder141296
Ref: 14f141296
Ref: builders module-sphinx builders qthelp141585
Ref: b141585
Ref: builders sphinx builders qthelp QtHelpBuilder141586
Ref: 150141586
Ref: builders module-sphinx builders devhelp141860
Ref: 3141860
Ref: builders sphinx builders devhelp DevhelpBuilder141861
Ref: 151141861
Ref: builders module-sphinx builders epub142127
Ref: 4142127
Ref: builders sphinx builders epub EpubBuilder142128
Ref: 152142128
Ref: builders module-sphinx builders latex142800
Ref: 8142800
Ref: builders sphinx builders latex LaTeXBuilder142801
Ref: 3c142801
Ref: builders module-sphinx builders text143830
Ref: d143830
Ref: builders sphinx builders text TextBuilder143832
Ref: 156143832
Ref: builders module-sphinx builders manpage144105
Ref: a144105
Ref: builders sphinx builders manpage ManualPageBuilder144106
Ref: 157144106
Ref: builders module-sphinx builders texinfo144538
Ref: c144538
Ref: builders sphinx builders texinfo TexinfoBuilder144539
Ref: 159144539
Ref: builders sphinx builders html SerializingHTMLBuilder145264
Ref: 15c145264
Ref: builders sphinx builders html SerializingHTMLBuilder implementation146002
Ref: 15d146002
Ref: builders sphinx builders html SerializingHTMLBuilder out_suffix146369
Ref: 15e146369
Ref: builders sphinx builders html SerializingHTMLBuilder globalcontext_filename146445
Ref: 15f146445
Ref: builders sphinx builders html SerializingHTMLBuilder searchindex_filename146668
Ref: 160146668
Ref: builders sphinx builders html PickleHTMLBuilder146892
Ref: 162146892
Ref: builders sphinx builders html JSONHTMLBuilder147476
Ref: 163147476
Ref: builders module-sphinx builders gettext148032
Ref: 5148032
Ref: builders sphinx builders gettext MessageCatalogBuilder148033
Ref: 164148033
Ref: builders module-sphinx builders changes148385
Ref: 2148385
Ref: builders sphinx builders changes ChangesBuilder148386
Ref: 166148386
Ref: builders module-sphinx builders linkcheck148714
Ref: 9148714
Ref: builders sphinx builders linkcheck CheckExternalLinksBuilder148715
Ref: 167148715
Ref: builders module-sphinx builders xml149043
Ref: e149043
Ref: builders sphinx builders xml XMLBuilder149044
Ref: 168149044
Ref: builders sphinx builders xml PseudoXMLBuilder149309
Ref: 169149309
Ref: Available builders-Footnote-1149969
Ref: Available builders-Footnote-2150027
Ref: Available builders-Footnote-3150064
Ref: Available builders-Footnote-4150101
Ref: Available builders-Footnote-5150160
Node: Serialization builder details150208
Ref: builders serialization-builder-details150292
Ref: 16a150292
Ref: builders serialization-details150292
Ref: 161150292
Node: The build configuration file153064
Ref: config module-conf153188
Ref: f153188
Ref: config the-build-configuration-file153188
Ref: 16c153188
Ref: config build-config153188
Ref: 43153188
Ref: config doc153188
Ref: 16d153188
Node: General configuration155505
Ref: config general-configuration155619
Ref: 16e155619
Ref: config confval-extensions155672
Ref: 45155672
Ref: config confval-source_suffix156482
Ref: 16f156482
Ref: config confval-source_encoding156649
Ref: 8d156649
Ref: config confval-master_doc156895
Ref: 98156895
Ref: config confval-exclude_patterns157092
Ref: 170157092
Ref: config confval-unused_docs158009
Ref: 96158009
Ref: config confval-exclude_trees158312
Ref: 97158312
Ref: config confval-exclude_dirnames158687
Ref: 171158687
Ref: config confval-templates_path159132
Ref: 173159132
Ref: config confval-template_bridge159367
Ref: 174159367
Ref: config confval-rst_epilog159785
Ref: 176159785
Ref: config confval-rst_prolog160154
Ref: 89160154
Ref: config confval-primary_domain160330
Ref: f5160330
Ref: config confval-default_role160846
Ref: 85160846
Ref: config confval-keep_warnings161351
Ref: 177161351
Ref: config confval-needs_sphinx161705
Ref: 178161705
Ref: config confval-nitpicky161945
Ref: 179161945
Ref: config confval-nitpick_ignore162201
Ref: 17a162201
Ref: General configuration-Footnote-1162543
Node: Project information162802
Ref: config project-information162957
Ref: 17b162957
Ref: config confval-project163006
Ref: 6b163006
Ref: config confval-copyright163076
Ref: 6d163076
Ref: config confval-version163175
Ref: 6f163175
Ref: config confval-release163370
Ref: 71163370
Ref: config confval-today163741
Ref: df163741
Ref: config confval-today_fmt163772
Ref: de163772
Ref: config confval-highlight_language164316
Ref: b2164316
Ref: config confval-pygments_style164585
Ref: 17d164585
Ref: config confval-add_function_parentheses164934
Ref: 109164934
Ref: config confval-add_module_names165190
Ref: 17e165190
Ref: config confval-show_authors165466
Ref: e6165466
Ref: config confval-modindex_common_prefix165652
Ref: 17f165652
Ref: config confval-trim_footnote_reference_space166047
Ref: 180166047
Ref: config confval-trim_doctest_flags166289
Ref: 181166289
Node: Options for internationalization166751
Ref: config intl-options166908
Ref: 182166908
Ref: config options-for-internationalization166908
Ref: 183166908
Ref: config confval-language167115
Ref: 17c167115
Ref: config confval-locale_dirs168557
Ref: 184168557
Ref: config confval-gettext_compact169216
Ref: 185169216
Node: Options for HTML output169562
Ref: config html-options169723
Ref: 14c169723
Ref: config options-for-html-output169723
Ref: 186169723
Ref: config confval-html_theme169893
Ref: 187169893
Ref: config confval-html_theme_options170083
Ref: 189170083
Ref: config confval-html_theme_path170356
Ref: 18b170356
Ref: config confval-html_style170595
Ref: 16b170595
Ref: config confval-html_title171029
Ref: 18c171029
Ref: config confval-html_short_title171421
Ref: 18d171421
Ref: config confval-html_context171676
Ref: 18e171676
Ref: config confval-html_logo171941
Ref: 18f171941
Ref: config confval-html_favicon172359
Ref: 190172359
Ref: config confval-html_static_path172740
Ref: 172172740
Ref: config confval-html_last_updated_fmt173325
Ref: 191173325
Ref: config confval-html_use_smartypants173590
Ref: 192173590
Ref: config confval-html_add_permalinks173767
Ref: 193173767
Ref: config confval-html_sidebars174336
Ref: 194174336
Ref: config confval-html_additional_pages176656
Ref: 196176656
Ref: config confval-html_domain_indices177041
Ref: 197177041
Ref: config confval-html_use_modindex177529
Ref: 198177529
Ref: config confval-html_use_index177727
Ref: 199177727
Ref: config confval-html_split_index177864
Ref: 19a177864
Ref: config confval-html_copy_source178093
Ref: 19b178093
Ref: config confval-html_show_sourcelink178455
Ref: 195178455
Ref: config confval-html_use_opensearch178683
Ref: 19c178683
Ref: config confval-html_file_suffix179147
Ref: 19d179147
Ref: config confval-html_link_suffix179308
Ref: 19e179308
Ref: config confval-html_translator_class179572
Ref: 19f179572
Ref: config confval-html_show_copyright179855
Ref: 1a0179855
Ref: config confval-html_show_sphinx180014
Ref: 1a1180014
Ref: config confval-html_output_encoding180173
Ref: 1a2180173
Ref: config confval-html_compact_lists180420
Ref: 1a3180420
Ref: config confval-html_secnumber_suffix180659
Ref: 1a4180659
Ref: config confval-html_search_language180849
Ref: 1a5180849
Ref: config confval-html_search_options181276
Ref: 1a6181276
Ref: config confval-html_search_scorer181963
Ref: 1a7181963
Ref: config confval-htmlhelp_basename182199
Ref: 1a8182199
Ref: Options for HTML output-Footnote-1182351
Node: Options for epub output182610
Ref: config options-for-epub-output182763
Ref: 1a9182763
Ref: config epub-options182763
Ref: 1aa182763
Ref: config confval-epub_basename183088
Ref: 1ab183088
Ref: config confval-epub_theme183215
Ref: 1ac183215
Ref: config confval-epub_theme_options183510
Ref: 1ad183510
Ref: config confval-epub_title183783
Ref: 1ae183783
Ref: config confval-epub_author183955
Ref: 1af183955
Ref: config confval-epub_language184108
Ref: 1b0184108
Ref: config confval-epub_publisher184303
Ref: 1b1184303
Ref: config confval-epub_copyright184528
Ref: 1b2184528
Ref: config confval-epub_identifier184712
Ref: 1b3184712
Ref: config confval-epub_scheme185003
Ref: 1b4185003
Ref: config confval-epub_uid185302
Ref: 1b5185302
Ref: config confval-epub_cover185497
Ref: 1b6185497
Ref: config confval-epub_guide186092
Ref: 1b7186092
Ref: config confval-epub_pre_files186682
Ref: 1b8186682
Ref: config confval-epub_post_files187062
Ref: 1b9187062
Ref: config confval-epub_exclude_files187399
Ref: 1ba187399
Ref: config confval-epub_tocdepth187597
Ref: 1bb187597
Ref: config confval-epub_tocdup187854
Ref: 1bc187854
Ref: config confval-epub_fix_images188180
Ref: 1bd188180
Ref: config confval-epub_max_image_width188611
Ref: 1be188611
Ref: Options for epub output-Footnote-1189049
Node: Options for LaTeX output189079
Ref: config latex-options189232
Ref: 155189232
Ref: config options-for-latex-output189232
Ref: 1bf189232
Ref: config confval-latex_documents189330
Ref: 154189330
Ref: config confval-latex_logo191243
Ref: 1c0191243
Ref: config confval-latex_use_parts191478
Ref: 1c1191478
Ref: config confval-latex_appendices191643
Ref: 1c2191643
Ref: config confval-latex_domain_indices191757
Ref: 1c3191757
Ref: config confval-latex_use_modindex192131
Ref: 1c4192131
Ref: config confval-latex_show_pagerefs192328
Ref: 1c5192328
Ref: config confval-latex_show_urls192542
Ref: 1c6192542
Ref: config confval-latex_elements193136
Ref: 1c7193136
Ref: config confval-latex_docclass196148
Ref: 1c8196148
Ref: config confval-latex_additional_files196449
Ref: 1c9196449
Ref: config confval-latex_preamble197036
Ref: 94197036
Ref: config confval-latex_paper_size197231
Ref: 60197231
Ref: config confval-latex_font_size197462
Ref: 1ca197462
Node: Options for text output197680
Ref: config text-options197840
Ref: 1cb197840
Ref: config options-for-text-output197840
Ref: 1cc197840
Ref: config confval-text_newlines197935
Ref: 1cd197935
Ref: config confval-text_sectionchars198323
Ref: 1ce198323
Node: Options for manual page output198616
Ref: config man-options198778
Ref: 1cf198778
Ref: config options-for-manual-page-output198778
Ref: 1d0198778
Ref: config confval-man_pages198894
Ref: 158198894
Ref: config confval-man_show_urls200104
Ref: 1d1200104
Node: Options for Texinfo output200236
Ref: config options-for-texinfo-output200408
Ref: 1d2200408
Ref: config texinfo-options200408
Ref: 1d3200408
Ref: config confval-texinfo_documents200512
Ref: 15a200512
Ref: config confval-texinfo_appendices202258
Ref: 1d4202258
Ref: config confval-texinfo_domain_indices202400
Ref: 1d5202400
Ref: config confval-texinfo_show_urls202776
Ref: 1d6202776
Ref: config confval-texinfo_elements203050
Ref: 1d7203050
Node: Options for the linkcheck builder204200
Ref: config options-for-the-linkcheck-builder204369
Ref: 1d8204369
Ref: config confval-linkcheck_ignore204448
Ref: 1d9204448
Ref: config confval-linkcheck_timeout204698
Ref: 1da204698
Ref: config confval-linkcheck_workers204934
Ref: 1db204934
Ref: config confval-linkcheck_anchors205094
Ref: 1dc205094
Node: Options for the XML builder205360
Ref: config options-for-the-xml-builder205494
Ref: 1dd205494
Ref: config confval-xml_pretty205561
Ref: 1de205561
Node: Internationalization205680
Ref: intl internationalization205806
Ref: 1df205806
Ref: intl intl205806
Ref: 165205806
Ref: intl doc205806
Ref: 1e0205806
Ref: Internationalization-Footnote-1208595
Ref: Internationalization-Footnote-2208623
Ref: Internationalization-Footnote-3208766
Node: HTML theming support208821
Ref: theming html-theming-support208932
Ref: 1e1208932
Ref: theming doc208932
Ref: 188208932
Node: Using a theme209516
Ref: theming using-a-theme209609
Ref: 1e2209609
Node: Builtin themes210895
Ref: theming builtin-themes211012
Ref: 18a211012
Ref: theming id1211012
Ref: 1e3211012
Ref: Builtin themes-Footnote-1218013
Ref: Builtin themes-Footnote-2218044
Ref: Builtin themes-Footnote-3218075
Node: Creating themes218138
Ref: theming creating-themes218233
Ref: 1e4218233
Ref: Creating themes-Footnote-1220117
Node: Templating220261
Ref: theming templating220348
Ref: 1e5220348
Node: Static templates220991
Ref: theming static-templates221078
Ref: 1e7221078
Node: Templating<2>221914
Ref: templating doc222022
Ref: 1e6222022
Ref: templating templating222022
Ref: 1e8222022
Ref: templating id1222022
Ref: 1e9222022
Ref: Templating<2>-Footnote-1222514
Node: Do I need to use Sphinx' templates to produce HTML?222544
Ref: templating do-i-need-to-use-sphinx-templates-to-produce-html222684
Ref: 1ea222684
Node: Jinja/Sphinx Templating Primer223367
Ref: templating jinja-sphinx-templating-primer223550
Ref: 1ec223550
Node: Working with the builtin templates225626
Ref: templating working-with-the-builtin-templates225749
Ref: 1ed225749
Node: Blocks226072
Ref: templating blocks226181
Ref: 1ee226181
Node: Configuration Variables229591
Ref: templating configuration-variables229725
Ref: 1f0229725
Ref: templating reldelim1229895
Ref: 1ef229895
Ref: templating reldelim2230093
Ref: 1f1230093
Ref: templating script_files230410
Ref: 1f2230410
Ref: templating css_files230561
Ref: 1f3230561
Node: Helper Functions230638
Ref: templating helper-functions230782
Ref: 1f4230782
Ref: templating pathto230969
Ref: 1f5230969
Ref: templating hasdoc231270
Ref: 1f6231270
Ref: templating sidebar231361
Ref: 1f7231361
Ref: templating relbar231421
Ref: 1f8231421
Node: Global Variables231485
Ref: templating global-variables231597
Ref: 1f9231597
Ref: templating builder231818
Ref: 1fa231818
Ref: templating copyright231895
Ref: 1fb231895
Ref: templating docstitle231955
Ref: 1fc231955
Ref: templating embedded232056
Ref: 1fd232056
Ref: templating favicon232303
Ref: 1fe232303
Ref: templating file_suffix232385
Ref: 1ff232385
Ref: templating has_source232601
Ref: 200232601
Ref: templating last_updated232722
Ref: 201232722
Ref: templating logo232767
Ref: 202232767
Ref: templating master_doc232849
Ref: 203232849
Ref: templating next232952
Ref: 204232952
Ref: templating pagename233314
Ref: 205233314
Ref: templating parents233579
Ref: 206233579
Ref: templating prev233695
Ref: 207233695
Ref: templating project233765
Ref: 208233765
Ref: templating release233821
Ref: 209233821
Ref: templating rellinks233877
Ref: 20a233877
Ref: templating shorttitle234205
Ref: 20b234205
Ref: templating show_source234274
Ref: 20c234274
Ref: templating sphinx_version234352
Ref: 20d234352
Ref: templating style234420
Ref: 20e234420
Ref: templating title234528
Ref: 20f234528
Ref: templating use_opensearch234615
Ref: 210234615
Ref: templating version234691
Ref: 211234691
Ref: templating meta235116
Ref: 212235116
Ref: templating sourcename235205
Ref: 213235205
Ref: templating toc235372
Ref: 214235372
Ref: templating toctree235478
Ref: 215235478
Node: Sphinx Extensions236168
Ref: extensions extensions236274
Ref: 14a236274
Ref: extensions sphinx-extensions236274
Ref: 216236274
Ref: extensions doc236274
Ref: 217236274
Ref: extensions module-sphinx application236274
Ref: 0236274
Node: Tutorial Writing a simple extension240116
Ref: ext/tutorial exttut240227
Ref: 219240227
Ref: ext/tutorial doc240227
Ref: 21a240227
Ref: ext/tutorial tutorial-writing-a-simple-extension240227
Ref: 21b240227
Node: Build Phases240866
Ref: ext/tutorial build-phases240975
Ref: 21c240975
Node: Extension Design243270
Ref: ext/tutorial extension-design243406
Ref: 21d243406
Node: The Setup Function244577
Ref: ext/tutorial the-setup-function244717
Ref: 220244717
Node: The Node Classes246773
Ref: ext/tutorial the-node-classes246918
Ref: 225246918
Node: The Directive Classes247564
Ref: ext/tutorial the-directive-classes247709
Ref: 226247709
Node: The Event Handlers251636
Ref: ext/tutorial the-event-handlers251756
Ref: 227251756
Node: Extension API255203
Ref: ext/appapi doc255343
Ref: 228255343
Ref: ext/appapi extension-api255343
Ref: 229255343
Ref: ext/appapi sphinx application Sphinx setup_extension255638
Ref: 22a255638
Ref: ext/appapi sphinx application Sphinx add_builder255816
Ref: 22b255816
Ref: ext/appapi sphinx application Sphinx add_config_value255958
Ref: 221255958
Ref: ext/appapi sphinx application Sphinx add_domain257145
Ref: 22d257145
Ref: ext/appapi sphinx application Sphinx override_domain257336
Ref: 22f257336
Ref: ext/appapi sphinx application Sphinx add_index_to_domain257583
Ref: 230257583
Ref: ext/appapi sphinx application Sphinx add_event257781
Ref: 232257781
Ref: ext/appapi sphinx application Sphinx add_node257900
Ref: 222257900
Ref: ext/appapi sphinx application Sphinx add_directive259036
Ref: 223259036
Ref: ext/appapi sphinx application Sphinx add_directive_to_domain260630
Ref: 233260630
Ref: ext/appapi sphinx application Sphinx add_role260946
Ref: 234260946
Ref: ext/appapi sphinx application Sphinx add_role_to_domain261159
Ref: 235261159
Ref: ext/appapi sphinx application Sphinx add_generic_role261335
Ref: 236261335
Ref: ext/appapi sphinx application Sphinx add_object_type261525
Ref: 12f261525
Ref: ext/appapi sphinx application Sphinx add_crossref_type263925
Ref: 237263925
Ref: ext/appapi sphinx application Sphinx add_transform264756
Ref: 238264756
Ref: ext/appapi sphinx application Sphinx add_javascript264956
Ref: 239264956
Ref: ext/appapi sphinx application Sphinx add_stylesheet265325
Ref: 23a265325
Ref: ext/appapi sphinx application Sphinx add_lexer265623
Ref: 23b265623
Ref: ext/appapi sphinx application Sphinx add_autodocumenter265828
Ref: 23c265828
Ref: ext/appapi sphinx application Sphinx add_autodoc_attrgetter266205
Ref: 23d266205
Ref: ext/appapi sphinx application Sphinx add_search_language266603
Ref: 23e266603
Ref: ext/appapi sphinx application Sphinx connect266968
Ref: 224266968
Ref: ext/appapi sphinx application Sphinx disconnect267314
Ref: 240267314
Ref: ext/appapi sphinx application Sphinx emit267399
Ref: 241267399
Ref: ext/appapi sphinx application Sphinx emit_firstresult267620
Ref: 242267620
Ref: ext/appapi sphinx application Sphinx require_sphinx267842
Ref: 243267842
Ref: ext/appapi sphinx application ExtensionError268087
Ref: 244268087
Ref: Extension API-Footnote-1268430
Ref: Extension API-Footnote-2268500
Node: Sphinx core events268565
Ref: ext/appapi events268661
Ref: 23f268661
Ref: ext/appapi sphinx-core-events268661
Ref: 245268661
Ref: ext/appapi event-builder-inited268816
Ref: 246268816
Ref: ext/appapi event-env-get-outdated268944
Ref: 247268944
Ref: ext/appapi event-env-purge-doc269310
Ref: 21f269310
Ref: ext/appapi event-source-read269875
Ref: 248269875
Ref: ext/appapi event-doctree-read270361
Ref: 249270361
Ref: ext/appapi event-missing-reference270553
Ref: 24a270553
Ref: ext/appapi event-doctree-resolved271479
Ref: 21e271479
Ref: ext/appapi event-env-updated271894
Ref: 24b271894
Ref: ext/appapi event-html-collect-pages272107
Ref: 24c272107
Ref: ext/appapi event-html-page-context272376
Ref: 24d272376
Ref: ext/appapi event-build-finished273311
Ref: 24e273311
Node: The template bridge273833
Ref: ext/appapi the-template-bridge273948
Ref: 24f273948
Ref: ext/appapi template-bridge273948
Ref: 250273948
Ref: ext/appapi sphinx application TemplateBridge274003
Ref: 175274003
Ref: ext/appapi sphinx application TemplateBridge init274194
Ref: 251274194
Ref: ext/appapi sphinx application TemplateBridge newest_template_mtime274615
Ref: 252274615
Ref: ext/appapi sphinx application TemplateBridge render274896
Ref: 253274896
Ref: ext/appapi sphinx application TemplateBridge render_string275072
Ref: 254275072
Node: Domain API275253
Ref: ext/appapi domain-api275341
Ref: f3275341
Ref: ext/appapi id1275341
Ref: 255275341
Ref: ext/appapi module-sphinx domains275341
Ref: 10275341
Ref: ext/appapi sphinx domains Domain275378
Ref: 22e275378
Ref: ext/appapi sphinx domains Domain clear_doc276685
Ref: 257276685
Ref: ext/appapi sphinx domains Domain directive276807
Ref: 258276807
Ref: ext/appapi sphinx domains Domain get_objects276994
Ref: 259276994
Ref: ext/appapi sphinx domains Domain get_type_name277923
Ref: 25a277923
Ref: ext/appapi sphinx domains Domain process_doc278023
Ref: 25b278023
Ref: ext/appapi sphinx domains Domain resolve_xref278144
Ref: 25c278144
Ref: ext/appapi sphinx domains Domain role278844
Ref: 25d278844
Ref: ext/appapi sphinx domains Domain dangling_warnings279026
Ref: 25e279026
Ref: ext/appapi sphinx domains Domain data_version279130
Ref: 256279130
Ref: ext/appapi sphinx domains Domain directives279237
Ref: 25f279237
Ref: ext/appapi sphinx domains Domain indices279313
Ref: 260279313
Ref: ext/appapi sphinx domains Domain initial_data279379
Ref: 261279379
Ref: ext/appapi sphinx domains Domain label279458
Ref: 262279458
Ref: ext/appapi sphinx domains Domain name279553
Ref: 263279553
Ref: ext/appapi sphinx domains Domain object_types279630
Ref: 264279630
Ref: ext/appapi sphinx domains Domain roles279724
Ref: 265279724
Ref: ext/appapi sphinx domains ObjType279788
Ref: 266279788
Ref: ext/appapi sphinx domains Index280454
Ref: 231280454
Ref: ext/appapi sphinx domains Index generate281161
Ref: 267281161
Node: Writing new builders282560
Ref: ext/builderapi doc282690
Ref: 268282690
Ref: ext/builderapi writing-builders282690
Ref: 1eb282690
Ref: ext/builderapi writing-new-builders282690
Ref: 269282690
Ref: ext/builderapi sphinx builders Builder282768
Ref: 22c282768
Ref: ext/builderapi sphinx builders Builder get_relative_uri282931
Ref: 26a282931
Ref: ext/builderapi sphinx builders Builder build_all283143
Ref: 26b283143
Ref: ext/builderapi sphinx builders Builder build_specific283208
Ref: 26c283208
Ref: ext/builderapi sphinx builders Builder build_update283326
Ref: 26d283326
Ref: ext/builderapi sphinx builders Builder build283427
Ref: 26e283427
Ref: ext/builderapi sphinx builders Builder init283657
Ref: 26f283657
Ref: ext/builderapi sphinx builders Builder get_outdated_docs283798
Ref: 270283798
Ref: ext/builderapi sphinx builders Builder get_target_uri284171
Ref: 271284171
Ref: ext/builderapi sphinx builders Builder prepare_writing284376
Ref: 272284376
Ref: ext/builderapi sphinx builders Builder write_doc284421
Ref: 273284421
Ref: ext/builderapi sphinx builders Builder finish284468
Ref: 274284468
Node: Builtin Sphinx extensions284587
Ref: extensions builtin-sphinx-extensions284726
Ref: 275284726
Node: sphinx ext autodoc -- Include documentation from docstrings287209
Ref: ext/autodoc module-sphinx ext autodoc287391
Ref: 11287391
Ref: ext/autodoc doc287391
Ref: 276287391
Ref: ext/autodoc sphinx-ext-autodoc-include-documentation-from-docstrings287391
Ref: 277287391
Ref: ext/autodoc directive-automodule288919
Ref: 27a288919
Ref: ext/autodoc directive-autoclass288967
Ref: 278288967
Ref: ext/autodoc directive-autoexception289014
Ref: 27b289014
Ref: ext/autodoc directive-autofunction294567
Ref: 27e294567
Ref: ext/autodoc directive-autodata294617
Ref: 27f294617
Ref: ext/autodoc directive-automethod294663
Ref: 279294663
Ref: ext/autodoc directive-autoattribute294711
Ref: 280294711
Ref: ext/autodoc confval-autoclass_content296767
Ref: 281296767
Ref: ext/autodoc confval-autodoc_member_order297429
Ref: 27d297429
Ref: ext/autodoc confval-autodoc_default_flags297897
Ref: 27c297897
Ref: ext/autodoc confval-autodoc_docstring_signature298676
Ref: 282298676
Node: Docstring preprocessing299357
Ref: ext/autodoc docstring-preprocessing299501
Ref: 283299501
Ref: ext/autodoc event-autodoc-process-docstring299619
Ref: 284299619
Ref: ext/autodoc event-autodoc-process-signature300711
Ref: 285300711
Ref: ext/autodoc sphinx ext autodoc cut_lines302304
Ref: 286302304
Ref: ext/autodoc sphinx ext autodoc between302841
Ref: 287302841
Node: Skipping members303317
Ref: ext/autodoc skipping-members303461
Ref: 288303461
Ref: ext/autodoc event-autodoc-skip-member303668
Ref: 289303668
Node: sphinx ext autosummary -- Generate autodoc summaries304801
Ref: ext/autosummary module-sphinx ext autosummary305048
Ref: 12305048
Ref: ext/autosummary sphinx-ext-autosummary-generate-autodoc-summaries305048
Ref: 28a305048
Ref: ext/autosummary doc305048
Ref: 28b305048
Ref: ext/autosummary directive-autosummary306137
Ref: 28c306137
Node: sphinx-autogen -- generate autodoc stub pages308897
Ref: ext/autosummary sphinx-autogen-generate-autodoc-stub-pages309075
Ref: 28f309075
Node: Generating stub pages automatically309891
Ref: ext/autosummary generating-stub-pages-automatically310099
Ref: 290310099
Ref: ext/autosummary confval-autosummary_generate310294
Ref: 28d310294
Node: Customizing templates310671
Ref: ext/autosummary customizing-templates310825
Ref: 28e310825
Ref: ext/autosummary name311704
Ref: 291311704
Ref: ext/autosummary objname311799
Ref: 292311799
Ref: ext/autosummary fullname311882
Ref: 293311882
Ref: ext/autosummary module311982
Ref: 294311982
Ref: ext/autosummary class312058
Ref: 295312058
Ref: ext/autosummary underline312181
Ref: 296312181
Ref: ext/autosummary members312251
Ref: 297312251
Ref: ext/autosummary functions312382
Ref: 298312382
Ref: ext/autosummary classes312581
Ref: 299312581
Ref: ext/autosummary exceptions312696
Ref: 29a312696
Ref: ext/autosummary methods312817
Ref: 29b312817
Ref: ext/autosummary attributes312931
Ref: 29c312931
Node: sphinx ext doctest -- Test snippets in the documentation313200
Ref: ext/doctest sphinx-ext-doctest-test-snippets-in-the-documentation313451
Ref: 29d313451
Ref: ext/doctest doc313451
Ref: 29e313451
Ref: ext/doctest module-sphinx ext doctest313451
Ref: 14313451
Ref: ext/doctest directive-testsetup314797
Ref: 29f314797
Ref: ext/doctest directive-testcleanup315010
Ref: 2a0315010
Ref: ext/doctest directive-doctest315252
Ref: 2a1315252
Ref: ext/doctest directive-testcode316791
Ref: 2a2316791
Ref: ext/doctest directive-testoutput317713
Ref: 2a3317713
Ref: ext/doctest confval-doctest_path319133
Ref: 2a4319133
Ref: ext/doctest confval-doctest_global_setup319312
Ref: 2a5319312
Ref: ext/doctest confval-doctest_global_cleanup319610
Ref: 2a6319610
Ref: ext/doctest confval-doctest_test_doctest_blocks319914
Ref: 2a7319914
Node: sphinx ext intersphinx -- Link to other projects' documentation321378
Ref: ext/intersphinx sphinx-ext-intersphinx-link-to-other-projects-documentation321599
Ref: 2a8321599
Ref: ext/intersphinx module-sphinx ext intersphinx321599
Ref: 19321599
Ref: ext/intersphinx doc321599
Ref: 2a9321599
Ref: ext/intersphinx confval-intersphinx_mapping323439
Ref: 2aa323439
Ref: ext/intersphinx confval-intersphinx_cache_limit326109
Ref: 2ab326109
Node: Math support in Sphinx326341
Ref: ext/math module-sphinx ext mathbase326548
Ref: 1c326548
Ref: ext/math doc326548
Ref: 2ac326548
Ref: ext/math math-support-in-sphinx326548
Ref: 2ad326548
Ref: ext/math role-math327582
Ref: 2ae327582
Ref: ext/math directive-math327728
Ref: 2af327728
Ref: ext/math role-eq329361
Ref: 2b0329361
Ref: Math support in Sphinx-Footnote-1330044
Node: sphinx ext pngmath -- Render math as PNG images330104
Ref: ext/math module-sphinx ext pngmath330267
Ref: 1f330267
Ref: ext/math sphinx-ext-pngmath-render-math-as-png-images330267
Ref: 2b1330267
Ref: ext/math confval-pngmath_latex330639
Ref: 2b2330639
Ref: ext/math confval-pngmath_dvipng331352
Ref: 2b4331352
Ref: ext/math confval-pngmath_latex_args331574
Ref: 2b3331574
Ref: ext/math confval-pngmath_latex_preamble331738
Ref: 2b5331738
Ref: ext/math confval-pngmath_dvipng_args332030
Ref: 2b6332030
Ref: ext/math confval-pngmath_use_preview332415
Ref: 2b7332415
Ref: ext/math confval-pngmath_add_tooltips333064
Ref: 2b8333064
Ref: sphinx ext pngmath -- Render math as PNG images-Footnote-1333273
Ref: sphinx ext pngmath -- Render math as PNG images-Footnote-2333324
Node: sphinx ext mathjax -- Render math via JavaScript333385
Ref: ext/math module-sphinx ext mathjax333604
Ref: 1d333604
Ref: ext/math sphinx-ext-mathjax-render-math-via-javascript333604
Ref: 2b9333604
Ref: ext/math confval-mathjax_path334009
Ref: 2ba334009
Ref: sphinx ext mathjax -- Render math via JavaScript-Footnote-1334850
Ref: sphinx ext mathjax -- Render math via JavaScript-Footnote-2334881
Node: sphinx ext jsmath -- Render math via JavaScript334931
Ref: ext/math sphinx-ext-jsmath-render-math-via-javascript335094
Ref: 2bb335094
Ref: ext/math module-sphinx ext jsmath335094
Ref: 1a335094
Ref: ext/math confval-jsmath_path335339
Ref: 2bc335339
Ref: sphinx ext jsmath -- Render math via JavaScript-Footnote-1335918
Node: sphinx ext graphviz -- Add Graphviz graphs335965
Ref: ext/graphviz module-sphinx ext graphviz336171
Ref: 16336171
Ref: ext/graphviz doc336171
Ref: 2bd336171
Ref: ext/graphviz amsmath-latex-package336171
Ref: 2be336171
Ref: ext/graphviz sphinx-ext-graphviz-add-graphviz-graphs336171
Ref: 2bf336171
Ref: ext/graphviz directive-graphviz336400
Ref: 2c0336400
Ref: ext/graphviz directive-graph337213
Ref: 2c2337213
Ref: ext/graphviz directive-digraph337575
Ref: 2c3337575
Ref: ext/graphviz confval-graphviz_dot338649
Ref: 2c4338649
Ref: ext/graphviz confval-graphviz_dot_args339182
Ref: 2c5339182
Ref: ext/graphviz confval-graphviz_output_format339447
Ref: 2c1339447
Ref: sphinx ext graphviz -- Add Graphviz graphs-Footnote-1339724
Node: sphinx ext inheritance_diagram -- Include inheritance diagrams339752
Ref: ext/inheritance sphinx-ext-inheritance-diagram-include-inheritance-diagrams340003
Ref: 2c6340003
Ref: ext/inheritance doc340003
Ref: 2c7340003
Ref: ext/inheritance module-sphinx ext inheritance_diagram340003
Ref: 18340003
Ref: ext/inheritance directive-inheritance-diagram340303
Ref: 2c8340303
Ref: ext/inheritance confval-inheritance_graph_attrs341461
Ref: 2c9341461
Ref: ext/inheritance confval-inheritance_node_attrs341750
Ref: 2ca341750
Ref: ext/inheritance confval-inheritance_edge_attrs342051
Ref: 2cb342051
Node: sphinx ext refcounting -- Keep track of reference counting behavior342172
Ref: ext/refcounting sphinx-ext-refcounting-keep-track-of-reference-counting-behavior342442
Ref: 2cc342442
Ref: ext/refcounting module-sphinx ext refcounting342442
Ref: 20342442
Ref: ext/refcounting doc342442
Ref: 2cd342442
Node: sphinx ext ifconfig -- Include content based on configuration342627
Ref: ext/ifconfig sphinx-ext-ifconfig-include-content-based-on-configuration342884
Ref: 2ce342884
Ref: ext/ifconfig module-sphinx ext ifconfig342884
Ref: 17342884
Ref: ext/ifconfig doc342884
Ref: 2cf342884
Ref: ext/ifconfig directive-ifconfig343091
Ref: 2d0343091
Node: sphinx ext coverage -- Collect doc coverage stats343955
Ref: ext/coverage doc344186
Ref: 2d1344186
Ref: ext/coverage sphinx-ext-coverage-collect-doc-coverage-stats344186
Ref: 2d2344186
Ref: ext/coverage module-sphinx ext coverage344186
Ref: 13344186
Ref: ext/coverage sphinx ext coverage CoverageBuilder344386
Ref: 2d3344386
Ref: ext/coverage confval-coverage_ignore_modules344690
Ref: 2d4344690
Ref: ext/coverage confval-coverage_ignore_functions344740
Ref: 2d5344740
Ref: ext/coverage confval-coverage_ignore_classes344792
Ref: 2d6344792
Ref: ext/coverage confval-coverage_c_path344842
Ref: 2d7344842
Ref: ext/coverage confval-coverage_c_regexes344884
Ref: 2d8344884
Ref: ext/coverage confval-coverage_ignore_c_items344929
Ref: 2d9344929
Ref: ext/coverage confval-coverage_write_headline344979
Ref: 2da344979
Ref: ext/coverage confval-coverage_skip_undoc_in_source345099
Ref: 2db345099
Node: sphinx ext todo -- Support for todo items345281
Ref: ext/todo module-sphinx ext todo345506
Ref: 21345506
Ref: ext/todo doc345506
Ref: 2dc345506
Ref: ext/todo sphinx-ext-todo-support-for-todo-items345506
Ref: 2dd345506
Ref: ext/todo directive-todo345733
Ref: 2de345733
Ref: ext/todo directive-todolist345924
Ref: 2e0345924
Ref: ext/todo confval-todo_include_todos346157
Ref: 2df346157
Node: sphinx ext extlinks -- Markup to shorten external links346341
Ref: ext/extlinks module-sphinx ext extlinks346576
Ref: 15346576
Ref: ext/extlinks sphinx-ext-extlinks-markup-to-shorten-external-links346576
Ref: 2e1346576
Ref: ext/extlinks doc346576
Ref: 2e2346576
Ref: ext/extlinks confval-extlinks347405
Ref: 2e3347405
Node: sphinx ext viewcode -- Add links to highlighted source code348886
Ref: ext/viewcode module-sphinx ext viewcode349136
Ref: 22349136
Ref: ext/viewcode sphinx-ext-viewcode-add-links-to-highlighted-source-code349136
Ref: 2e4349136
Ref: ext/viewcode doc349136
Ref: 2e5349136
Node: sphinx ext linkcode -- Add external links to source code349947
Ref: ext/linkcode module-sphinx ext linkcode350207
Ref: 1b350207
Ref: ext/linkcode doc350207
Ref: 2e6350207
Ref: ext/linkcode sphinx-ext-linkcode-add-external-links-to-source-code350207
Ref: 2e7350207
Ref: ext/linkcode confval-linkcode_resolve350804
Ref: 2e8350804
Node: sphinx ext oldcmarkup -- Compatibility extension for old C markup351888
Ref: ext/oldcmarkup module-sphinx ext oldcmarkup352080
Ref: 1e352080
Ref: ext/oldcmarkup sphinx-ext-oldcmarkup-compatibility-extension-for-old-c-markup352080
Ref: 2e9352080
Ref: ext/oldcmarkup doc352080
Ref: 2ea352080
Node: Third-party extensions353138
Ref: extensions third-party-extensions353248
Ref: 2eb353248
Ref: Third-party extensions-Footnote-1353889
Ref: Third-party extensions-Footnote-2353948
Ref: Third-party extensions-Footnote-3354009
Node: Where to put your own extensions?354058
Ref: extensions where-to-put-your-own-extensions354150
Ref: 2ec354150
Ref: extensions sphinx-contrib354150
Ref: 2ed354150
Node: Sphinx Web Support354708
Ref: websupport doc354811
Ref: 2ee354811
Ref: websupport websupport354811
Ref: 2ef354811
Ref: websupport sphinx-web-support354811
Ref: 2f0354811
Node: Web Support Quick Start355510
Ref: web/quickstart websupportquickstart355617
Ref: 2f1355617
Ref: web/quickstart doc355617
Ref: 2f2355617
Ref: web/quickstart web-support-quick-start355617
Ref: 2f3355617
Node: Building Documentation Data355840
Ref: web/quickstart building-documentation-data355981
Ref: 2f4355981
Node: Integrating Sphinx Documents Into Your Webapp357249
Ref: web/quickstart integrating-sphinx-documents-into-your-webapp357418
Ref: 2f7357418
Ref: Integrating Sphinx Documents Into Your Webapp-Footnote-1359253
Node: Authentication359284
Ref: web/quickstart authentication359380
Ref: 2f9359380
Ref: Authentication-Footnote-1361523
Node: Performing Searches361554
Ref: web/quickstart performing-searches361716
Ref: 2fa361716
Ref: Performing Searches-Footnote-1362570
Node: Comments & Proposals362601
Ref: web/quickstart comments-proposals362736
Ref: 2fc362736
Node: Comment Moderation364778
Ref: web/quickstart comment-moderation364885
Ref: 300364885
Node: The WebSupport Class366314
Ref: web/api websupportapi366445
Ref: 301366445
Ref: web/api the-websupport-class366445
Ref: 302366445
Ref: web/api doc366445
Ref: 303366445
Ref: web/api sphinx websupport WebSupport366498
Ref: 2f5366498
Node: Methods368240
Ref: web/api methods368304
Ref: 306368304
Ref: web/api sphinx websupport WebSupport build368335
Ref: 2f6368335
Ref: web/api sphinx websupport WebSupport get_document368751
Ref: 2f8368751
Ref: web/api sphinx websupport WebSupport get_data370308
Ref: 2fe370308
Ref: web/api sphinx websupport WebSupport add_comment372602
Ref: 2fd372602
Ref: web/api sphinx websupport WebSupport process_vote373861
Ref: 2ff373861
Ref: web/api sphinx websupport WebSupport get_search_results374984
Ref: 2fb374984
Node: Search Adapters375333
Ref: web/searchadapters doc375457
Ref: 307375457
Ref: web/searchadapters search-adapters375457
Ref: 308375457
Ref: web/searchadapters searchadapters375457
Ref: 309375457
Ref: web/searchadapters sphinx websupport search BaseSearch375999
Ref: 304375999
Node: BaseSearch Methods376127
Ref: web/searchadapters basesearch-methods376197
Ref: 30a376197
Ref: web/searchadapters sphinx websupport search BaseSearch init_indexing376548
Ref: 30d376548
Ref: web/searchadapters sphinx websupport search BaseSearch finish_indexing376891
Ref: 30e376891
Ref: web/searchadapters sphinx websupport search BaseSearch feed377088
Ref: 30f377088
Ref: web/searchadapters sphinx websupport search BaseSearch add_document377663
Ref: 30b377663
Ref: web/searchadapters sphinx websupport search BaseSearch query378417
Ref: 310378417
Ref: web/searchadapters sphinx websupport search BaseSearch handle_query378876
Ref: 30c378876
Ref: web/searchadapters sphinx websupport search BaseSearch extract_context379482
Ref: 311379482
Node: Storage Backends379816
Ref: web/storagebackends storage-backends379911
Ref: 312379911
Ref: web/storagebackends doc379911
Ref: 313379911
Ref: web/storagebackends storagebackends379911
Ref: 314379911
Ref: web/storagebackends sphinx websupport storage StorageBackend380467
Ref: 305380467
Node: StorageBackend Methods380605
Ref: web/storagebackends storagebackend-methods380680
Ref: 315380680
Ref: web/storagebackends sphinx websupport storage StorageBackend pre_build380741
Ref: 316380741
Ref: web/storagebackends sphinx websupport storage StorageBackend add_node380910
Ref: 317380910
Ref: web/storagebackends sphinx websupport storage StorageBackend post_build381224
Ref: 318381224
Ref: web/storagebackends sphinx websupport storage StorageBackend add_comment381366
Ref: 319381366
Ref: web/storagebackends sphinx websupport storage StorageBackend delete_comment382166
Ref: 31a382166
Ref: web/storagebackends sphinx websupport storage StorageBackend get_data382647
Ref: 31b382647
Ref: web/storagebackends sphinx websupport storage StorageBackend process_vote383133
Ref: 31c383133
Ref: web/storagebackends sphinx websupport storage StorageBackend update_username383509
Ref: 31d383509
Ref: web/storagebackends sphinx websupport storage StorageBackend accept_comment383881
Ref: 31e383881
Node: Sphinx FAQ384149
Ref: faq faq384246
Ref: 31f384246
Ref: faq doc384246
Ref: 320384246
Ref: faq sphinx-faq384246
Ref: 321384246
Node: How do I384479
Ref: faq how-do-i384560
Ref: 322384560
Ref: How do I-Footnote-1385931
Ref: How do I-Footnote-2385968
Ref: How do I-Footnote-3386040
Node: Using Sphinx with386096
Ref: faq using-sphinx-with386195
Ref: 323386195
Ref: faq usingwith386195
Ref: 28386195
Ref: Using Sphinx with-Footnote-1388630
Ref: Using Sphinx with-Footnote-2388705
Ref: Using Sphinx with-Footnote-3388778
Ref: Using Sphinx with-Footnote-4388836
Ref: Using Sphinx with-Footnote-5388890
Node: Epub info388958
Ref: faq epub-info389061
Ref: 324389061
Ref: faq epub-faq389061
Ref: 153389061
Ref: Epub info-Footnote-1391066
Ref: Epub info-Footnote-2391107
Ref: Epub info-Footnote-3391150
Ref: Epub info-Footnote-4391183
Ref: Epub info-Footnote-5391215
Node: Texinfo info391251
Ref: faq texinfo-info391328
Ref: 325391328
Ref: faq texinfo-faq391328
Ref: 15b391328
Node: Displaying Links391949
Ref: faq texinfo-links392028
Ref: 326392028
Ref: faq displaying-links392028
Ref: 327392028
Node: Notes394126
Ref: faq notes394205
Ref: 328394205
Node: Glossary<2>395381
Ref: glossary glossary395484
Ref: 329395484
Ref: glossary doc395484
Ref: 32a395484
Ref: glossary id1395484
Ref: 32b395484
Ref: glossary term-builder395509
Ref: 218395509
Ref: glossary term-configuration-directory395945
Ref: 30395945
Ref: glossary term-directive396150
Ref: f0396150
Ref: glossary term-document-name396584
Ref: 35396584
Ref: glossary term-domain397267
Ref: 32c397267
Ref: glossary term-environment397944
Ref: 4d397944
Ref: glossary term-master-document398218
Ref: 34398218
Ref: glossary term-object398308
Ref: f2398308
Ref: glossary term-role398516
Ref: f1398516
Ref: glossary term-source-directory398756
Ref: 2f398756
Node: Sphinx Developer's Guide398887
Ref: devguide sphinx-developer-s-guide398997
Ref: 32d398997
Ref: devguide doc398997
Ref: 32e398997
Ref: Sphinx Developer's Guide-Footnote-1399949
Ref: Sphinx Developer's Guide-Footnote-2399986
Ref: Sphinx Developer's Guide-Footnote-3400014
Node: Bug Reports and Feature Requests400051
Ref: devguide mercurial400175
Ref: 32f400175
Ref: devguide bug-reports-and-feature-requests400175
Ref: 330400175
Ref: Bug Reports and Feature Requests-Footnote-1400894
Node: Contributing to Sphinx400947
Ref: devguide issue-tracker401092
Ref: 331401092
Ref: devguide contributing-to-sphinx401092
Ref: 332401092
Node: Getting Started401500
Ref: devguide getting-started401598
Ref: 333401598
Ref: Getting Started-Footnote-1403669
Ref: Getting Started-Footnote-2403716
Node: Core Developers403826
Ref: devguide core-developers403924
Ref: 335403924
Node: Coding Guide405092
Ref: devguide coding-guide405196
Ref: 334405196
Ref: Coding Guide-Footnote-1406021
Node: Debugging Tips406068
Ref: devguide debugging-tips406131
Ref: 336406131
Ref: Debugging Tips-Footnote-1406934
Node: Changes in Sphinx406995
Ref: changes changes407115
Ref: 337407115
Ref: changes doc407115
Ref: 338407115
Ref: changes changes-in-sphinx407115
Ref: 339407115
Node: Release 1 2 in development409415
Ref: changes release-1-2-in-development409529
Ref: 33a409529
Node: Release 1 1 3 Mar 10 2012414655
Ref: changes release-1-1-3-mar-10-2012414845
Ref: 33b414845
Node: Release 1 1 2 Nov 1 2011 -- 1 1 1 is a silly version number anyway!416721
Ref: changes release-1-1-2-nov-1-2011-1-1-1-is-a-silly-version-number-anyway416909
Ref: 33c416909
Node: Release 1 1 1 Nov 1 2011417122
Ref: changes release-1-1-1-nov-1-2011417307
Ref: 33d417307
Node: Release 1 1 Oct 9 2011417733
Ref: changes release-1-1-oct-9-2011417876
Ref: 33e417876
Node: Incompatible changes417993
Ref: changes incompatible-changes418095
Ref: 33f418095
Node: Features added418499
Ref: changes features-added418601
Ref: 340418601
Node: Release 1 0 8 Sep 23 2011423337
Ref: changes release-1-0-8-sep-23-2011423481
Ref: 341423481
Node: Release 1 0 7 Jan 15 2011425511
Ref: changes release-1-0-7-jan-15-2011425658
Ref: 342425658
Node: Release 1 0 6 Jan 04 2011427421
Ref: changes release-1-0-6-jan-04-2011427568
Ref: 343427568
Node: Release 1 0 5 Nov 12 2010429013
Ref: changes release-1-0-5-nov-12-2010429160
Ref: 344429160
Node: Release 1 0 4 Sep 17 2010429546
Ref: changes release-1-0-4-sep-17-2010429693
Ref: 345429693
Node: Release 1 0 3 Aug 23 2010430045
Ref: changes release-1-0-3-aug-23-2010430192
Ref: 346430192
Node: Release 1 0 2 Aug 14 2010430938
Ref: changes release-1-0-2-aug-14-2010431085
Ref: 347431085
Node: Release 1 0 1 Jul 27 2010432223
Ref: changes release-1-0-1-jul-27-2010432368
Ref: 348432368
Node: Release 1 0 Jul 23 2010432895
Ref: changes release-1-0-jul-23-2010433040
Ref: 349433040
Node: Incompatible changes<2>433203
Ref: changes id1433312
Ref: 34a433312
Node: Features added<2>434174
Ref: changes id2434283
Ref: 34b434283
Node: Release 0 6 7 Jun 05 2010440985
Ref: changes release-0-6-7-jun-05-2010441130
Ref: 34c441130
Node: Release 0 6 6 May 25 2010441523
Ref: changes release-0-6-6-may-25-2010441670
Ref: 34d441670
Node: Release 0 6 5 Mar 01 2010443327
Ref: changes release-0-6-5-mar-01-2010443474
Ref: 34e443474
Node: Release 0 6 4 Jan 12 2010444241
Ref: changes release-0-6-4-jan-12-2010444388
Ref: 34f444388
Node: Release 0 6 3 Sep 03 2009446070
Ref: changes release-0-6-3-sep-03-2009446217
Ref: 350446217
Node: Release 0 6 2 Jun 16 2009447774
Ref: changes release-0-6-2-jun-16-2009447921
Ref: 351447921
Node: Release 0 6 1 Mar 26 2009450186
Ref: changes release-0-6-1-mar-26-2009450331
Ref: 352450331
Node: Release 0 6 Mar 24 2009450553
Ref: changes release-0-6-mar-24-2009450698
Ref: 353450698
Node: New features added450798
Ref: changes new-features-added450876
Ref: 354450876
Node: Release 0 5 2 Mar 24 2009458875
Ref: changes release-0-5-2-mar-24-2009459020
Ref: 355459020
Node: Release 0 5 1 Dec 15 2008460547
Ref: changes release-0-5-1-dec-15-2008460713
Ref: 356460713
Node: Release 0 5 Nov 23 2008 -- Birthday release!462262
Ref: changes release-0-5-nov-23-2008-birthday-release462427
Ref: 357462427
Node: New features added<2>462604
Ref: changes id3462725
Ref: 358462725
Node: Bugs fixed469265
Ref: changes bugs-fixed469386
Ref: 359469386
Node: Release 0 4 3 Oct 8 2008470795
Ref: changes release-0-4-3-oct-8-2008470960
Ref: 35a470960
Node: Release 0 4 2 Jul 29 2008471880
Ref: changes release-0-4-2-jul-29-2008472025
Ref: 35b472025
Node: Release 0 4 1 Jul 5 2008472969
Ref: changes release-0-4-1-jul-5-2008473113
Ref: 35c473113
Node: Release 0 4 Jun 23 2008474076
Ref: changes release-0-4-jun-23-2008474217
Ref: 35d474217
Node: New features added<3>474368
Ref: changes id4474471
Ref: 35e474471
Node: Bugs fixed<2>477661
Ref: changes id5477764
Ref: 35f477764
Node: Release 0 3 May 6 2008479074
Ref: changes release-0-3-may-6-2008479214
Ref: 360479214
Node: New features added<4>479363
Ref: changes id6479465
Ref: 361479465
Node: Bugs fixed<3>480974
Ref: changes id7481076
Ref: 362481076
Node: Release 0 2 Apr 27 2008481782
Ref: changes release-0-2-apr-27-2008481928
Ref: 363481928
Node: Incompatible changes<3>482128
Ref: changes id8482241
Ref: 364482241
Node: New features added<5>483523
Ref: changes id9483658
Ref: 365483658
Node: Bugs fixed<4>486256
Ref: changes id10486359
Ref: 366486359
Node: Release 0 1 61950 Mar 26 2008487289
Ref: changes release-0-1-61950-mar-26-2008487442
Ref: 367487442
Node: Release 0 1 61945 Mar 26 2008487578
Ref: changes release-0-1-61945-mar-26-2008487737
Ref: 368487737
Node: Release 0 1 61843 Mar 24 2008488973
Ref: changes release-0-1-61843-mar-24-2008489132
Ref: 369489132
Node: Release 0 1 61798 Mar 23 2008489980
Ref: changes release-0-1-61798-mar-23-2008490139
Ref: 36a490139
Node: Release 0 1 61611 Mar 21 2008490930
Ref: changes release-0-1-61611-mar-21-2008491051
Ref: 36b491051
Node: Projects using Sphinx491158
Ref: examples projects-using-sphinx491273
Ref: 36c491273
Ref: examples doc491273
Ref: 36d491273
Ref: examples examples491273
Ref: 36e491273
Ref: Projects using Sphinx-Footnote-1491988
Node: Documentation using the default theme492039
Ref: examples documentation-using-the-default-theme492204
Ref: 36f492204
Node: Documentation using a customized version of the default theme494974
Ref: examples documentation-using-a-customized-version-of-the-default-theme495187
Ref: 370495187
Node: Documentation using the sphinxdoc theme496654
Ref: examples documentation-using-the-sphinxdoc-theme496871
Ref: 371496871
Node: Documentation using another builtin theme497912
Ref: examples documentation-using-another-builtin-theme498123
Ref: 372498123
Node: Documentation using a custom theme/integrated in a site498993
Ref: examples documentation-using-a-custom-theme-integrated-in-a-site499208
Ref: 373499208
Node: Homepages and other non-documentation sites501333
Ref: examples homepages-and-other-non-documentation-sites501534
Ref: 374501534
Node: Books produced using Sphinx502033
Ref: examples books-produced-using-sphinx502170
Ref: 375502170
Node: Python Module Index502801
Node: Index504923

End Tag Table


Local Variables:
coding: utf-8
End:
